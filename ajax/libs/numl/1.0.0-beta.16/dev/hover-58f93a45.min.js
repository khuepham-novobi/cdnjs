import{B as Behavior,s as setAttr}from"./index-a5c9c958.js";let globalIgnoreEmulatedMouseEvents=!1,hoverCount=0;function setGlobalIgnoreEmulatedMouseEvents(){globalIgnoreEmulatedMouseEvents=!0,setTimeout(()=>{globalIgnoreEmulatedMouseEvents=!1},50)}function handleGlobalPointerEvent(e){"touch"===e.pointerType&&setGlobalIgnoreEmulatedMouseEvents()}function setupGlobalTouchEvents(){if("undefined"!=typeof document)return"undefined"!=typeof PointerEvent?document.addEventListener("pointerup",handleGlobalPointerEvent):document.addEventListener("touchend",setGlobalIgnoreEmulatedMouseEvents),hoverCount++,()=>{--hoverCount>0||("undefined"!=typeof PointerEvent?document.removeEventListener("pointerup",handleGlobalPointerEvent):document.removeEventListener("touchend",setGlobalIgnoreEmulatedMouseEvents))}}const DISABLED_ATTR="disabled";class HoverBehavior extends Behavior{init(){this.ignoreEmulatedMouseEvents=!1,this.isHovered=!1,"undefined"!=typeof PointerEvent?(this.on("pointerenter",e=>{globalIgnoreEmulatedMouseEvents&&"mouse"===e.pointerType||this.triggerHoverStart(e,e.pointerType)}),this.on("pointerleave",e=>{this.triggerHoverEnd(e,e.pointerType)})):(this.on("touchstart",()=>{this.ignoreEmulatedMouseEvents=!0}),this.on("mouseenter",e=>{this.ignoreEmulatedMouseEvents||globalIgnoreEmulatedMouseEvents||this.triggerHoverStart(e,"mouse"),this.ignoreEmulatedMouseEvents=!1}),this.on("mouseleave",e=>{this.triggerHoverEnd(e,"mouse")}))}connected(){this.tearDown=setupGlobalTouchEvents()}disconnected(){this.tearDown&&this.tearDown()}get isDisabled(){return this.host.hasAttribute(DISABLED_ATTR)}changed(e,t){e===DISABLED_ATTR&&this.set(null==t)}setEffect(e){this.host.nuSetMod("hover",e),this.host.nuSetContext("hover",e||null),this.contentsRef&&setAttr(this.contentsRef,"is-hover",e)}set(e){this.host.nuSetMod("hoverable",e||null)}triggerHoverStart(e,t){this.isDisabled||"touch"===t||this.isHovered||(this.isHovered=!0,this.emit("hoverstart",{pointerType:t}),this.emit("hoverchange",{pointerType:t}),this.setEffect(!0))}triggerHoverEnd(e,t){!this.isDisabled&&"touch"!==t&&this.isHovered&&(this.isHovered=!1,this.emit("hoverend",{pointerType:t}),this.emit("hoverchange",{pointerType:t}),this.setEffect(!1))}}export default HoverBehavior;export{DISABLED_ATTR};