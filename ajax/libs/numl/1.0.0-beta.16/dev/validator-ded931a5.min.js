import{W as WidgetBehavior,v as devMode,w as warn,H as hideEffect}from"./index-a5c9c958.js";class ValidatorBehavior extends WidgetBehavior{static get params(){return{primary:!0,linkValue:!1,linkHostValue:!1}}init(){const{host:t}=this;this.props.for=(t=>{this.fieldId=t}),this.props.assert=(t=>{t?[this.assert,this.assertValue]=t.split(":"):this.assert=null}),t.nuSetAssert=(t=>{"function"==typeof t?(this.assert=t.name,this.assertValue=t):"string"==typeof t?[this.assert,this.assertValue]=t.split(":"):devMode&&warn("validator: wrong assert method",t)}),t.nuGetAssert=(()=>this.assert),super.init()}get field(){return this.host.getAttribute("for").trim()}connected(){const{host:t}=this;null!=t._assert&&(t.nuSetAssert(t._assert),delete t._assert),this.linkContext("form",t=>{this.currentForm&&t!==this.currentForm&&this.disconnectForm(this.currentForm,!!t),this.currentForm=t,t&&this.connectForm()})}changed(t,s){super.changed(t,s),this.form&&this.connectForm()}connectForm(){const{fieldId:t,assert:s,form:e,assertValue:r,assertMethod:i}=this;t&&s&&e&&this.form.registerCheck(t,this,i||s,r)}disconnectForm(t=this.currentForm,s){const{fieldId:e,assert:r}=this;e&&r&&(t.unregisterCheck(e),s||delete this.form)}setValidity(t){const{host:s}=this;this.validity!==t&&(super.setValidity(t),hideEffect(s,t,"collapse"))}}export default ValidatorBehavior;