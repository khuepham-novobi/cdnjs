import{B as Behavior,J as isTouch,f as fixPosition}from"./index-a5c9c958.js";class TooltipBehavior extends Behavior{connected(){const{host:e}=this,t=this.parent=this.host.parentNode;t&&t.nuElement&&!t.hasAttribute("describedby")&&t.setAttribute("describedby",this.nuId);let s=!1,o=!1;if(e.hidden=!0,this.setMod("tooltip",!0),isTouch)return;const i=()=>{this.use("fixate").then(e=>e.start()),e.hidden=!1,t.nuSetMod("tooltip-shown",!0)},n=()=>{this.use("fixate").then(e=>e.end()),e.hidden=!0,t.nuSetMod("tooltip-shown",!1)},r=()=>{s=!0,o||(i(),setTimeout(()=>{fixPosition(e)}))},d=()=>{s=!1,o=!1,n()};t.addEventListener("mouseenter",r),t.addEventListener("mouseleave",d),this.removeListeners=(()=>{t.removeEventListener("mouseenter",r),t.removeEventListener("mouseleave",d)}),e.nuSetContextHook("focus",e=>{e?(o=!0,s||i()):(o=!1,s||n())})}disconnected(){const e=this.removeListeners;e&&e()}}export default TooltipBehavior;