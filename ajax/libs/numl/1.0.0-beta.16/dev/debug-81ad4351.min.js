import{B as Behavior,n as query,m as generateId}from"./index-a5c9c958.js";let counter=0;class DebugBehavior extends Behavior{constructor(e,t){super(e,t),this.debuggerId=t}connected(){this.connect(),this.log("connected")}changed(e,t){this.log("changed",{name:e,value:t})}disconnected(){this.log("disconnected")}connect(){const e=this.getDebugger();e&&e.use("debugger").then(e=>{e.componentPromise.then(()=>{const{host:t}=this;if(!t.nuDebugId){const e=++counter;window[`el${e}`]=t,Object.keys(t.nuBehaviors||{}).forEach(e=>{window[`${e}${counter}`]=t.nuBehaviors[e]}),t.nuDebugId=e}e.set({target:t})})})}getDebugger(){const{host:e}=this;let t=this.debuggerId.trim();if(this.debugger&&this.debugger.nuId===t)return this.debugger;if(!t){const t=query(e,"nu-debug");return t?(generateId(t),this.debuggerId=t.nuId,this.debugger=t,t):void 0}const n=query(e,`#${t.trim()}`);return n&&n.nu?(this.debugger=n,n):void 0}log(e,t){const n=this.getDebugger();n&&n.use("debugger").then(n=>{n.componentPromise.then(()=>{n.component.log(e,t)})})}}export default DebugBehavior;