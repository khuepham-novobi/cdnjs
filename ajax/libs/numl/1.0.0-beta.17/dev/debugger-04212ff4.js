import { S as SvelteComponent, i as init, s as safe_not_equal, e as element, t as text, a as space, b as set_custom_element_data, c as insert, d as append, g as set_data, f as detach, j as destroy_each, h as empty, n as noop } from './index-f7dc185b.js';

/* src/components/debugger.svelte generated by Svelte v3.31.2 */

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

// (1:0) {#if target}
function create_if_block(ctx) {
	let nu_block0;
	let t0;
	let nu_link;
	let t1_value = /*target*/ ctx[0].tagName.toLowerCase() + "";
	let t1;
	let t2;
	let t3_value = /*target*/ ctx[0].nuUniqId + "";
	let t3;
	let nu_link_scrollto_value;
	let t4;
	let nu_block1;
	let nu_el;
	let t5;
	let t6_value = /*target*/ ctx[0].nuDebugId + "";
	let t6;
	let t7;
	let t8;
	let nu_tablist;
	let nu_tab0;
	let t10;
	let nu_tab1;
	let t12;
	let t13;
	let nu_block3;
	let nu_block2;
	let t14;
	let nu_grid;
	let t15;
	let each_value_3 = /*behaviors*/ ctx[3];
	let each_blocks_3 = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	let each_value_2 = /*eventLog*/ ctx[2];
	let each_blocks_2 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_2[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*attrs*/ ctx[4];
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*behaviors*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			nu_block0 = element("nu-block");
			t0 = text("Debugger for\n    ");
			nu_link = element("nu-link");
			t1 = text(t1_value);
			t2 = text("#");
			t3 = text(t3_value);
			t4 = space();
			nu_block1 = element("nu-block");
			nu_el = element("nu-el");
			t5 = text("el");
			t6 = text(t6_value);
			t7 = text(" in console");
			t8 = space();
			nu_tablist = element("nu-tablist");
			nu_tab0 = element("nu-tab");
			nu_tab0.textContent = "event log";
			t10 = space();
			nu_tab1 = element("nu-tab");
			nu_tab1.textContent = "attributes";
			t12 = space();

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].c();
			}

			t13 = space();
			nu_block3 = element("nu-block");
			nu_block2 = element("nu-block");

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].c();
			}

			t14 = space();
			nu_grid = element("nu-grid");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t15 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			set_custom_element_data(nu_link, "scrollto", nu_link_scrollto_value = /*target*/ ctx[0].nuUniqId);
			set_custom_element_data(nu_el, "text", "b");
			set_custom_element_data(nu_tab0, "control", "eventlog");
			set_custom_element_data(nu_tab0, "value", "eventlog");
			set_custom_element_data(nu_tab0, "trigger", "");
			set_custom_element_data(nu_tab1, "control", "attributes");
			set_custom_element_data(nu_tab1, "value", "attributes");
			set_custom_element_data(nu_tab1, "trigger", "");
			set_custom_element_data(nu_tablist, "value", "eventlog");
			set_custom_element_data(nu_tablist, "border", "inside bottom");
			set_custom_element_data(nu_tablist, "control", "tabs-header[padding]");
			set_custom_element_data(nu_block2, "id", "eventlog");
			set_custom_element_data(nu_grid, "id", "attributes");
			set_custom_element_data(nu_grid, "columns", "auto 1fr");
			set_custom_element_data(nu_grid, "gap", "0 1x");
			set_custom_element_data(nu_block3, "height", "initial 15 15");
			set_custom_element_data(nu_block3, "scrollbar", "");
			set_custom_element_data(nu_block3, "overflow", "auto");
		},
		m(target, anchor) {
			insert(target, nu_block0, anchor);
			append(nu_block0, t0);
			append(nu_block0, nu_link);
			append(nu_link, t1);
			append(nu_link, t2);
			append(nu_link, t3);
			insert(target, t4, anchor);
			insert(target, nu_block1, anchor);
			append(nu_block1, nu_el);
			append(nu_el, t5);
			append(nu_el, t6);
			append(nu_block1, t7);
			insert(target, t8, anchor);
			insert(target, nu_tablist, anchor);
			append(nu_tablist, nu_tab0);
			append(nu_tablist, t10);
			append(nu_tablist, nu_tab1);
			append(nu_tablist, t12);

			for (let i = 0; i < each_blocks_3.length; i += 1) {
				each_blocks_3[i].m(nu_tablist, null);
			}

			insert(target, t13, anchor);
			insert(target, nu_block3, anchor);
			append(nu_block3, nu_block2);

			for (let i = 0; i < each_blocks_2.length; i += 1) {
				each_blocks_2[i].m(nu_block2, null);
			}

			append(nu_block3, t14);
			append(nu_block3, nu_grid);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(nu_grid, null);
			}

			append(nu_block3, t15);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(nu_block3, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*target*/ 1 && t1_value !== (t1_value = /*target*/ ctx[0].tagName.toLowerCase() + "")) set_data(t1, t1_value);
			if (dirty & /*target*/ 1 && t3_value !== (t3_value = /*target*/ ctx[0].nuUniqId + "")) set_data(t3, t3_value);

			if (dirty & /*target*/ 1 && nu_link_scrollto_value !== (nu_link_scrollto_value = /*target*/ ctx[0].nuUniqId)) {
				set_custom_element_data(nu_link, "scrollto", nu_link_scrollto_value);
			}

			if (dirty & /*target*/ 1 && t6_value !== (t6_value = /*target*/ ctx[0].nuDebugId + "")) set_data(t6, t6_value);

			if (dirty & /*behaviors*/ 8) {
				each_value_3 = /*behaviors*/ ctx[3];
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks_3[i]) {
						each_blocks_3[i].p(child_ctx, dirty);
					} else {
						each_blocks_3[i] = create_each_block_3(child_ctx);
						each_blocks_3[i].c();
						each_blocks_3[i].m(nu_tablist, null);
					}
				}

				for (; i < each_blocks_3.length; i += 1) {
					each_blocks_3[i].d(1);
				}

				each_blocks_3.length = each_value_3.length;
			}

			if (dirty & /*eventLog, undefined, JSON*/ 4) {
				each_value_2 = /*eventLog*/ ctx[2];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_2[i]) {
						each_blocks_2[i].p(child_ctx, dirty);
					} else {
						each_blocks_2[i] = create_each_block_2(child_ctx);
						each_blocks_2[i].c();
						each_blocks_2[i].m(nu_block2, null);
					}
				}

				for (; i < each_blocks_2.length; i += 1) {
					each_blocks_2[i].d(1);
				}

				each_blocks_2.length = each_value_2.length;
			}

			if (dirty & /*attrs*/ 16) {
				each_value_1 = /*attrs*/ ctx[4];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(nu_grid, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*behaviors, logBehaviorState, target*/ 41) {
				each_value = /*behaviors*/ ctx[3];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(nu_block3, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(nu_block0);
			if (detaching) detach(t4);
			if (detaching) detach(nu_block1);
			if (detaching) detach(t8);
			if (detaching) detach(nu_tablist);
			destroy_each(each_blocks_3, detaching);
			if (detaching) detach(t13);
			if (detaching) detach(nu_block3);
			destroy_each(each_blocks_2, detaching);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (18:4) {#each behaviors as behavior}
function create_each_block_3(ctx) {
	let nu_tab;
	let t0_value = /*behavior*/ ctx[11].$$name + "";
	let t0;
	let t1;
	let nu_tab_control_value;
	let nu_tab_value_value;

	return {
		c() {
			nu_tab = element("nu-tab");
			t0 = text(t0_value);
			t1 = space();
			set_custom_element_data(nu_tab, "control", nu_tab_control_value = /*behavior*/ ctx[11].$$name);
			set_custom_element_data(nu_tab, "value", nu_tab_value_value = /*behavior*/ ctx[11].$$name);
			set_custom_element_data(nu_tab, "trigger", "");
		},
		m(target, anchor) {
			insert(target, nu_tab, anchor);
			append(nu_tab, t0);
			append(nu_tab, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*behaviors*/ 8 && t0_value !== (t0_value = /*behavior*/ ctx[11].$$name + "")) set_data(t0, t0_value);

			if (dirty & /*behaviors*/ 8 && nu_tab_control_value !== (nu_tab_control_value = /*behavior*/ ctx[11].$$name)) {
				set_custom_element_data(nu_tab, "control", nu_tab_control_value);
			}

			if (dirty & /*behaviors*/ 8 && nu_tab_value_value !== (nu_tab_value_value = /*behavior*/ ctx[11].$$name)) {
				set_custom_element_data(nu_tab, "value", nu_tab_value_value);
			}
		},
		d(detaching) {
			if (detaching) detach(nu_tab);
		}
	};
}

// (27:6) {#each eventLog as log}
function create_each_block_2(ctx) {
	let nu_flex;
	let nu_block0;
	let t0_value = /*log*/ ctx[1].timestamp + "";
	let t0;
	let t1;
	let nu_block1;
	let t2_value = /*log*/ ctx[1].name + "";
	let t2;
	let t3;
	let nu_block2;

	let t4_value = (/*log*/ ctx[1].detail !== undefined
	? JSON.stringify(/*log*/ ctx[1].detail, null, 2)
	: "") + "";

	let t4;
	let t5;

	return {
		c() {
			nu_flex = element("nu-flex");
			nu_block0 = element("nu-block");
			t0 = text(t0_value);
			t1 = space();
			nu_block1 = element("nu-block");
			t2 = text(t2_value);
			t3 = space();
			nu_block2 = element("nu-block");
			t4 = text(t4_value);
			t5 = space();
			set_custom_element_data(nu_block1, "width", "7");
			set_custom_element_data(nu_flex, "gap", "");
		},
		m(target, anchor) {
			insert(target, nu_flex, anchor);
			append(nu_flex, nu_block0);
			append(nu_block0, t0);
			append(nu_flex, t1);
			append(nu_flex, nu_block1);
			append(nu_block1, t2);
			append(nu_flex, t3);
			append(nu_flex, nu_block2);
			append(nu_block2, t4);
			append(nu_flex, t5);
		},
		p(ctx, dirty) {
			if (dirty & /*eventLog*/ 4 && t0_value !== (t0_value = /*log*/ ctx[1].timestamp + "")) set_data(t0, t0_value);
			if (dirty & /*eventLog*/ 4 && t2_value !== (t2_value = /*log*/ ctx[1].name + "")) set_data(t2, t2_value);

			if (dirty & /*eventLog*/ 4 && t4_value !== (t4_value = (/*log*/ ctx[1].detail !== undefined
			? JSON.stringify(/*log*/ ctx[1].detail, null, 2)
			: "") + "")) set_data(t4, t4_value);
		},
		d(detaching) {
			if (detaching) detach(nu_flex);
		}
	};
}

// (38:6) {#each attrs as attr}
function create_each_block_1(ctx) {
	let nu_block0;
	let t0;
	let t1_value = /*attr*/ ctx[14].name + "";
	let t1;
	let t2;
	let t3;
	let nu_block1;
	let t4_value = /*attr*/ ctx[14].value + "";
	let t4;

	return {
		c() {
			nu_block0 = element("nu-block");
			t0 = text("[");
			t1 = text(t1_value);
			t2 = text("]");
			t3 = space();
			nu_block1 = element("nu-block");
			t4 = text(t4_value);
			set_custom_element_data(nu_block0, "text", "b");
		},
		m(target, anchor) {
			insert(target, nu_block0, anchor);
			append(nu_block0, t0);
			append(nu_block0, t1);
			append(nu_block0, t2);
			insert(target, t3, anchor);
			insert(target, nu_block1, anchor);
			append(nu_block1, t4);
		},
		p(ctx, dirty) {
			if (dirty & /*attrs*/ 16 && t1_value !== (t1_value = /*attr*/ ctx[14].name + "")) set_data(t1, t1_value);
			if (dirty & /*attrs*/ 16 && t4_value !== (t4_value = /*attr*/ ctx[14].value + "")) set_data(t4, t4_value);
		},
		d(detaching) {
			if (detaching) detach(nu_block0);
			if (detaching) detach(t3);
			if (detaching) detach(nu_block1);
		}
	};
}

// (43:4) {#each behaviors as behavior}
function create_each_block(ctx) {
	let nu_block1;
	let nu_block0;
	let nu_el;
	let t0_value = /*behavior*/ ctx[11].$$name + "";
	let t0;
	let t1_value = /*target*/ ctx[0].nuDebugId + "";
	let t1;
	let t2;
	let t3;
	let t4_value = /*logBehaviorState*/ ctx[5](/*behavior*/ ctx[11]) + "";
	let t4;
	let t5;
	let nu_block1_id_value;

	return {
		c() {
			nu_block1 = element("nu-block");
			nu_block0 = element("nu-block");
			nu_el = element("nu-el");
			t0 = text(t0_value);
			t1 = text(t1_value);
			t2 = text(" in console");
			t3 = space();
			t4 = text(t4_value);
			t5 = space();
			set_custom_element_data(nu_el, "text", "b");
			set_custom_element_data(nu_block0, "place", "sticky top");
			set_custom_element_data(nu_block0, "fill", "bg");
			set_custom_element_data(nu_block1, "id", nu_block1_id_value = /*behavior*/ ctx[11].$$name);
			set_custom_element_data(nu_block1, "text", "pre");
		},
		m(target, anchor) {
			insert(target, nu_block1, anchor);
			append(nu_block1, nu_block0);
			append(nu_block0, nu_el);
			append(nu_el, t0);
			append(nu_el, t1);
			append(nu_block0, t2);
			append(nu_block1, t3);
			append(nu_block1, t4);
			append(nu_block1, t5);
		},
		p(ctx, dirty) {
			if (dirty & /*behaviors*/ 8 && t0_value !== (t0_value = /*behavior*/ ctx[11].$$name + "")) set_data(t0, t0_value);
			if (dirty & /*target*/ 1 && t1_value !== (t1_value = /*target*/ ctx[0].nuDebugId + "")) set_data(t1, t1_value);
			if (dirty & /*behaviors*/ 8 && t4_value !== (t4_value = /*logBehaviorState*/ ctx[5](/*behavior*/ ctx[11]) + "")) set_data(t4, t4_value);

			if (dirty & /*behaviors*/ 8 && nu_block1_id_value !== (nu_block1_id_value = /*behavior*/ ctx[11].$$name)) {
				set_custom_element_data(nu_block1, "id", nu_block1_id_value);
			}
		},
		d(detaching) {
			if (detaching) detach(nu_block1);
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*target*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (/*target*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let behaviors;
	let attrs;
	let { target = null } = $$props;

	/**
 * @type {NuElement}
 */
	let currentTarget = null;

	let eventLog = [];
	let loggers = {};

	function log(name, detail = undefined) {
		$$invalidate(2, eventLog = [{ name, detail, timestamp: Date.now() }, ...eventLog]);
	}

	const eventList = ["input", "tap", "log"];
	const ignoreProps = ["props", "propsList", "host", "$$name", "component", "ref"];

	function logBehaviorState(behavior) {
		return JSON.stringify(
			Object.entries(behavior).reduce(
				(state, [prop, value]) => {
					if (!ignoreProps.includes(prop) && typeof value !== "function" && !prop.startsWith("_")) {
						try {
							JSON.stringify(value);
							state[prop] = value;
						} catch(e) {
							state[prop] = "{OBJECT}";
						}
					}

					return state;
				},
				{}
			),
			null,
			2
		);
	}

	function createEventLogger(name) {
		return evt => {
			$$invalidate(2, eventLog = [
				{
					name,
					timestamp: Date.now(),
					detail: evt.detail
				},
				...eventLog
			]);
		};
	}

	setInterval(
		() => {
			($$invalidate(3, behaviors), $$invalidate(0, target));
			($$invalidate(4, attrs), $$invalidate(0, target));
		},
		500
	);

	$$self.$$set = $$props => {
		if ("target" in $$props) $$invalidate(0, target = $$props.target);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*currentTarget, target, loggers*/ 193) {
			 (() => {
				if (currentTarget === target) return;

				if (currentTarget) {
					eventList.forEach(name => {
						currentTarget.removeEventListener(name, loggers[name]);
					});
				}

				if (target) {
					eventList.forEach(name => {
						$$invalidate(7, loggers[name] = createEventLogger(name), loggers);
						target.addEventListener(name, loggers[name]);
					});

					$$invalidate(6, currentTarget = target);
				}
			})();
		}

		if ($$self.$$.dirty & /*target*/ 1) {
			 $$invalidate(3, behaviors = target
			? Object.values(target.nuBehaviors).filter(beh => beh.$$name !== "debug" && beh.params && beh.params.widget)
			: []);
		}

		if ($$self.$$.dirty & /*target*/ 1) {
			 $$invalidate(4, attrs = target
			? [...target.attributes].reduce(
					(list, { name, value }) => {
						value = value === "" ? "true" : `"${value}"`;
						list.push({ name, value });
						return list;
					},
					[]
				)
			: []);
		}
	};

	return [
		target,
		log,
		eventLog,
		behaviors,
		attrs,
		logBehaviorState,
		currentTarget,
		loggers
	];
}

class Debugger extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { target: 0, log: 1 });
	}

	get log() {
		return this.$$.ctx[1];
	}
}

export default Debugger;
