import{B as Behavior,s as setAttr}from"./index-da59e341.js";const DISABLED_ATTR="disabled";class FocusBehavior extends Behavior{constructor(t,s){super(t,s),this.params.manual&&(this.isManual=!0);const e=this.ref,i=t.constructor.nuContents;i&&(this.contentsRef=t.querySelector(i)),e.addEventListener("focus",()=>{this.setEffect(!0)}),e.addEventListener("blur",()=>{this.setEffect(!1)}),document.activeElement===e&&this.setEffect(!0),this.linkContext("disabled",t=>{const s=!0===t;this.contextDisabled=s,this.isManual||this.set(!s&&!this.disabled)},!1)}init(){this.isManual?this.set(!1):this.set(!this.disabled)}get disabled(){return this.host.hasAttribute(DISABLED_ATTR)}changed(t,s){t===DISABLED_ATTR&&this.set(null==s)}setEffect(t){this.host.nuSetMod("focus",t),this.host.nuSetContext("focus",t||null),this.contentsRef&&setAttr(this.contentsRef,"is-focus",t)}set(t){this.isManual&&"auto"!==t||"manual"===t?(this.isManual=!0,this.ref.setAttribute("tabindex","-1")):t?(this.isManual=!1,this.ref.setAttribute("tabindex","0")):(this.isManual=!1,this.ref.removeAttribute("tabindex")),this.host.nuSetMod("focusable",t||null)}}export default FocusBehavior;export{DISABLED_ATTR};