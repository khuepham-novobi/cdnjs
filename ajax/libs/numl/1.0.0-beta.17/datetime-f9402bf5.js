import{v as e,w as t}from"./index-133d9ede.js";import{F as i}from"./formatter-64c0592a.js";const r="long",a="short",o="numeric",n={a:(e,t)=>(new Intl.DateTimeFormat(t,{hour:o}).format(e).split(" ")[1]||"").toLowerCase(),ss:(e,t)=>new Intl.DateTimeFormat(t,{minute:"2-digit",second:"2-digit"}).format(e).split(":")[1].toLowerCase(),s:{second:o},mm:(e,t)=>new Intl.DateTimeFormat(t,{hour:"2-digit",minute:"2-digit"}).format(e).split(":")[1].split(" ")[0].toLowerCase(),m:{minute:o},hh:(e,t)=>new Intl.DateTimeFormat(t,{hour:"2-digit"}).format(e).split(/\s/)[0].toLowerCase(),h:(e,t)=>new Intl.DateTimeFormat(t,{hour:o}).format(e).split(/\s/)[0].toLowerCase(),DD:{day:"2-digit"},D:{day:o},dddd:{weekday:r},ddd:{weekday:a},dd:{weekday:"narrow"},MMMM:{month:r},MMM:{month:a},MM:{month:"2-digit"},M:{month:o},YYYY:{year:o},YY:{year:"2-digit"}},m={weekday:[[r,a,"narrow"],a],era:[[r,a,"narrow"],a],year:[[o,"2-digit"],o],month:[[o,"2-digit",r,a,"narrow"],r],day:[[o,"2-digit"],o],hour:[[o,"2-digit"],"2-digit"],minute:[[o,"2-digit"],"2-digit"],second:[[o,"2-digit"],"2-digit"],dayperiod:[["narrow",a,r],a,"dayPeriod"],calendar:[["buddhist","chinese","coptic","ethiopia","ethiopic","gregory","hebrew","indian","islamic","iso8601","japanese","persian","roc"]],system:[["arab","arabext","bali","beng","deva","fullwide","gujr","guru","hanidec","khmr"," knda","laoo","latn","limb","mlym","mong","mymr","orya","tamldec"," telu","thai","tibt"]],date:[["full",r,"medium",a],"medium","dateStyle"],time:[["full",r,"medium",a],"medium","timeStyle"],zone:[[r,a],null,"timeZoneName"],hourcycle:[["h11","h12","h23","h24","auto"],"auto","hourCycle"]};function d(i,r,a){i=i||new Date;const o=null!=a.fallback?a.fallback:e?"Invalid":"â€“";if(!(i instanceof Date))if("now"===i)i=new Date;else{if(null==i)return o;i=new Date(i)}const l=i.getTime();if(l!=l)return o;if(a.format){let e=a.format;return e=e.replace(/\w+/gi,(e=>{const t=n[e];return t?"function"==typeof t?t(i,r):d(i,r,t):e})),e.trim()}const s=Object.entries(m).reduce(((i,[r,o])=>{const n=o[2]||r,m=o[1],d=a[r];return o=o[0],""===d&&m?i[n]=m:d&&(o.includes(d)?i[n]=d:e&&t(`datetime: wrong value for "${r}":`,JSON.stringify(d))),i}),{});a.timezone&&(s.timeZone=a.timezone),a.hourcycle&&"auto"!==a.hourcycle&&(s.hourCycle=a.hourcycle);const u=new Intl.DateTimeFormat(r,s);try{return u.format(i)}catch(e){return t("number format error",e),o}}export default class extends i{static get formatter(){return d}constructor(e,t){super(e,t),this.intervalId=null}apply(){super.apply(),clearInterval(this.intervalId),"now"===this.value&&(this.intervalId=setInterval((()=>{this.apply()}),1e3))}}
