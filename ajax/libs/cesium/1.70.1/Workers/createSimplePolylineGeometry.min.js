define(["./when-54c2dc71","./Check-6c0211bc","./Math-fc8cecf5","./Cartesian2-a8ce88a9","./Transforms-9ac5213c","./RuntimeError-2109023a","./WebGLConstants-76bb35d1","./ComponentDatatype-6d99a1ee","./GeometryAttribute-ded8350c","./GeometryAttributes-4fcfcf40","./IndexDatatype-53503fee","./IntersectionTests-51503d7b","./Plane-29afec1f","./ArcType-dc1c5aee","./EllipsoidRhumbLine-a69f63ad","./EllipsoidGeodesic-9bc1521b","./PolylinePipeline-45af48b7","./Color-8f585f6f"],function(L,e,V,x,S,o,t,I,R,O,M,r,a,U,l,i,N,F){"use strict";function d(e){var o=(e=L.defaultValue(e,L.defaultValue.EMPTY_OBJECT)).positions,t=e.colors,r=L.defaultValue(e.colorsPerVertex,!1);this._positions=o,this._colors=t,this._colorsPerVertex=r,this._arcType=L.defaultValue(e.arcType,U.ArcType.GEODESIC),this._granularity=L.defaultValue(e.granularity,V.CesiumMath.RADIANS_PER_DEGREE),this._ellipsoid=L.defaultValue(e.ellipsoid,x.Ellipsoid.WGS84),this._workerName="createSimplePolylineGeometry";o=1+o.length*x.Cartesian3.packedLength;o+=L.defined(t)?1+t.length*F.Color.packedLength:1,this.packedLength=o+x.Ellipsoid.packedLength+3}d.pack=function(e,o,t){var r;t=L.defaultValue(t,0);var a=e._positions,l=a.length;for(o[t++]=l,r=0;r<l;++r,t+=x.Cartesian3.packedLength)x.Cartesian3.pack(a[r],o,t);var i=e._colors,l=L.defined(i)?i.length:0;for(o[t++]=l,r=0;r<l;++r,t+=F.Color.packedLength)F.Color.pack(i[r],o,t);return x.Ellipsoid.pack(e._ellipsoid,o,t),t+=x.Ellipsoid.packedLength,o[t++]=e._colorsPerVertex?1:0,o[t++]=e._arcType,o[t]=e._granularity,o},d.unpack=function(e,o,t){o=L.defaultValue(o,0);for(var r=e[o++],a=new Array(r),l=0;l<r;++l,o+=x.Cartesian3.packedLength)a[l]=x.Cartesian3.unpack(e,o);for(var i=0<(r=e[o++])?new Array(r):void 0,l=0;l<r;++l,o+=F.Color.packedLength)i[l]=F.Color.unpack(e,o);var n=x.Ellipsoid.unpack(e,o);o+=x.Ellipsoid.packedLength;var s=1===e[o++],p=e[o++],c=e[o];return L.defined(t)?(t._positions=a,t._colors=i,t._ellipsoid=n,t._colorsPerVertex=s,t._arcType=p,t._granularity=c,t):new d({positions:a,colors:i,ellipsoid:n,colorsPerVertex:s,arcType:p,granularity:c})};var H=new Array(2),W=new Array(2),Y={positions:H,height:W,ellipsoid:void 0,minDistance:void 0,granularity:void 0};return d.createGeometry=function(e){var o,t,r,a=e._positions,l=e._colors,i=e._colorsPerVertex,n=e._arcType,s=e._granularity,e=e._ellipsoid,m=V.CesiumMath.chordLength(s,e.maximumRadius),p=L.defined(l)&&!i,c=a.length,d=0;if(n===U.ArcType.GEODESIC||n===U.ArcType.RHUMB){var f,y,u=n===U.ArcType.GEODESIC?(f=V.CesiumMath.chordLength(s,e.maximumRadius),y=N.PolylinePipeline.numberOfPoints,N.PolylinePipeline.generateArc):(f=s,y=N.PolylinePipeline.numberOfPointsRhumbLine,N.PolylinePipeline.generateRhumbArc),h=N.PolylinePipeline.extractHeights(a,e),C=Y;if(n===U.ArcType.GEODESIC?C.minDistance=m:C.granularity=s,C.ellipsoid=e,p){for(var T=0,g=0;g<c-1;g++)T+=y(a[g],a[g+1],f)+1;o=new Float64Array(3*T),r=new Uint8Array(4*T),C.positions=H,C.height=W;for(var P=0,g=0;g<c-1;++g){H[0]=a[g],H[1]=a[g+1],W[0]=h[g],W[1]=h[g+1];var _=u(C);if(L.defined(l))for(var b=_.length/3,v=l[g],B=0;B<b;++B)r[P++]=F.Color.floatToByte(v.red),r[P++]=F.Color.floatToByte(v.green),r[P++]=F.Color.floatToByte(v.blue),r[P++]=F.Color.floatToByte(v.alpha);o.set(_,d),d+=_.length}}else if(C.positions=a,C.height=h,o=new Float64Array(u(C)),L.defined(l)){for(r=new Uint8Array(o.length/3*4),g=0;g<c-1;++g)d=function(e,o,t,r,a,l){var i=N.PolylinePipeline.numberOfPoints(e,o,m),n=t.red,s=t.green,p=t.blue,c=t.alpha,d=r.red,f=r.green,e=r.blue,o=r.alpha;if(F.Color.equals(t,r)){for(g=0;g<i;g++)a[l++]=F.Color.floatToByte(n),a[l++]=F.Color.floatToByte(s),a[l++]=F.Color.floatToByte(p),a[l++]=F.Color.floatToByte(c);return l}for(var y=(d-n)/i,u=(f-s)/i,h=(e-p)/i,C=(o-c)/i,T=l,g=0;g<i;g++)a[T++]=F.Color.floatToByte(n+g*y),a[T++]=F.Color.floatToByte(s+g*u),a[T++]=F.Color.floatToByte(p+g*h),a[T++]=F.Color.floatToByte(c+g*C);return T}(a[g],a[g+1],l[g],l[g+1],r,d);var A=l[c-1];r[d++]=F.Color.floatToByte(A.red),r[d++]=F.Color.floatToByte(A.green),r[d++]=F.Color.floatToByte(A.blue),r[d++]=F.Color.floatToByte(A.alpha)}}else{t=p?2*c-2:c,o=new Float64Array(3*t),r=L.defined(l)?new Uint8Array(4*t):void 0;var E=0,k=0;for(g=0;g<c;++g){var G=a[g];if(p&&0<g&&(x.Cartesian3.pack(G,o,E),E+=3,v=l[g-1],r[k++]=F.Color.floatToByte(v.red),r[k++]=F.Color.floatToByte(v.green),r[k++]=F.Color.floatToByte(v.blue),r[k++]=F.Color.floatToByte(v.alpha)),p&&g===c-1)break;x.Cartesian3.pack(G,o,E),E+=3,L.defined(l)&&(v=l[g],r[k++]=F.Color.floatToByte(v.red),r[k++]=F.Color.floatToByte(v.green),r[k++]=F.Color.floatToByte(v.blue),r[k++]=F.Color.floatToByte(v.alpha))}}e=new O.GeometryAttributes;e.position=new R.GeometryAttribute({componentDatatype:I.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:o}),L.defined(l)&&(e.color=new R.GeometryAttribute({componentDatatype:I.ComponentDatatype.UNSIGNED_BYTE,componentsPerAttribute:4,values:r,normalize:!0}));var A=2*((t=o.length/3)-1),w=M.IndexDatatype.createTypedArray(t,A),D=0;for(g=0;g<t-1;++g)w[D++]=g,w[D++]=g+1;return new R.Geometry({attributes:e,indices:w,primitiveType:R.PrimitiveType.LINES,boundingSphere:S.BoundingSphere.fromPoints(a)})},function(e,o){return L.defined(o)&&(e=d.unpack(e,o)),e._ellipsoid=x.Ellipsoid.clone(e._ellipsoid),d.createGeometry(e)}});