import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as React from"react";import{isFragment}from"react-is";import PropTypes from"prop-types";import clsx from"clsx";import{HTMLElementType}from"@material-ui/utils";import withStyles from"../styles/withStyles";import Popover from"../Popover";import MenuList from"../MenuList";import setRef from"../utils/setRef";import useTheme from"../styles/useTheme";const RTL_ORIGIN={vertical:"top",horizontal:"right"},LTR_ORIGIN={vertical:"top",horizontal:"left"};export const styles={paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}};const Menu=React.forwardRef(function(e,o){const{autoFocus:t=!0,children:r,classes:s,disableAutoFocusItem:n=!1,MenuListProps:p={},onClose:i,open:a,PaperProps:l={},PopoverClasses:c,transitionDuration:u="auto",variant:m="selectedMenu",TransitionProps:{onEntering:P}={}}=e,T=_objectWithoutPropertiesLoose(e.TransitionProps,["onEntering"]),y=_objectWithoutPropertiesLoose(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","variant","TransitionProps"]),d=useTheme(),f=t&&!n&&a,R=React.useRef(null),b=React.useRef(null);let h=-1;React.Children.map(r,(e,o)=>{React.isValidElement(e)&&("production"!==process.env.NODE_ENV&&isFragment(e)&&console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.","Consider providing an array instead."].join("\n")),e.props.disabled||("menu"!==m&&e.props.selected?h=o:-1===h&&(h=o)))});const L=React.Children.map(r,(e,o)=>o===h?React.cloneElement(e,{ref:o=>{b.current=o,setRef(e.ref,o)}}):e);return React.createElement(Popover,_extends({getContentAnchorEl:()=>b.current,classes:c,onClose:i,anchorOrigin:"rtl"===d.direction?RTL_ORIGIN:LTR_ORIGIN,transformOrigin:"rtl"===d.direction?RTL_ORIGIN:LTR_ORIGIN,PaperProps:_extends({},l,{classes:_extends({},l.classes,{root:s.paper})}),open:a,ref:o,transitionDuration:u,TransitionProps:_extends({onEntering:(e,o)=>{R.current&&R.current.adjustStyleForScrollbar(e,d),P&&P(e,o)}},T)},y),React.createElement(MenuList,_extends({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),i&&i(e,"tabKeyDown"))},actions:R,autoFocus:t&&(-1===h||n),autoFocusItem:f,variant:m},p,{className:clsx(s.list,p.className)}),L))});"production"!==process.env.NODE_ENV&&(Menu.propTypes={anchorEl:PropTypes.oneOfType([HTMLElementType,PropTypes.func]),autoFocus:PropTypes.bool,children:PropTypes.node,classes:PropTypes.object,disableAutoFocusItem:PropTypes.bool,MenuListProps:PropTypes.object,onClose:PropTypes.func,open:PropTypes.bool.isRequired,PaperProps:PropTypes.object,PopoverClasses:PropTypes.object,transitionDuration:PropTypes.oneOfType([PropTypes.oneOf(["auto"]),PropTypes.number,PropTypes.shape({appear:PropTypes.number,enter:PropTypes.number,exit:PropTypes.number})]),TransitionProps:PropTypes.object,variant:PropTypes.oneOf(["menu","selectedMenu"])});export default withStyles(styles,{name:"MuiMenu"})(Menu);