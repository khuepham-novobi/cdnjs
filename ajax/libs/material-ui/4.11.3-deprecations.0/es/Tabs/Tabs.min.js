import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as React from"react";import{isFragment}from"react-is";import PropTypes from"prop-types";import clsx from"clsx";import{refType}from"@material-ui/utils";import debounce from"../utils/debounce";import ownerWindow from"../utils/ownerWindow";import{getNormalizedScrollLeft,detectScrollType}from"../utils/scrollLeft";import animate from"../internal/animate";import ScrollbarSize from"./ScrollbarSize";import withStyles from"../styles/withStyles";import TabIndicator from"./TabIndicator";import TabScrollButton from"../TabScrollButton";import useEventCallback from"../utils/useEventCallback";import useTheme from"../styles/useTheme";export const styles=e=>({root:{overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch",display:"flex"},vertical:{flexDirection:"column"},flexContainer:{display:"flex"},flexContainerVertical:{flexDirection:"column"},centered:{justifyContent:"center"},scroller:{position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},fixed:{overflowX:"hidden",width:"100%"},scrollable:{overflowX:"scroll",scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}},scrollButtons:{},scrollButtonsDesktop:{[e.breakpoints.down("xs")]:{display:"none"}},indicator:{}});const Tabs=React.forwardRef(function(e,t){const{"aria-label":o,"aria-labelledby":r,action:l,centered:n=!1,children:a,classes:s,className:c,component:i="div",indicatorColor:p="secondary",onChange:d,orientation:u="horizontal",ScrollButtonComponent:f=TabScrollButton,scrollButtons:m="auto",selectionFollowsFocus:b,TabIndicatorProps:h={},TabScrollButtonProps:y,textColor:T="inherit",value:v,variant:g="standard"}=e,w=_objectWithoutPropertiesLoose(e,["aria-label","aria-labelledby","action","centered","children","classes","className","component","indicatorColor","onChange","orientation","ScrollButtonComponent","scrollButtons","selectionFollowsFocus","TabIndicatorProps","TabScrollButtonProps","textColor","value","variant"]),C=useTheme(),S="scrollable"===g,E="rtl"===C.direction,x="vertical"===u,R=x?"scrollTop":"scrollLeft",N=x?"top":"left",P=x?"bottom":"right",B=x?"clientHeight":"clientWidth",k=x?"height":"width";"production"!==process.env.NODE_ENV&&n&&S&&console.error('Material-UI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');const[W,L]=React.useState(!1),[z,M]=React.useState({}),[D,_]=React.useState({start:!1,end:!1}),[F,I]=React.useState({overflow:"hidden",marginBottom:null}),j=new Map,O=React.useRef(null),A=React.useRef(null),V=()=>{const e=O.current;let t,o;if(e){const o=e.getBoundingClientRect();t={clientWidth:e.clientWidth,scrollLeft:e.scrollLeft,scrollTop:e.scrollTop,scrollLeftNormalized:getNormalizedScrollLeft(e,C.direction),scrollWidth:e.scrollWidth,top:o.top,bottom:o.bottom,left:o.left,right:o.right}}if(e&&!1!==v){const e=A.current.children;if(e.length>0){const t=e[j.get(v)];"production"!==process.env.NODE_ENV&&(t||console.error(["Material-UI: The value provided to the Tabs component is invalid.",`None of the Tabs' children match with \`${v}\`.`,j.keys?`You can provide one of the following values: ${Array.from(j.keys()).join(", ")}.`:null].join("\n"))),o=t?t.getBoundingClientRect():null}}return{tabsMeta:t,tabMeta:o}},H=useEventCallback(()=>{const{tabsMeta:e,tabMeta:t}=V();let o=0;if(t&&e)if(x)o=t.top-e.top+e.scrollTop;else{const r=E?e.scrollLeftNormalized+e.clientWidth-e.scrollWidth:e.scrollLeft;o=t.left-e.left+r}const r={[N]:o,[k]:t?t[k]:0};if(isNaN(z[N])||isNaN(z[k]))M(r);else{const e=Math.abs(z[N]-r[N]),t=Math.abs(z[k]-r[k]);(e>=1||t>=1)&&M(r)}}),U=e=>{animate(R,O.current,e)},X=e=>{let t=O.current[R];x?t+=e:(t+=e*(E?-1:1),t*=E&&"reverse"===detectScrollType()?-1:1),U(t)},Y=()=>{X(-O.current[B])},$=()=>{X(O.current[B])},K=React.useCallback(e=>{I({overflow:null,marginBottom:-e})},[]),q=useEventCallback(()=>{const{tabsMeta:e,tabMeta:t}=V();if(t&&e)if(t[N]<e[N]){const o=e[R]+(t[N]-e[N]);U(o)}else if(t[P]>e[P]){const o=e[R]+(t[P]-e[P]);U(o)}}),G=useEventCallback(()=>{if(S&&"off"!==m){const{scrollTop:e,scrollHeight:t,clientHeight:o,scrollWidth:r,clientWidth:l}=O.current;let n,a;if(x)n=e>1,a=e<t-o-1;else{const e=getNormalizedScrollLeft(O.current,C.direction);n=E?e<r-l-1:e>1,a=E?e>1:e<r-l-1}n===D.start&&a===D.end||_({start:n,end:a})}});React.useEffect(()=>{const e=debounce(()=>{H(),G()}),t=ownerWindow(O.current);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}},[H,G]);const J=React.useCallback(debounce(()=>{G()}));React.useEffect(()=>()=>{J.clear()},[J]),React.useEffect(()=>{L(!0)},[]),React.useEffect(()=>{H(),G()}),React.useEffect(()=>{q()},[q,z]),React.useImperativeHandle(l,()=>({updateIndicator:H,updateScrollButtons:G}),[H,G]);const Q=React.createElement(TabIndicator,_extends({className:s.indicator,orientation:u,color:p},h,{style:_extends({},z,h.style)}));let Z=0;const ee=React.Children.map(a,e=>{if(!React.isValidElement(e))return null;"production"!==process.env.NODE_ENV&&isFragment(e)&&console.error(["Material-UI: The Tabs component doesn't accept a Fragment as a child.","Consider providing an array instead."].join("\n"));const t=void 0===e.props.value?Z:e.props.value;j.set(t,Z);const o=t===v;return Z+=1,React.cloneElement(e,{fullWidth:"fullWidth"===g,indicator:o&&!W&&Q,selected:o,selectionFollowsFocus:b,onChange:d,textColor:T,value:t})}),te=(()=>{const e={};e.scrollbarSizeListener=S?React.createElement(ScrollbarSize,{className:s.scrollable,onChange:K}):null;const t=D.start||D.end,o=S&&("auto"===m&&t||"desktop"===m||"on"===m);return e.scrollButtonStart=o?React.createElement(f,_extends({orientation:u,direction:E?"right":"left",onClick:Y,disabled:!D.start,className:clsx(s.scrollButtons,"on"!==m&&s.scrollButtonsDesktop)},y)):null,e.scrollButtonEnd=o?React.createElement(f,_extends({orientation:u,direction:E?"left":"right",onClick:$,disabled:!D.end,className:clsx(s.scrollButtons,"on"!==m&&s.scrollButtonsDesktop)},y)):null,e})();return React.createElement(i,_extends({className:clsx(s.root,c,x&&s.vertical),ref:t},w),te.scrollButtonStart,te.scrollbarSizeListener,React.createElement("div",{className:clsx(s.scroller,S?s.scrollable:s.fixed),style:F,ref:O,onScroll:J},React.createElement("div",{"aria-label":o,"aria-labelledby":r,className:clsx(s.flexContainer,x&&s.flexContainerVertical,n&&!S&&s.centered),onKeyDown:e=>{const{target:t}=e;if("tab"!==t.getAttribute("role"))return;let o=null,r="vertical"!==u?"ArrowLeft":"ArrowUp",l="vertical"!==u?"ArrowRight":"ArrowDown";switch("vertical"!==u&&"rtl"===C.direction&&(r="ArrowRight",l="ArrowLeft"),e.key){case r:o=t.previousElementSibling||A.current.lastChild;break;case l:o=t.nextElementSibling||A.current.firstChild;break;case"Home":o=A.current.firstChild;break;case"End":o=A.current.lastChild}null!==o&&(o.focus(),e.preventDefault())},ref:A,role:"tablist"},ee),W&&Q),te.scrollButtonEnd)});"production"!==process.env.NODE_ENV&&(Tabs.propTypes={action:refType,"aria-label":PropTypes.string,"aria-labelledby":PropTypes.string,centered:PropTypes.bool,children:PropTypes.node,classes:PropTypes.object,className:PropTypes.string,component:PropTypes.elementType,indicatorColor:PropTypes.oneOf(["primary","secondary"]),onChange:PropTypes.func,orientation:PropTypes.oneOf(["horizontal","vertical"]),ScrollButtonComponent:PropTypes.elementType,scrollButtons:PropTypes.oneOf(["auto","desktop","off","on"]),selectionFollowsFocus:PropTypes.bool,TabIndicatorProps:PropTypes.object,TabScrollButtonProps:PropTypes.object,textColor:PropTypes.oneOf(["inherit","primary","secondary"]),value:PropTypes.any,variant:PropTypes.oneOf(["fullWidth","scrollable","standard"])});export default withStyles(styles,{name:"MuiTabs"})(Tabs);