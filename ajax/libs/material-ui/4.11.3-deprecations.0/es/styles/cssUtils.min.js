export function isUnitless(t){return String(parseFloat(t)).length===String(t).length};export function getUnit(t){return String(t).match(/[\d.\-+]*\s*(.*)/)[1]||""};export function toUnitless(t){return parseFloat(t)};export function convertLength(t){return(e,n)=>{const r=getUnit(e);if(r===n)return e;let i=toUnitless(e);if("px"!==r)if("em"===r)i=toUnitless(e)*toUnitless(t);else if("rem"===r)return i=toUnitless(e)*toUnitless(t),e;let o=i;if("px"!==n)if("em"===n)o=i/toUnitless(t);else{if("rem"!==n)return e;o=i/toUnitless(t)}return parseFloat(o.toFixed(5))+n}};export function alignProperty({size:t,grid:e}){const n=t-t%e,r=n+e;return t-n<r-t?n:r};export function fontGrid({lineHeight:t,pixels:e,htmlFontSize:n}){return e/(t*n)};export function responsiveProperty({cssProperty:t,min:e,max:n,unit:r="rem",breakpoints:i=[600,960,1280],transform:o=null}){const s={[t]:`${e}${r}`},l=(n-e)/i[i.length-1];return i.forEach(n=>{let i=e+l*n;null!==o&&(i=o(i)),s[`@media (min-width:${n}px)`]={[t]:`${Math.round(1e4*i)/1e4}${r}`}}),s};