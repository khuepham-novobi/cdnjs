import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as React from"react";import{isFragment}from"react-is";import PropTypes from"prop-types";import clsx from"clsx";import{HTMLElementType}from"@material-ui/utils";import withStyles from"../styles/withStyles";import Popover from"../Popover";import MenuList from"../MenuList";import*as ReactDOM from"react-dom";import setRef from"../utils/setRef";import useTheme from"../styles/useTheme";import deprecatedPropType from"../utils/deprecatedPropType";const RTL_ORIGIN={vertical:"top",horizontal:"right"},LTR_ORIGIN={vertical:"top",horizontal:"left"};export const styles={paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}};const Menu=React.forwardRef(function(e,o){const{autoFocus:r=!0,children:t,classes:s,disableAutoFocusItem:n=!1,MenuListProps:p={},onClose:i,onEntering:a,open:c,PaperProps:l={},PopoverClasses:u,transitionDuration:P="auto",TransitionProps:{onEntering:m}={},variant:T="selectedMenu"}=e,d=_objectWithoutPropertiesLoose(e.TransitionProps,["onEntering"]),y=_objectWithoutPropertiesLoose(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"]),f=useTheme(),h=r&&!n&&c,R=React.useRef(null),b=React.useRef(null);let E=-1;React.Children.map(t,(e,o)=>{React.isValidElement(e)&&("production"!==process.env.NODE_ENV&&isFragment(e)&&console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.","Consider providing an array instead."].join("\n")),e.props.disabled||("menu"!==T&&e.props.selected?E=o:-1===E&&(E=o)))});const M=React.Children.map(t,(e,o)=>o===E?React.cloneElement(e,{ref:o=>{b.current=ReactDOM.findDOMNode(o),setRef(e.ref,o)}}):e);return React.createElement(Popover,_extends({getContentAnchorEl:()=>b.current,classes:u,onClose:i,TransitionProps:_extends({onEntering:(e,o)=>{R.current&&R.current.adjustStyleForScrollbar(e,f),a&&a(e,o),m&&m(e,o)}},d),anchorOrigin:"rtl"===f.direction?RTL_ORIGIN:LTR_ORIGIN,transformOrigin:"rtl"===f.direction?RTL_ORIGIN:LTR_ORIGIN,PaperProps:_extends({},l,{classes:_extends({},l.classes,{root:s.paper})}),open:c,ref:o,transitionDuration:P},y),React.createElement(MenuList,_extends({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),i&&i(e,"tabKeyDown"))},actions:R,autoFocus:r&&(-1===E||n),autoFocusItem:h,variant:T},p,{className:clsx(s.list,p.className)}),M))});"production"!==process.env.NODE_ENV&&(Menu.propTypes={anchorEl:PropTypes.oneOfType([HTMLElementType,PropTypes.func]),autoFocus:PropTypes.bool,children:PropTypes.node,classes:PropTypes.object,disableAutoFocusItem:PropTypes.bool,MenuListProps:PropTypes.object,onClose:PropTypes.func,onEnter:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onEntered:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onEntering:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onExit:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onExited:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onExiting:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),open:PropTypes.bool.isRequired,PaperProps:PropTypes.object,PopoverClasses:PropTypes.object,transitionDuration:PropTypes.oneOfType([PropTypes.oneOf(["auto"]),PropTypes.number,PropTypes.shape({appear:PropTypes.number,enter:PropTypes.number,exit:PropTypes.number})]),TransitionProps:PropTypes.object,variant:PropTypes.oneOf(["menu","selectedMenu"])});export default withStyles(styles,{name:"MuiMenu"})(Menu);