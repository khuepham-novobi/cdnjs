import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutProperties from"@babel/runtime/helpers/esm/objectWithoutProperties";import*as React from"react";import PropTypes from"prop-types";import debounce from"../utils/debounce";import useForkRef from"../utils/useForkRef";import deprecatedPropType from"../utils/deprecatedPropType";function getStyleValue(e,t){return parseInt(e[t],10)||0}var useEnhancedEffect="undefined"!=typeof window?React.useLayoutEffect:React.useEffect,styles={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}},TextareaAutosize=React.forwardRef(function(e,t){var r=e.onChange,o=e.rows,s=e.rowsMax,n=e.rowsMin,a=e.maxRows,p=e.minRows,i=void 0===p?1:p,u=e.style,l=e.value,c=_objectWithoutProperties(e,["onChange","rows","rowsMax","rowsMin","maxRows","minRows","style","value"]),d=a||s,y=o||n||i,f=React.useRef(null!=l).current,m=React.useRef(null),T=useForkRef(t,m),h=React.useRef(null),w=React.useRef(0),b=React.useState({}),P=b[0],R=b[1],g=React.useCallback(function(){var t=m.current,r=window.getComputedStyle(t),o=h.current;o.style.width=r.width,o.value=t.value||e.placeholder||"x","\n"===o.value.slice(-1)&&(o.value+=" ");var s=r["box-sizing"],n=getStyleValue(r,"padding-bottom")+getStyleValue(r,"padding-top"),a=getStyleValue(r,"border-bottom-width")+getStyleValue(r,"border-top-width"),p=o.scrollHeight-n;o.value="x";var i=o.scrollHeight-n,u=p;y&&(u=Math.max(Number(y)*i,u)),d&&(u=Math.min(Number(d)*i,u));var l=(u=Math.max(u,i))+("border-box"===s?n+a:0),c=Math.abs(u-p)<=1;R(function(e){return w.current<20&&(l>0&&Math.abs((e.outerHeightStyle||0)-l)>1||e.overflow!==c)?(w.current+=1,{overflow:c,outerHeightStyle:l}):("production"!==process.env.NODE_ENV&&20===w.current&&console.error(["Material-UI: Too many re-renders. The layout is unstable.","TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n")),e)})},[d,y,e.placeholder]);React.useEffect(function(){var e=debounce(function(){w.current=0,g()});return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}},[g]),useEnhancedEffect(function(){g()}),React.useEffect(function(){w.current=0},[l]);return React.createElement(React.Fragment,null,React.createElement("textarea",_extends({value:l,onChange:function(e){w.current=0,f||g(),r&&r(e)},ref:T,rows:y,style:_extends({height:P.outerHeightStyle,overflow:P.overflow?"hidden":null},u)},c)),React.createElement("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:h,tabIndex:-1,style:_extends({},styles.shadow,u)}))});"production"!==process.env.NODE_ENV&&(TextareaAutosize.propTypes={className:PropTypes.string,maxRows:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),minRows:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),onChange:PropTypes.func,placeholder:PropTypes.string,rows:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `rowsMin` instead."),rowsMax:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `maxRows` instead."),rowsMin:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `minRows` instead."),style:PropTypes.object,value:PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string),PropTypes.number,PropTypes.string])});export default TextareaAutosize;