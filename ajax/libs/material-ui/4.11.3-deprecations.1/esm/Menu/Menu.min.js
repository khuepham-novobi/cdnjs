import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutProperties from"@babel/runtime/helpers/esm/objectWithoutProperties";import*as React from"react";import{isFragment}from"react-is";import PropTypes from"prop-types";import clsx from"clsx";import{HTMLElementType}from"@material-ui/utils";import withStyles from"../styles/withStyles";import Popover from"../Popover";import MenuList from"../MenuList";import*as ReactDOM from"react-dom";import setRef from"../utils/setRef";import useTheme from"../styles/useTheme";import deprecatedPropType from"../utils/deprecatedPropType";var RTL_ORIGIN={vertical:"top",horizontal:"right"},LTR_ORIGIN={vertical:"top",horizontal:"left"};export var styles={paper:{maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"},list:{outline:0}};var Menu=React.forwardRef(function(e,o){var r=e.autoFocus,t=void 0===r||r,s=e.children,n=e.classes,p=e.disableAutoFocusItem,i=void 0!==p&&p,a=e.MenuListProps,c=void 0===a?{}:a,u=e.onClose,l=e.onEntering,d=e.open,P=e.PaperProps,m=void 0===P?{}:P,T=e.PopoverClasses,y=e.transitionDuration,f=void 0===y?"auto":y,h=e.TransitionProps,R=(h=void 0===h?{}:h).onEntering,v=_objectWithoutProperties(h,["onEntering"]),b=e.variant,E=void 0===b?"selectedMenu":b,M=_objectWithoutProperties(e,["autoFocus","children","classes","disableAutoFocusItem","MenuListProps","onClose","onEntering","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"]),x=useTheme(),O=t&&!i&&d,g=React.useRef(null),I=React.useRef(null),_=-1;React.Children.map(s,function(e,o){React.isValidElement(e)&&("production"!==process.env.NODE_ENV&&isFragment(e)&&console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.","Consider providing an array instead."].join("\n")),e.props.disabled||("menu"!==E&&e.props.selected?_=o:-1===_&&(_=o)))});var L=React.Children.map(s,function(e,o){return o===_?React.cloneElement(e,{ref:function(o){I.current=ReactDOM.findDOMNode(o),setRef(e.ref,o)}}):e});return React.createElement(Popover,_extends({getContentAnchorEl:function(){return I.current},classes:T,onClose:u,TransitionProps:_extends({onEntering:function(e,o){g.current&&g.current.adjustStyleForScrollbar(e,x),l&&l(e,o),R&&R(e,o)}},v),anchorOrigin:"rtl"===x.direction?RTL_ORIGIN:LTR_ORIGIN,transformOrigin:"rtl"===x.direction?RTL_ORIGIN:LTR_ORIGIN,PaperProps:_extends({},m,{classes:_extends({},m.classes,{root:n.paper})}),open:d,ref:o,transitionDuration:f},M),React.createElement(MenuList,_extends({onKeyDown:function(e){"Tab"===e.key&&(e.preventDefault(),u&&u(e,"tabKeyDown"))},actions:g,autoFocus:t&&(-1===_||i),autoFocusItem:O,variant:E},c,{className:clsx(n.list,c.className)}),L))});"production"!==process.env.NODE_ENV&&(Menu.propTypes={anchorEl:PropTypes.oneOfType([HTMLElementType,PropTypes.func]),autoFocus:PropTypes.bool,children:PropTypes.node,classes:PropTypes.object,disableAutoFocusItem:PropTypes.bool,MenuListProps:PropTypes.object,onClose:PropTypes.func,onEnter:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onEntered:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onEntering:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onExit:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onExited:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),onExiting:deprecatedPropType(PropTypes.func,"Use the `TransitionProps` prop instead."),open:PropTypes.bool.isRequired,PaperProps:PropTypes.object,PopoverClasses:PropTypes.object,transitionDuration:PropTypes.oneOfType([PropTypes.oneOf(["auto"]),PropTypes.number,PropTypes.shape({appear:PropTypes.number,enter:PropTypes.number,exit:PropTypes.number})]),TransitionProps:PropTypes.object,variant:PropTypes.oneOf(["menu","selectedMenu"])});export default withStyles(styles,{name:"MuiMenu"})(Menu);