import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as React from"react";import PropTypes from"prop-types";import debounce from"../utils/debounce";import useForkRef from"../utils/useForkRef";import deprecatedPropType from"../utils/deprecatedPropType";function getStyleValue(e,t){return parseInt(e[t],10)||0}const useEnhancedEffect="undefined"!=typeof window?React.useLayoutEffect:React.useEffect,styles={shadow:{visibility:"hidden",position:"absolute",overflow:"hidden",height:0,top:0,left:0,transform:"translateZ(0)"}},TextareaAutosize=React.forwardRef(function(e,t){const{onChange:r,rows:o,rowsMax:s,rowsMin:n,maxRows:a,minRows:p=1,style:i,value:l}=e,u=_objectWithoutPropertiesLoose(e,["onChange","rows","rowsMax","rowsMin","maxRows","minRows","style","value"]),c=a||s,d=o||n||p,{current:y}=React.useRef(null!=l),f=React.useRef(null),m=useForkRef(t,f),T=React.useRef(null),h=React.useRef(0),[w,b]=React.useState({}),P=React.useCallback(()=>{const t=f.current,r=window.getComputedStyle(t),o=T.current;o.style.width=r.width,o.value=t.value||e.placeholder||"x","\n"===o.value.slice(-1)&&(o.value+=" ");const s=r["box-sizing"],n=getStyleValue(r,"padding-bottom")+getStyleValue(r,"padding-top"),a=getStyleValue(r,"border-bottom-width")+getStyleValue(r,"border-top-width"),p=o.scrollHeight-n;o.value="x";const i=o.scrollHeight-n;let l=p;d&&(l=Math.max(Number(d)*i,l)),c&&(l=Math.min(Number(c)*i,l));const u=(l=Math.max(l,i))+("border-box"===s?n+a:0),y=Math.abs(l-p)<=1;b(e=>h.current<20&&(u>0&&Math.abs((e.outerHeightStyle||0)-u)>1||e.overflow!==y)?(h.current+=1,{overflow:y,outerHeightStyle:u}):("production"!==process.env.NODE_ENV&&20===h.current&&console.error(["Material-UI: Too many re-renders. The layout is unstable.","TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n")),e))},[c,d,e.placeholder]);React.useEffect(()=>{const e=debounce(()=>{h.current=0,P()});return window.addEventListener("resize",e),()=>{e.clear(),window.removeEventListener("resize",e)}},[P]),useEnhancedEffect(()=>{P()}),React.useEffect(()=>{h.current=0},[l]);return React.createElement(React.Fragment,null,React.createElement("textarea",_extends({value:l,onChange:e=>{h.current=0,y||P(),r&&r(e)},ref:m,rows:d,style:_extends({height:w.outerHeightStyle,overflow:w.overflow?"hidden":null},i)},u)),React.createElement("textarea",{"aria-hidden":!0,className:e.className,readOnly:!0,ref:T,tabIndex:-1,style:_extends({},styles.shadow,i)}))});"production"!==process.env.NODE_ENV&&(TextareaAutosize.propTypes={className:PropTypes.string,maxRows:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),minRows:PropTypes.oneOfType([PropTypes.number,PropTypes.string]),onChange:PropTypes.func,placeholder:PropTypes.string,rows:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `rowsMin` instead."),rowsMax:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `maxRows` instead."),rowsMin:deprecatedPropType(PropTypes.oneOfType([PropTypes.number,PropTypes.string]),"Use `minRows` instead."),style:PropTypes.object,value:PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string),PropTypes.number,PropTypes.string])});export default TextareaAutosize;