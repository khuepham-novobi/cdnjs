import _extends from"@babel/runtime/helpers/esm/extends";import _objectWithoutPropertiesLoose from"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";import*as React from"react";import{isFragment}from"react-is";import PropTypes from"prop-types";import clsx from"clsx";import{refType}from"@material-ui/utils";import debounce from"../utils/debounce";import ownerWindow from"../utils/ownerWindow";import{getNormalizedScrollLeft,detectScrollType}from"../utils/scrollLeft";import animate from"../internal/animate";import ScrollbarSize from"./ScrollbarSize";import withStyles from"../styles/withStyles";import TabIndicator from"./TabIndicator";import TabScrollButton from"../TabScrollButton";import useEventCallback from"../utils/useEventCallback";import useTheme from"../styles/useTheme";export const styles=e=>({root:{overflow:"hidden",minHeight:48,WebkitOverflowScrolling:"touch",display:"flex"},vertical:{flexDirection:"column"},flexContainer:{display:"flex"},flexContainerVertical:{flexDirection:"column"},centered:{justifyContent:"center"},scroller:{position:"relative",display:"inline-block",flex:"1 1 auto",whiteSpace:"nowrap"},fixed:{overflowX:"hidden",width:"100%"},scrollableX:{overflowX:"auto",overflowY:"hidden"},scrollableY:{overflowY:"auto",overflowX:"hidden"},hideScrollbar:{scrollbarWidth:"none","&::-webkit-scrollbar":{display:"none"}},scrollButtons:{},scrollButtonsHideMobile:{[e.breakpoints.down("sm")]:{display:"none"}},indicator:{}});const Tabs=React.forwardRef(function(e,t){const{"aria-label":o,"aria-labelledby":l,action:r,centered:n=!1,children:a,classes:s,className:i,component:c="div",allowScrollButtonsMobile:d=!1,indicatorColor:p="secondary",onChange:u,orientation:b="horizontal",ScrollButtonComponent:f=TabScrollButton,scrollButtons:m="auto",selectionFollowsFocus:h,TabIndicatorProps:y={},TabScrollButtonProps:v,textColor:T="inherit",value:w,variant:S="standard",visibleScrollbar:g=!1}=e,x=_objectWithoutPropertiesLoose(e,["aria-label","aria-labelledby","action","centered","children","classes","className","component","allowScrollButtonsMobile","indicatorColor","onChange","orientation","ScrollButtonComponent","scrollButtons","selectionFollowsFocus","TabIndicatorProps","TabScrollButtonProps","textColor","value","variant","visibleScrollbar"]),C=useTheme(),E="scrollable"===S,R="rtl"===C.direction,P="vertical"===b,B=P?"scrollTop":"scrollLeft",N=P?"top":"left",W=P?"bottom":"right",L=P?"clientHeight":"clientWidth",M=P?"height":"width";"production"!==process.env.NODE_ENV&&n&&E&&console.error('Material-UI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');const[k,z]=React.useState(!1),[I,_]=React.useState({}),[F,j]=React.useState({start:!1,end:!1}),[O,A]=React.useState({overflow:"hidden",scrollbarWidth:0}),D=new Map,H=React.useRef(null),V=React.useRef(null),X=()=>{const e=H.current;let t,o;if(e){const o=e.getBoundingClientRect();t={clientWidth:e.clientWidth,scrollLeft:e.scrollLeft,scrollTop:e.scrollTop,scrollLeftNormalized:getNormalizedScrollLeft(e,C.direction),scrollWidth:e.scrollWidth,top:o.top,bottom:o.bottom,left:o.left,right:o.right}}if(e&&!1!==w){const e=V.current.children;if(e.length>0){const t=e[D.get(w)];"production"!==process.env.NODE_ENV&&(t||console.error(["Material-UI: The value provided to the Tabs component is invalid.",`None of the Tabs' children match with \`${w}\`.`,D.keys?`You can provide one of the following values: ${Array.from(D.keys()).join(", ")}.`:null].join("\n"))),o=t?t.getBoundingClientRect():null}}return{tabsMeta:t,tabMeta:o}},Y=useEventCallback(()=>{const{tabsMeta:e,tabMeta:t}=X();let o=0;if(t&&e)if(P)o=t.top-e.top+e.scrollTop;else{const l=R?e.scrollLeftNormalized+e.clientWidth-e.scrollWidth:e.scrollLeft;o=t.left-e.left+l}const l={[N]:o,[M]:t?t[M]:0};if(isNaN(I[N])||isNaN(I[M]))_(l);else{const e=Math.abs(I[N]-l[N]),t=Math.abs(I[M]-l[M]);(e>=1||t>=1)&&_(l)}}),U=e=>{animate(B,H.current,e)},$=e=>{let t=H.current[B];P?t+=e:(t+=e*(R?-1:1),t*=R&&"reverse"===detectScrollType()?-1:1),U(t)},K=()=>{const e=H.current[L];let t=0;const o=Array.from(V.current.children);for(let l=0;l<o.length;l+=1){const r=o[l];if(t+r[L]>e)break;t+=r[L]}return t},q=()=>{$(-1*K())},G=()=>{$(K())},J=React.useCallback(e=>{A({overflow:null,scrollbarWidth:e})},[]),Q=useEventCallback(()=>{const{tabsMeta:e,tabMeta:t}=X();if(t&&e)if(t[N]<e[N]){const o=e[B]+(t[N]-e[N]);U(o)}else if(t[W]>e[W]){const o=e[B]+(t[W]-e[W]);U(o)}}),Z=useEventCallback(()=>{if(E&&!1!==m){const{scrollTop:e,scrollHeight:t,clientHeight:o,scrollWidth:l,clientWidth:r}=H.current;let n,a;if(P)n=e>1,a=e<t-o-1;else{const e=getNormalizedScrollLeft(H.current,C.direction);n=R?e<l-r-1:e>1,a=R?e>1:e<l-r-1}n===F.start&&a===F.end||j({start:n,end:a})}});React.useEffect(()=>{const e=debounce(()=>{Y(),Z()}),t=ownerWindow(H.current);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}},[Y,Z]);const ee=React.useMemo(()=>debounce(()=>{Z()}),[Z]);React.useEffect(()=>()=>{ee.clear()},[ee]),React.useEffect(()=>{z(!0)},[]),React.useEffect(()=>{Y(),Z()}),React.useEffect(()=>{Q()},[Q,I]),React.useImperativeHandle(r,()=>({updateIndicator:Y,updateScrollButtons:Z}),[Y,Z]);const te=React.createElement(TabIndicator,_extends({className:s.indicator,orientation:b,color:p},y,{style:_extends({},I,y.style)}));let oe=0;const le=React.Children.map(a,e=>{if(!React.isValidElement(e))return null;"production"!==process.env.NODE_ENV&&isFragment(e)&&console.error(["Material-UI: The Tabs component doesn't accept a Fragment as a child.","Consider providing an array instead."].join("\n"));const t=void 0===e.props.value?oe:e.props.value;D.set(t,oe);const o=t===w;return oe+=1,React.cloneElement(e,_extends({fullWidth:"fullWidth"===S,indicator:o&&!k&&te,selected:o,selectionFollowsFocus:h,onChange:u,textColor:T,value:t},1!==oe||!1!==w||e.props.tabIndex?{}:{tabIndex:0}))}),re=(()=>{const e={};e.scrollbarSizeListener=E?React.createElement(ScrollbarSize,{onChange:J,className:clsx(s.scrollableX,s.hideScrollbar)}):null;const t=F.start||F.end,o=E&&("auto"===m&&t||!0===m);return e.scrollButtonStart=o?React.createElement(f,_extends({orientation:b,direction:R?"right":"left",onClick:q,disabled:!F.start,className:clsx(s.scrollButtons,!d&&s.scrollButtonsHideMobile)},v)):null,e.scrollButtonEnd=o?React.createElement(f,_extends({orientation:b,direction:R?"left":"right",onClick:G,disabled:!F.end,className:clsx(s.scrollButtons,!d&&s.scrollButtonsHideMobile)},v)):null,e})();return React.createElement(c,_extends({className:clsx(s.root,i,P&&s.vertical),ref:t},x),re.scrollButtonStart,re.scrollbarSizeListener,React.createElement("div",{className:clsx(s.scroller,E?[P?s.scrollableY:s.scrollableX,!g&&s.hideScrollbar]:s.fixed),style:{overflow:O.overflow,[P?`margin${R?"Left":"Right"}`:"marginBottom"]:g?void 0:-O.scrollbarWidth},ref:H,onScroll:ee},React.createElement("div",{"aria-label":o,"aria-labelledby":l,"aria-orientation":"vertical"===b?"vertical":null,className:clsx(s.flexContainer,P&&s.flexContainerVertical,n&&!E&&s.centered),onKeyDown:e=>{const{target:t}=e;if("tab"!==t.getAttribute("role"))return;let o=null,l="vertical"!==b?"ArrowLeft":"ArrowUp",r="vertical"!==b?"ArrowRight":"ArrowDown";switch("vertical"!==b&&"rtl"===C.direction&&(l="ArrowRight",r="ArrowLeft"),e.key){case l:o=t.previousElementSibling||V.current.lastChild;break;case r:o=t.nextElementSibling||V.current.firstChild;break;case"Home":o=V.current.firstChild;break;case"End":o=V.current.lastChild}null!==o&&(o.focus(),e.preventDefault())},ref:V,role:"tablist"},le),k&&te),re.scrollButtonEnd)});"production"!==process.env.NODE_ENV&&(Tabs.propTypes={action:refType,allowScrollButtonsMobile:PropTypes.bool,"aria-label":PropTypes.string,"aria-labelledby":PropTypes.string,centered:PropTypes.bool,children:PropTypes.node,classes:PropTypes.object,className:PropTypes.string,component:PropTypes.elementType,indicatorColor:PropTypes.oneOf(["primary","secondary"]),onChange:PropTypes.func,orientation:PropTypes.oneOf(["horizontal","vertical"]),ScrollButtonComponent:PropTypes.elementType,scrollButtons:PropTypes.oneOf(["auto",!1,!0]),selectionFollowsFocus:PropTypes.bool,TabIndicatorProps:PropTypes.object,TabScrollButtonProps:PropTypes.object,textColor:PropTypes.oneOf(["inherit","primary","secondary"]),value:PropTypes.any,variant:PropTypes.oneOf(["fullWidth","scrollable","standard"]),visibleScrollbar:PropTypes.bool});export default withStyles(styles,{name:"MuiTabs"})(Tabs);