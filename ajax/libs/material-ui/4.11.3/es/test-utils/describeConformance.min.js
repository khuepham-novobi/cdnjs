import{expect}from"chai";import*as React from"react";import findOutermostIntrinsic from"./findOutermostIntrinsic";import ReactTestRenderer from"react-test-renderer";import testRef from"./testRef";function findRootComponent(e,{component:t}){const o=findOutermostIntrinsic(e).getElement();return e.find(t).filterWhere(e=>e.contains(o))}function randomStringValue(){return Math.random().toString(36).slice(2)}function testClassName(e,t){it("applies the className to the root component",()=>{const{mount:o}=t(),n=randomStringValue(),s=o(React.cloneElement(e,{className:n}));expect(findOutermostIntrinsic(s).hasClass(n)).to.equal(!0,"does have a custom `className`")})}function testComponentProp(e,t){describe("prop: component",()=>{it("can render another root component with the `component` prop",()=>{const{classes:o,mount:n,testComponentPropWith:s="em"}=t(),r=n(React.cloneElement(e,{component:s}));expect(findRootComponent(r,{classes:o,component:s}).exists()).to.equal(!0)})})}function testPropsSpread(e,t){it("spreads props to the root component",()=>{const{classes:o,inheritComponent:n,mount:s}=t(),r=randomStringValue(),c=findRootComponent(s(React.cloneElement(e,{"data-test-props-spread":r})),{classes:o,component:n});expect(c.props()["data-test-props-spread"]).to.equal(r)})}function describeRef(e,t){describe("ref",()=>{it("attaches the ref",()=>{const{inheritComponent:o,mount:n,refInstanceof:s}=t();testRef(e,n,(e,t)=>{if(expect(e).to.be.instanceof(s),o&&1===e.nodeType){const o=findOutermostIntrinsic(t);expect(e).to.equal(o.instance())}})})})}function testRootClass(e,t){it("applies the root class to the root component if it has this class",()=>{const{classes:o,mount:n}=t();if(null==o.root)return;const s=randomStringValue(),r=n(React.cloneElement(e,{className:s}));expect(findOutermostIntrinsic(r).hasClass(o.root)).to.equal(!0),expect(findOutermostIntrinsic(r).hasClass(s)).to.equal(!0)})}function testReactTestRenderer(e){it("should render without errors in ReactTestRenderer",()=>{ReactTestRenderer.act(()=>{ReactTestRenderer.create(e,{createNodeMock:e=>document.createElement(e.type)})})})}const fullSuite={componentProp:testComponentProp,mergeClassName:testClassName,propsSpread:testPropsSpread,refForwarding:describeRef,rootClass:testRootClass,reactTestRenderer:testReactTestRenderer};export default function describeConformance(e,t){const{after:o=(()=>{}),only:n=Object.keys(fullSuite),skip:s=[]}=t();describe("Material-UI component API",()=>{after(o),Object.keys(fullSuite).filter(e=>-1!==n.indexOf(e)&&-1===s.indexOf(e)).forEach(o=>{(0,fullSuite[o])(e,t)})})};