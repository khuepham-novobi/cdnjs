import{Component,ChangeDetectionStrategy,ViewEncapsulation,Input,ViewChild,ContentChildren,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{RippleModule}from"primeng/ripple";import{PrimeTemplate,SharedModule}from"primeng/api";import{RouterModule}from"@angular/router";import{DomHandler}from"primeng/dom";class TabMenu{ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":default:this.itemTemplate=e.template}})}ngAfterViewInit(){this.updateInkBar()}ngAfterViewChecked(){this.tabChanged&&(this.updateInkBar(),this.tabChanged=!1)}itemClick(e,t){t.disabled?e.preventDefault():(t.command&&t.command({originalEvent:e,item:t}),this.activeItem=t,this.tabChanged=!0)}updateInkBar(){let e=DomHandler.findSingle(this.navbar.nativeElement,"li.p-highlight");e&&(this.inkbar.nativeElement.style.width=DomHandler.getWidth(e)+"px",this.inkbar.nativeElement.style.left=DomHandler.getOffset(e).left-DomHandler.getOffset(this.navbar.nativeElement).left+"px")}}TabMenu.decorators=[{type:Component,args:[{selector:"p-tabMenu",template:'\n        <div [ngClass]="\'p-tabmenu p-component\'" [ngStyle]="style" [class]="styleClass">\n            <ul #navbar class="p-tabmenu-nav p-reset" role="tablist">\n                <li *ngFor="let item of model; let i = index" role="tab" [attr.aria-selected]="activeItem==item" [attr.aria-expanded]="activeItem==item"\n                    [ngClass]="{\'p-tabmenuitem\':true,\'p-disabled\':item.disabled,\'p-highlight\':activeItem==item,\'p-hidden\': item.visible === false}">\n                    <a *ngIf="!item.routerLink" [attr.href]="item.url" class="p-menuitem-link" role="presentation" (click)="itemClick($event,item)" [attr.tabindex]="item.disabled ? null : \'0\'"\n                        [attr.target]="item.target" [attr.title]="item.title" [attr.id]="item.id" pRipple>\n                        <ng-container *ngIf="!itemTemplate">\n                            <span class="p-menuitem-icon" [ngClass]="item.icon" *ngIf="item.icon"></span>\n                            <span class="p-menuitem-text" *ngIf="item.escape !== false; else htmlLabel">{{item.label}}</span>\n                            <ng-template #htmlLabel><span class="p-menuitem-text" [innerHTML]="item.label"></span></ng-template>\n                        </ng-container>\n                        <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>\n                    </a>\n                    <a *ngIf="item.routerLink" [routerLink]="item.routerLink" [queryParams]="item.queryParams" [routerLinkActive]="\'p-menuitem-link-active\'" [routerLinkActiveOptions]="item.routerLinkActiveOptions||{exact:false}"\n                        role="presentation" class="p-menuitem-link" (click)="itemClick($event,item)" [attr.tabindex]="item.disabled ? null : \'0\'"\n                        [attr.target]="item.target" [attr.title]="item.title" [attr.id]="item.id"\n                        [fragment]="item.fragment" [queryParamsHandling]="item.queryParamsHandling" [preserveFragment]="item.preserveFragment" [skipLocationChange]="item.skipLocationChange" [replaceUrl]="item.replaceUrl" [state]="item.state" pRipple>\n                        <ng-container *ngIf="!itemTemplate">\n                            <span class="p-menuitem-icon" [ngClass]="item.icon" *ngIf="item.icon"></span>\n                            <span class="p-menuitem-text" *ngIf="item.escape !== false; else htmlRouteLabel">{{item.label}}</span>\n                            <ng-template #htmlRouteLabel><span class="p-menuitem-text" [innerHTML]="item.label"></span></ng-template>\n                        </ng-container>\n                        <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>\n                    </a>\n                </li>\n                <li #inkbar class="p-tabmenu-ink-bar"></li>\n            </ul>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-tabmenu-nav{display:flex;flex-wrap:wrap;list-style-type:none;margin:0;padding:0}.p-tabmenu-nav a{-ms-user-select:none;-webkit-user-select:none;align-items:center;cursor:pointer;display:flex;overflow:hidden;position:relative;text-decoration:none;user-select:none}.p-tabmenu-nav a:focus{z-index:1}.p-tabmenu-nav .p-menuitem-text{line-height:1}.p-tabmenu-ink-bar{display:none;z-index:1}"]}]}],TabMenu.propDecorators={model:[{type:Input}],activeItem:[{type:Input}],popup:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],navbar:[{type:ViewChild,args:["navbar"]}],inkbar:[{type:ViewChild,args:["inkbar"]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}]};class TabMenuModule{}TabMenuModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RouterModule,SharedModule,RippleModule],exports:[TabMenu,RouterModule,SharedModule],declarations:[TabMenu]}]}];export{TabMenu,TabMenuModule};