import{forwardRef,EventEmitter,Component,ViewEncapsulation,ChangeDetectionStrategy,ElementRef,Input,Output,ChangeDetectorRef,ViewChild,ContentChildren,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{PrimeTemplate,SharedModule}from"primeng/api";import{ObjectUtils}from"primeng/utils";import{DomHandler,ConnectedOverlayScrollHandler}from"primeng/dom";import{trigger,transition,style,animate}from"@angular/animations";import{NG_VALUE_ACCESSOR}from"@angular/forms";import{RippleModule}from"primeng/ripple";const CASCADESELECT_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>CascadeSelect),multi:!0};class CascadeSelectSub{constructor(e){this.el=e,this.level=0,this.onSelect=new EventEmitter,this.onGroupSelect=new EventEmitter,this.activeOption=null}get parentActive(){return this._parentActive}set parentActive(e){e||(this.activeOption=null),this._parentActive=e}ngOnInit(){if(this.selectionPath&&this.options&&!this.dirty)for(let e of this.options)if(this.selectionPath.includes(e)){this.activeOption=e;break}this.root||this.position()}onOptionClick(e,t){this.isOptionGroup(t)?(this.activeOption=this.activeOption===t?null:t,this.onGroupSelect.emit({originalEvent:e,value:t})):this.onSelect.emit({originalEvent:e,value:this.getOptionValue(t)})}onOptionSelect(e){this.onSelect.emit(e)}onOptionGroupSelect(e){this.onGroupSelect.emit(e)}getOptionLabel(e){return this.optionLabel?ObjectUtils.resolveFieldData(e,this.optionLabel):e}getOptionValue(e){return this.optionValue?ObjectUtils.resolveFieldData(e,this.optionValue):e}getOptionGroupLabel(e){return this.optionGroupLabel?ObjectUtils.resolveFieldData(e,this.optionGroupLabel):null}getOptionGroupChildren(e){return ObjectUtils.resolveFieldData(e,this.optionGroupChildren[this.level])}isOptionGroup(e){return Object.prototype.hasOwnProperty.call(e,this.optionGroupChildren[this.level])}getOptionLabelToRender(e){return this.isOptionGroup(e)?this.getOptionGroupLabel(e):this.getOptionLabel(e)}getItemClass(e){return{"p-cascadeselect-item":!0,"p-cascadeselect-item-group":this.isOptionGroup(e),"p-cascadeselect-item-active p-highlight":this.isOptionActive(e)}}isOptionActive(e){return this.activeOption===e}onKeyDown(e,t,i){let n=e.currentTarget.parentElement;switch(e.key){case"Down":case"ArrowDown":var o=this.el.nativeElement.children[0].children[i+1];o&&o.children[0].focus();break;case"Up":case"ArrowUp":var l=this.el.nativeElement.children[0].children[i-1];l&&l.children[0].focus();break;case"Right":case"ArrowRight":this.isOptionGroup(t)&&(this.isOptionActive(t)?n.children[1].children[0].children[0].children[0].focus():this.activeOption=t);break;case"Left":case"ArrowLeft":this.activeOption=null;var s=n.parentElement.parentElement.parentElement;s&&s.children[0].focus();break;case"Enter":this.onOptionClick(e,t)}e.preventDefault()}position(){const e=this.el.nativeElement.parentElement,t=DomHandler.getOffset(e),i=DomHandler.getViewport(),n=this.el.nativeElement.children[0].offsetParent?this.el.nativeElement.children[0].offsetWidth:DomHandler.getHiddenElementOuterWidth(this.el.nativeElement.children[0]),o=DomHandler.getOuterWidth(e.children[0]);parseInt(t.left,10)+o+n>i.width-DomHandler.calculateScrollbarWidth()&&(this.el.nativeElement.children[0].style.left="-200%")}}CascadeSelectSub.decorators=[{type:Component,args:[{selector:"p-cascadeSelectSub",template:'\n        <ul class="p-cascadeselect-panel p-cascadeselect-items" [ngClass]="{\'p-cascadeselect-panel-root\': root}" role="listbox" aria-orientation="horizontal">\n            <ng-template ngFor let-option [ngForOf]="options" let-i="index">\n                <li [ngClass]="getItemClass(option)" role="none">\n                    <div class="p-cascadeselect-item-content" (click)="onOptionClick($event, option)" tabindex="0" (keydown)="onKeyDown($event, option, i)" pRipple>\n                        <ng-container *ngIf="optionTemplate;else defaultOptionTemplate">\n                            <ng-container *ngTemplateOutlet="optionTemplate; context: {$implicit: option}"></ng-container>\n                        </ng-container>\n                        <ng-template #defaultOptionTemplate>\n                            <span class="p-cascadeselect-item-text">{{getOptionLabelToRender(option)}}</span>\n                        </ng-template>\n                        <span class="p-cascadeselect-group-icon pi pi-angle-right" *ngIf="isOptionGroup(option)"></span>\n                    </div>\n                    <p-cascadeSelectSub *ngIf="isOptionGroup(option) && isOptionActive(option)" class="p-cascadeselect-sublist" [selectionPath]="selectionPath" [options]="getOptionGroupChildren(option)"\n                        [optionLabel]="optionLabel" [optionValue]="optionValue" [level]="level + 1" (onSelect)="onOptionSelect($event)" (onOptionGroupSelect)="onOptionGroupSelect()"\n                        [optionGroupLabel]="optionGroupLabel" [optionGroupChildren]="optionGroupChildren" [parentActive]="isOptionActive(option)" [dirty]="dirty" [optionTemplate]="optionTemplate">\n                    </p-cascadeSelectSub>\n                </li>\n            </ng-template>\n        </ul>\n    ',encapsulation:ViewEncapsulation.None,changeDetection:ChangeDetectionStrategy.OnPush}]}],CascadeSelectSub.ctorParameters=(()=>[{type:ElementRef}]),CascadeSelectSub.propDecorators={selectionPath:[{type:Input}],options:[{type:Input}],optionGroupChildren:[{type:Input}],optionTemplate:[{type:Input}],level:[{type:Input}],optionLabel:[{type:Input}],optionValue:[{type:Input}],optionGroupLabel:[{type:Input}],dirty:[{type:Input}],root:[{type:Input}],onSelect:[{type:Output}],onGroupSelect:[{type:Output}],parentActive:[{type:Input}]};class CascadeSelect{constructor(e,t){this.el=e,this.cd=t,this.showTransitionOptions=".12s cubic-bezier(0, 0, 0.2, 1)",this.hideTransitionOptions=".1s linear",this.onChange=new EventEmitter,this.onGroupChange=new EventEmitter,this.onShow=new EventEmitter,this.onHide=new EventEmitter,this.onBeforeShow=new EventEmitter,this.onBeforeHide=new EventEmitter,this.selectionPath=null,this.focused=!1,this.filled=!1,this.overlayVisible=!1,this.dirty=!1,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}ngOnInit(){this.updateSelectionPath()}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"value":this.valueTemplate=e.template;break;case"option":this.optionTemplate=e.template}})}onOptionSelect(e){this.value=e.value,this.updateSelectionPath(),this.onModelChange(this.value),this.onChange.emit(e),this.hide(),this.focusInputEl.nativeElement.focus()}onOptionGroupSelect(e){this.dirty=!0,this.onGroupChange.emit(e)}getOptionLabel(e){return this.optionLabel?ObjectUtils.resolveFieldData(e,this.optionLabel):e}getOptionValue(e){return this.optionValue?ObjectUtils.resolveFieldData(e,this.optionValue):e}getOptionGroupChildren(e,t){return ObjectUtils.resolveFieldData(e,this.optionGroupChildren[t])}isOptionGroup(e,t){return Object.prototype.hasOwnProperty.call(e,this.optionGroupChildren[t])}updateSelectionPath(){let e;if(null!=this.value&&this.options)for(let t of this.options)if(e=this.findModelOptionInGroup(t,0))break;this.selectionPath=e,this.updateFilledState()}updateFilledState(){this.filled=!(null==this.selectionPath||0==this.selectionPath.length)}findModelOptionInGroup(e,t){if(this.isOptionGroup(e,t)){let i;for(let n of this.getOptionGroupChildren(e,t))if(i=this.findModelOptionInGroup(n,t+1))return i.unshift(e),i}else if(ObjectUtils.equals(this.value,this.getOptionValue(e),this.dataKey))return[e];return null}show(){this.onBeforeShow.emit(),this.overlayVisible=!0}hide(){this.onBeforeHide.emit(),this.overlayVisible=!1,this.cd.markForCheck()}onClick(e){this.disabled||this.overlayEl&&this.overlayEl&&this.overlayEl.contains(e.target)||(this.overlayVisible?this.hide():this.show(),this.focusInputEl.nativeElement.focus())}onFocus(){this.focused=!0}onBlur(){this.focused=!1}onOverlayAnimationStart(e){switch(e.toState){case"visible":this.overlayEl=e.element,this.onOverlayEnter()}}onOverlayAnimationDone(e){switch(e.toState){case"void":this.onOverlayLeave()}}onOverlayEnter(){this.overlayEl.style.zIndex=String(DomHandler.generateZIndex()),this.appendContainer(),this.alignOverlay(),this.bindOutsideClickListener(),this.bindScrollListener(),this.bindResizeListener(),this.onShow.emit()}onOverlayLeave(){this.unbindOutsideClickListener(),this.unbindScrollListener(),this.unbindResizeListener(),this.onHide.emit(),this.overlayEl=null,this.dirty=!1}writeValue(e){this.value=e,this.updateSelectionPath(),this.cd.markForCheck()}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e,this.cd.markForCheck()}alignOverlay(){this.appendTo?(DomHandler.absolutePosition(this.overlayEl,this.containerEl.nativeElement),this.overlayEl.style.minWidth=DomHandler.getOuterWidth(this.containerEl.nativeElement)+"px"):DomHandler.relativePosition(this.overlayEl,this.containerEl.nativeElement)}bindOutsideClickListener(){this.outsideClickListener||(this.outsideClickListener=(e=>{this.overlayVisible&&this.overlayEl&&!this.containerEl.nativeElement.contains(e.target)&&!this.overlayEl.contains(e.target)&&this.hide()}),document.addEventListener("click",this.outsideClickListener))}unbindOutsideClickListener(){this.outsideClickListener&&(document.removeEventListener("click",this.outsideClickListener),this.outsideClickListener=null)}bindScrollListener(){this.scrollHandler||(this.scrollHandler=new ConnectedOverlayScrollHandler(this.containerEl.nativeElement,()=>{this.overlayVisible&&this.hide()})),this.scrollHandler.bindScrollListener()}unbindScrollListener(){this.scrollHandler&&this.scrollHandler.unbindScrollListener()}bindResizeListener(){this.resizeListener||(this.resizeListener=(()=>{this.overlayVisible&&this.hide()}),window.addEventListener("resize",this.resizeListener))}unbindResizeListener(){this.resizeListener&&(window.removeEventListener("resize",this.resizeListener),this.resizeListener=null)}appendContainer(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.overlayEl):document.getElementById(this.appendTo).appendChild(this.overlayEl))}restoreAppend(){this.overlayEl&&this.appendTo&&("body"===this.appendTo?document.body.removeChild(this.overlayEl):document.getElementById(this.appendTo).removeChild(this.overlayEl))}label(){return this.selectionPath?this.getOptionLabel(this.selectionPath[this.selectionPath.length-1]):this.placeholder||"p-emptylabel"}onKeyDown(e){switch(e.key){case"Down":case"ArrowDown":this.overlayVisible?DomHandler.findSingle(this.overlayEl,".p-cascadeselect-item").children[0].focus():e.altKey&&this.options&&this.options.length&&this.show(),e.preventDefault();break;case"Escape":this.overlayVisible&&(this.hide(),e.preventDefault());break;case"Tab":this.hide()}}containerClass(){return{"p-cascadeselect p-component p-inputwrapper":!0,"p-disabled":this.disabled,"p-focus":this.focused}}labelClass(){return{"p-cascadeselect-label":!0,"p-placeholder":this.label()===this.placeholder,"p-cascadeselect-label-empty":!this.value&&("p-emptylabel"===this.label()||0===this.label().length)}}ngOnDestroy(){this.restoreAppend(),this.unbindOutsideClickListener(),this.unbindResizeListener(),this.scrollHandler&&(this.scrollHandler.destroy(),this.scrollHandler=null),this.overlayEl=null}}CascadeSelect.decorators=[{type:Component,args:[{selector:"p-cascadeSelect",template:'\n        <div #container [ngClass]="containerClass()" [class]="styleClass" [ngStyle]="style" (click)="onClick($event)">\n            <div class="p-hidden-accessible">\n                <input #focusInput type="text" [attr.id]="inputId" readonly [disabled]="disabled" (focus)="onFocus()" (blur)="onBlur()"  (keydown)="onKeyDown($event)" [attr.tabindex]="tabindex"\n                    aria-haspopup="listbox" [attr.aria-expanded]="overlayVisible" [attr.aria-labelledby]="ariaLabelledBy">\n            </div>\n            <span [ngClass]="labelClass()">\n                <ng-container *ngIf="valueTemplate;else defaultValueTemplate">\n                        <ng-container *ngTemplateOutlet="valueTemplate; context: {$implicit: value, placeholder: placeholder}"></ng-container>\n                </ng-container>\n                <ng-template #defaultValueTemplate>\n                    {{label()}}\n                </ng-template>\n            </span>\n            <div class="p-cascadeselect-trigger" role="button" aria-haspopup="listbox" [attr.aria-expanded]="overlayVisible">\n                <span class="p-cascadeselect-trigger-icon pi pi-chevron-down"></span>\n            </div>\n            <div class="p-cascadeselect-panel p-component" *ngIf="overlayVisible" \n                [@overlayAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" (@overlayAnimation.start)="onOverlayAnimationStart($event)" (@overlayAnimation.done)="onOverlayAnimationDone($event)">\n                <div class="p-cascadeselect-items-wrapper">\n                    <p-cascadeSelectSub [options]="options" [selectionPath]="selectionPath" class="p-cascadeselect-items" \n                        [optionLabel]="optionLabel" [optionValue]="optionValue" [level]="0" [optionTemplate]="optionTemplate"\n                        [optionGroupLabel]="optionGroupLabel" [optionGroupChildren]="optionGroupChildren" \n                        (onSelect)="onOptionSelect($event)" (onGroupSelect)="onOptionGroupSelect()" [dirty]="dirty" [root]="true">\n                    </p-cascadeSelectSub>\n                </div>\n            </div>\n        </div>\n    ',animations:[trigger("overlayAnimation",[transition(":enter",[style({opacity:0,transform:"scaleY(0.8)"}),animate("{{showTransitionParams}}")]),transition(":leave",[animate("{{hideTransitionParams}}",style({opacity:0}))])])],host:{"[class.p-inputwrapper-filled]":"filled","[class.p-inputwrapper-focus]":"focused || overlayVisible"},providers:[CASCADESELECT_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-cascadeselect{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;display:inline-flex;position:relative;user-select:none}.p-cascadeselect-trigger{align-items:center;display:flex;flex-shrink:0;justify-content:center}.p-cascadeselect-label{cursor:pointer;display:block;flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:1%}.p-cascadeselect-label-empty{overflow:hidden;visibility:hidden}.p-cascadeselect-panel-root,.p-cascadeselect>.p-cascadeselect-panel{min-width:100%}.p-cascadeselect-panel{position:absolute}.p-cascadeselect-item{cursor:pointer;font-weight:400;white-space:nowrap}.p-cascadeselect-item-content{align-items:center;display:flex;overflow:hidden;position:relative}.p-cascadeselect-group-icon{margin-left:auto}.p-cascadeselect-items{list-style-type:none;margin:0;padding:0}.p-fluid .p-cascadeselect{display:flex}.p-fluid .p-cascadeselect .p-cascadeselect-label{width:1%}.p-cascadeselect-sublist{display:none;min-width:100%;position:absolute;z-index:1}.p-cascadeselect-item-active{overflow:visible!important}.p-cascadeselect-item-active>.p-cascadeselect-sublist{display:block;left:100%;top:0}"]}]}],CascadeSelect.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),CascadeSelect.propDecorators={styleClass:[{type:Input}],style:[{type:Input}],options:[{type:Input}],optionLabel:[{type:Input}],optionValue:[{type:Input}],optionGroupLabel:[{type:Input}],optionGroupChildren:[{type:Input}],placeholder:[{type:Input}],value:[{type:Input}],dataKey:[{type:Input}],inputId:[{type:Input}],tabindex:[{type:Input}],ariaLabelledBy:[{type:Input}],appendTo:[{type:Input}],disabled:[{type:Input}],rounded:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}],focusInputEl:[{type:ViewChild,args:["focusInput"]}],containerEl:[{type:ViewChild,args:["container"]}],onChange:[{type:Output}],onGroupChange:[{type:Output}],onShow:[{type:Output}],onHide:[{type:Output}],onBeforeShow:[{type:Output}],onBeforeHide:[{type:Output}],templates:[{type:ContentChildren,args:[PrimeTemplate]}]};class CascadeSelectModule{}CascadeSelectModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,SharedModule,RippleModule],exports:[CascadeSelect,CascadeSelectSub,SharedModule],declarations:[CascadeSelect,CascadeSelectSub]}]}];export{CASCADESELECT_VALUE_ACCESSOR,CascadeSelect,CascadeSelectModule,CascadeSelectSub};