import{Directive,ViewContainerRef,Component,ChangeDetectionStrategy,ViewEncapsulation,ComponentFactoryResolver,ChangeDetectorRef,Renderer2,NgZone,ViewChild,NgModule,Injectable,ApplicationRef,Injector}from"@angular/core";import{animation,style,animate,trigger,transition,useAnimation}from"@angular/animations";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{Subject}from"rxjs";class DynamicDialogContent{constructor(e){this.viewContainerRef=e}}DynamicDialogContent.decorators=[{type:Directive,args:[{selector:"[pDynamicDialogContent]"}]}],DynamicDialogContent.ctorParameters=(()=>[{type:ViewContainerRef}]);class DynamicDialogConfig{}class DynamicDialogRef{constructor(){this._onClose=new Subject,this.onClose=this._onClose.asObservable(),this._onDestroy=new Subject,this.onDestroy=this._onDestroy.asObservable()}close(e){this._onClose.next(e)}destroy(){this._onDestroy.next()}}const showAnimation=animation([style({transform:"{{transform}}",opacity:0}),animate("{{transition}}",style({transform:"none",opacity:1}))]),hideAnimation=animation([animate("{{transition}}",style({transform:"{{transform}}",opacity:0}))]);class DynamicDialogComponent{constructor(e,t,n,o,i,a){this.componentFactoryResolver=e,this.cd=t,this.renderer=n,this.config=o,this.dialogRef=i,this.zone=a,this.visible=!0,this.transformOptions="scale(0.7)"}ngAfterViewInit(){this.loadChildComponent(this.childComponentType),this.cd.detectChanges()}loadChildComponent(e){let t=this.componentFactoryResolver.resolveComponentFactory(e),n=this.insertionPoint.viewContainerRef;n.clear(),this.componentRef=n.createComponent(t)}moveOnTop(){if(!1!==this.config.autoZIndex){const e=(this.config.baseZIndex||0)+ ++DomHandler.zindex;this.container.style.zIndex=String(e),this.maskViewChild.nativeElement.style.zIndex=String(e-1)}}onAnimationStart(e){switch(e.toState){case"visible":this.container=e.element,this.wrapper=this.container.parentElement,this.moveOnTop(),this.bindGlobalListeners(),!1!==this.config.modal&&this.enableModality(),this.focus();break;case"void":this.onContainerDestroy()}}onAnimationEnd(e){"void"===e.toState&&this.dialogRef.destroy()}onContainerDestroy(){this.unbindGlobalListeners(),!1!==this.config.modal&&this.disableModality(),this.container=null}close(){this.visible=!1,this.cd.markForCheck()}hide(){this.dialogRef&&this.dialogRef.close()}enableModality(){!1!==this.config.closable&&this.config.dismissableMask&&(this.maskClickListener=this.renderer.listen(this.wrapper,"mousedown",e=>{this.wrapper&&this.wrapper.isSameNode(e.target)&&this.hide()})),!1!==this.config.modal&&DomHandler.addClass(document.body,"p-overflow-hidden")}disableModality(){this.wrapper&&(this.config.dismissableMask&&this.unbindMaskClickListener(),!1!==this.config.modal&&DomHandler.removeClass(document.body,"p-overflow-hidden"),this.cd.destroyed||this.cd.detectChanges())}onKeydown(e){if(9===e.which){e.preventDefault();let t=DomHandler.getFocusableElements(this.container);if(t&&t.length>0)if(t[0].ownerDocument.activeElement){let n=t.indexOf(t[0].ownerDocument.activeElement);e.shiftKey?-1==n||0===n?t[t.length-1].focus():t[n-1].focus():-1==n||n===t.length-1?t[0].focus():t[n+1].focus()}else t[0].focus()}}focus(){let e=DomHandler.findSingle(this.container,"[autofocus]");e&&this.zone.runOutsideAngular(()=>{setTimeout(()=>e.focus(),5)})}bindGlobalListeners(){this.bindDocumentKeydownListener(),!1!==this.config.closeOnEscape&&!1!==this.config.closable&&this.bindDocumentEscapeListener()}unbindGlobalListeners(){this.unbindDocumentKeydownListener(),this.unbindDocumentEscapeListener()}bindDocumentKeydownListener(){this.zone.runOutsideAngular(()=>{this.documentKeydownListener=this.onKeydown.bind(this),window.document.addEventListener("keydown",this.documentKeydownListener)})}unbindDocumentKeydownListener(){this.documentKeydownListener&&(window.document.removeEventListener("keydown",this.documentKeydownListener),this.documentKeydownListener=null)}bindDocumentEscapeListener(){const e=this.maskViewChild?this.maskViewChild.nativeElement.ownerDocument:"document";this.documentEscapeListener=this.renderer.listen(e,"keydown",e=>{27==e.which&&parseInt(this.container.style.zIndex)==DomHandler.zindex+(this.config.baseZIndex?this.config.baseZIndex:0)&&this.hide()})}unbindDocumentEscapeListener(){this.documentEscapeListener&&(this.documentEscapeListener(),this.documentEscapeListener=null)}unbindMaskClickListener(){this.maskClickListener&&(this.maskClickListener(),this.maskClickListener=null)}ngOnDestroy(){this.onContainerDestroy(),this.componentRef&&this.componentRef.destroy()}}DynamicDialogComponent.decorators=[{type:Component,args:[{selector:"p-dynamicDialog",template:'\n        <div #mask [ngClass]="{\'p-dialog-mask\':true, \'p-component-overlay p-dialog-mask-scrollblocker\': config.modal !== false}">\n            <div [ngClass]="{\'p-dialog p-dynamic-dialog p-component\':true, \'p-dialog-rtl\': config.rtl}" [ngStyle]="config.style" [class]="config.styleClass"\n                [@animation]="{value: \'visible\', params: {transform: transformOptions, transition: config.transitionOptions || \'150ms cubic-bezier(0, 0, 0.2, 1)\'}}"\n                (@animation.start)="onAnimationStart($event)" (@animation.done)="onAnimationEnd($event)" role="dialog" *ngIf="visible"\n                [style.width]="config.width" [style.height]="config.height">\n                <div class="p-dialog-header" *ngIf="config.showHeader === false ? false: true">\n                    <span class="p-dialog-title">{{config.header}}</span>\n                    <div class="p-dialog-header-icons">\n                        <button [ngClass]="\'p-dialog-header-icon p-dialog-header-maximize p-link\'" type="button" (click)="hide()" (keydown.enter)="hide()" *ngIf="config.closable !== false">\n                            <span class="p-dialog-header-close-icon pi pi-times"></span>\n                        </button>\n                    </div>\n                </div>\n                <div class="p-dialog-content" [ngStyle]="config.contentStyle">\n                    <ng-template pDynamicDialogContent></ng-template>\n                </div>\n                <div class="p-dialog-footer" *ngIf="config.footer">\n                    {{config.footer}}\n                </div>\n            </div>\n        </div>\n\t',animations:[trigger("animation",[transition("void => visible",[useAnimation(showAnimation)]),transition("visible => void",[useAnimation(hideAnimation)])])],changeDetection:ChangeDetectionStrategy.Default,encapsulation:ViewEncapsulation.None,styles:[".p-dialog-mask{align-items:center;background-color:transparent;display:flex;height:100%;justify-content:center;left:0;pointer-events:none;position:fixed;top:0;transition-property:background-color;width:100%}.p-dialog,.p-dialog-mask.p-component-overlay{pointer-events:auto}.p-dialog{display:flex;flex-direction:column;max-height:90%;position:relative;transform:scale(1)}.p-dialog-content{overflow-y:auto}.p-dialog-header{align-items:center;display:flex;flex-shrink:0;justify-content:space-between}.p-dialog-footer{flex-shrink:0}.p-dialog .p-dialog-header-icons{align-items:center;display:flex}.p-dialog .p-dialog-header-icon{align-items:center;display:flex;justify-content:center;overflow:hidden;position:relative}.p-dialog-mask.p-dialog-mask-leave{background-color:transparent}.p-fluid .p-dialog-footer .p-button{width:auto}.p-dialog-bottom-left .p-dialog,.p-dialog-bottom-right .p-dialog,.p-dialog-bottom .p-dialog,.p-dialog-left .p-dialog,.p-dialog-right .p-dialog,.p-dialog-top-left .p-dialog,.p-dialog-top-right .p-dialog,.p-dialog-top .p-dialog{margin:.75rem;transform:translateZ(0)}.p-dialog-maximized{height:100%;max-height:100%;transform:none;transition:none;width:100vw!important}.p-dialog-maximized .p-dialog-content{flex-grow:1}.p-dialog-left{justify-content:flex-start}.p-dialog-right{justify-content:flex-end}.p-dialog-top,.p-dialog-top-left{align-items:flex-start}.p-dialog-top-left{justify-content:flex-start}.p-dialog-top-right{align-items:flex-start;justify-content:flex-end}.p-dialog-bottom{align-items:flex-end}.p-dialog-bottom-left{align-items:flex-end;justify-content:flex-start}.p-dialog-bottom-right{align-items:flex-end;justify-content:flex-end}.p-dialog .p-resizable-handle{bottom:1px;cursor:se-resize;display:block;font-size:.1px;height:12px;position:absolute;right:1px;width:12px}.p-confirm-dialog .p-dialog-content{align-items:center;display:flex}"]}]}],DynamicDialogComponent.ctorParameters=(()=>[{type:ComponentFactoryResolver},{type:ChangeDetectorRef},{type:Renderer2},{type:DynamicDialogConfig},{type:DynamicDialogRef},{type:NgZone}]),DynamicDialogComponent.propDecorators={insertionPoint:[{type:ViewChild,args:[DynamicDialogContent]}],maskViewChild:[{type:ViewChild,args:["mask"]}]};class DynamicDialogModule{}DynamicDialogModule.decorators=[{type:NgModule,args:[{imports:[CommonModule],declarations:[DynamicDialogComponent,DynamicDialogContent],entryComponents:[DynamicDialogComponent]}]}];class DynamicDialogInjector{constructor(e,t){this._parentInjector=e,this._additionalTokens=t}get(e,t,n){const o=this._additionalTokens.get(e);return o||this._parentInjector.get(e,t)}}class DialogService{constructor(e,t,n){this.componentFactoryResolver=e,this.appRef=t,this.injector=n,this.dialogComponentRefMap=new Map}open(e,t){const n=this.appendDialogComponentToBody(t);return this.dialogComponentRefMap.get(n).instance.childComponentType=e,n}appendDialogComponentToBody(e){const t=new WeakMap;t.set(DynamicDialogConfig,e);const n=new DynamicDialogRef;t.set(DynamicDialogRef,n);const o=n.onClose.subscribe(()=>{this.dialogComponentRefMap.get(n).instance.close()}),i=n.onDestroy.subscribe(()=>{this.removeDialogComponentFromBody(n),i.unsubscribe(),o.unsubscribe()}),a=this.componentFactoryResolver.resolveComponentFactory(DynamicDialogComponent).create(new DynamicDialogInjector(this.injector,t));this.appRef.attachView(a.hostView);const s=a.hostView.rootNodes[0];return document.body.appendChild(s),this.dialogComponentRefMap.set(n,a),n}removeDialogComponentFromBody(e){if(!e||!this.dialogComponentRefMap.has(e))return;const t=this.dialogComponentRefMap.get(e);this.appRef.detachView(t.hostView),t.destroy(),this.dialogComponentRefMap.delete(e)}}DialogService.decorators=[{type:Injectable}],DialogService.ctorParameters=(()=>[{type:ComponentFactoryResolver},{type:ApplicationRef},{type:Injector}]);export{DialogService,DynamicDialogComponent,DynamicDialogConfig,DynamicDialogInjector,DynamicDialogModule,DynamicDialogRef,DynamicDialogContent as ɵa};