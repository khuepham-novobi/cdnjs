import{forwardRef,EventEmitter,Component,ChangeDetectionStrategy,ViewEncapsulation,ElementRef,ChangeDetectorRef,Input,Output,ViewChild,ContentChildren,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{PrimeTemplate,SharedModule}from"primeng/api";import{InputTextModule}from"primeng/inputtext";import{NG_VALUE_ACCESSOR}from"@angular/forms";const CHIPS_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Chips),multi:!0};class Chips{constructor(e,t){this.el=e,this.cd=t,this.allowDuplicate=!0,this.onAdd=new EventEmitter,this.onRemove=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this.onChipClick=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":default:this.itemTemplate=e.template}})}onClick(){this.inputViewChild.nativeElement.focus()}onInput(){this.updateFilledState()}onPaste(e){if(this.separator){(e.clipboardData||window.clipboardData).getData("Text").split(this.separator).forEach(t=>{this.addItem(e,t,!0)}),this.inputViewChild.nativeElement.value=""}this.updateFilledState()}updateFilledState(){this.value&&0!==this.value.length?this.filled=!0:this.filled=this.inputViewChild.nativeElement&&""!=this.inputViewChild.nativeElement.value}onItemClick(e,t){this.onChipClick.emit({originalEvent:e,value:t})}writeValue(e){this.value=e,this.updateMaxedOut(),this.cd.markForCheck()}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e,this.cd.markForCheck()}resolveFieldData(e,t){if(e&&t){if(-1==t.indexOf("."))return e[t];{let l=t.split("."),a=e;for(var i=0,n=l.length;i<n;++i)a=a[l[i]];return a}}return null}onInputFocus(e){this.focus=!0,this.onFocus.emit(e)}onInputBlur(e){this.focus=!1,this.addOnBlur&&this.inputViewChild.nativeElement.value&&this.addItem(e,this.inputViewChild.nativeElement.value,!1),this.onModelTouched(),this.onBlur.emit(e)}removeItem(e,t){if(this.disabled)return;let i=this.value[t];this.value=this.value.filter((e,i)=>i!=t),this.onModelChange(this.value),this.onRemove.emit({originalEvent:e,value:i}),this.updateFilledState(),this.updateMaxedOut()}addItem(e,t,i){this.value=this.value||[],t&&t.trim().length&&(this.allowDuplicate||-1===this.value.indexOf(t))&&(this.value=[...this.value,t],this.onModelChange(this.value),this.onAdd.emit({originalEvent:e,value:t})),this.updateFilledState(),this.updateMaxedOut(),this.inputViewChild.nativeElement.value="",i&&e.preventDefault()}onKeydown(e){switch(e.which){case 8:if(0===this.inputViewChild.nativeElement.value.length&&this.value&&this.value.length>0){this.value=[...this.value];let t=this.value.pop();this.onModelChange(this.value),this.onRemove.emit({originalEvent:e,value:t}),this.updateFilledState()}break;case 13:this.addItem(e,this.inputViewChild.nativeElement.value,!0);break;case 9:this.addOnTab&&""!==this.inputViewChild.nativeElement.value&&this.addItem(e,this.inputViewChild.nativeElement.value,!0);break;default:this.max&&this.value&&this.max===this.value.length?e.preventDefault():this.separator&&","===this.separator&&188===e.which&&this.addItem(e,this.inputViewChild.nativeElement.value,!0)}}updateMaxedOut(){this.inputViewChild&&this.inputViewChild.nativeElement&&(this.max&&this.value&&this.max===this.value.length?this.inputViewChild.nativeElement.disabled=!0:this.inputViewChild.nativeElement.disabled=this.disabled||!1)}}Chips.decorators=[{type:Component,args:[{selector:"p-chips",template:'\n        <div [ngClass]="\'p-chips p-component\'" [ngStyle]="style" [class]="styleClass" (click)="onClick()">\n            <ul [ngClass]="{\'p-inputtext p-chips-multiple-container\':true,\'p-focus\':focus,\'p-disabled\':disabled}">\n                <li #token *ngFor="let item of value; let i = index;" class="p-chips-token" (click)="onItemClick($event, item)">\n                    <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item}"></ng-container>\n                    <span *ngIf="!itemTemplate" class="p-chips-token-label">{{field ? resolveFieldData(item,field) : item}}</span>\n                    <span *ngIf="!disabled" class="p-chips-token-icon pi pi-times-circle" (click)="removeItem($event,i)"></span>\n                </li>\n                <li class="p-chips-input-token">\n                    <input #inputtext type="text" [attr.id]="inputId" [attr.placeholder]="(value && value.length ? null : placeholder)" [attr.tabindex]="tabindex" (keydown)="onKeydown($event)"\n                    (input)="onInput()" (paste)="onPaste($event)" [attr.aria-labelledby]="ariaLabelledBy" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)" [disabled]="disabled" [ngStyle]="inputStyle" [class]="inputStyleClass">\n                </li>\n            </ul>\n        </div>\n    ',host:{"[class.p-inputwrapper-filled]":"filled","[class.p-inputwrapper-focus]":"focus"},providers:[CHIPS_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-chips{display:inline-flex}.p-chips-multiple-container{align-items:center;cursor:text;display:flex;flex-wrap:wrap;list-style-type:none;margin:0;overflow:hidden;padding:0}.p-chips-token{align-items:center;cursor:default;display:inline-flex;flex:0 0 auto}.p-chips-input-token{display:inline-flex;flex:1 1 auto}.p-chips-token-icon{cursor:pointer}.p-chips-input-token input{background-color:transparent;border:0;border-radius:0;box-shadow:none;margin:0;outline:0 none;padding:0;width:100%}.p-fluid .p-chips{display:flex}"]}]}],Chips.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),Chips.propDecorators={style:[{type:Input}],styleClass:[{type:Input}],disabled:[{type:Input}],field:[{type:Input}],placeholder:[{type:Input}],max:[{type:Input}],ariaLabelledBy:[{type:Input}],tabindex:[{type:Input}],inputId:[{type:Input}],allowDuplicate:[{type:Input}],inputStyle:[{type:Input}],inputStyleClass:[{type:Input}],addOnTab:[{type:Input}],addOnBlur:[{type:Input}],separator:[{type:Input}],onAdd:[{type:Output}],onRemove:[{type:Output}],onFocus:[{type:Output}],onBlur:[{type:Output}],onChipClick:[{type:Output}],inputViewChild:[{type:ViewChild,args:["inputtext"]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}]};class ChipsModule{}ChipsModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,InputTextModule,SharedModule],exports:[Chips,InputTextModule,SharedModule],declarations:[Chips]}]}];export{CHIPS_VALUE_ACCESSOR,Chips,ChipsModule};