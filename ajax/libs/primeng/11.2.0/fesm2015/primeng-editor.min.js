import{forwardRef,EventEmitter,Component,ChangeDetectionStrategy,ViewEncapsulation,ElementRef,Output,ContentChild,Input,ContentChildren,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{Header,PrimeTemplate,SharedModule}from"primeng/api";import{DomHandler}from"primeng/dom";import{NG_VALUE_ACCESSOR}from"@angular/forms";import*as Quill from"quill";const EDITOR_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Editor),multi:!0};class Editor{constructor(t){this.el=t,this.onTextChange=new EventEmitter,this.onSelectionChange=new EventEmitter,this.onInit=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}ngAfterViewInit(){let t=DomHandler.findSingle(this.el.nativeElement,"div.p-editor-content"),e={toolbar:DomHandler.findSingle(this.el.nativeElement,"div.p-editor-toolbar")},n=this.modules?Object.assign(Object.assign({},e),this.modules):e;this.quill=new Quill(t,{modules:n,placeholder:this.placeholder,readOnly:this.readonly,theme:"snow",formats:this.formats,bounds:this.bounds,debug:this.debug,scrollingContainer:this.scrollingContainer}),this.value&&this.quill.setContents(this.quill.clipboard.convert(this.value)),this.quill.on("text-change",(e,n,o)=>{if("user"===o){let n=t.children[0].innerHTML,l=this.quill.getText().trim();"<p><br></p>"===n&&(n=null),this.onTextChange.emit({htmlValue:n,textValue:l,delta:e,source:o}),this.onModelChange(n),this.onModelTouched()}}),this.quill.on("selection-change",(t,e,n)=>{this.onSelectionChange.emit({range:t,oldRange:e,source:n})}),this.onInit.emit({editor:this.quill})}ngAfterContentInit(){this.templates.forEach(t=>{switch(t.getType()){case"toolbar":this.toolbarTemplate=t.template;break;case"header":this.headerTemplate=t.template}})}writeValue(t){this.value=t,this.quill&&(t?this.quill.setContents(this.quill.clipboard.convert(t)):this.quill.setText(""))}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}getQuill(){return this.quill}get readonly(){return this._readonly}set readonly(t){this._readonly=t,this.quill&&(this._readonly?this.quill.disable():this.quill.enable())}}Editor.decorators=[{type:Component,args:[{selector:"p-editor",template:'\n        <div [ngClass]="\'p-editor-container\'" [class]="styleClass">\n            <div class="p-editor-toolbar" *ngIf="toolbar || toolbarTemplate">\n                <ng-content select="p-header"></ng-content>\n                <ng-container *ngTemplateOutlet="headerTemplate"></ng-container>\n            </div>\n            <div class="p-editor-toolbar" *ngIf="!toolbar && !toolbarTemplate">\n                <span class="ql-formats">\n                    <select class="ql-header">\n                      <option value="1">Heading</option>\n                      <option value="2">Subheading</option>\n                      <option selected>Normal</option>\n                    </select>\n                    <select class="ql-font">\n                      <option selected>Sans Serif</option>\n                      <option value="serif">Serif</option>\n                      <option value="monospace">Monospace</option>\n                    </select>\n                </span>\n                <span class="ql-formats">\n                    <button class="ql-bold" aria-label="Bold" type="button"></button>\n                    <button class="ql-italic" aria-label="Italic" type="button"></button>\n                    <button class="ql-underline" aria-label="Underline" type="button"></button>\n                </span>\n                <span class="ql-formats">\n                    <select class="ql-color"></select>\n                    <select class="ql-background"></select>\n                </span>\n                <span class="ql-formats">\n                    <button class="ql-list" value="ordered" aria-label="Ordered List" type="button"></button>\n                    <button class="ql-list" value="bullet" aria-label="Unordered List" type="button"></button>\n                    <select class="ql-align">\n                        <option selected></option>\n                        <option value="center"></option>\n                        <option value="right"></option>\n                        <option value="justify"></option>\n                    </select>\n                </span>\n                <span class="ql-formats">\n                    <button class="ql-link" aria-label="Insert Link" type="button"></button>\n                    <button class="ql-image" aria-label="Insert Image" type="button"></button>\n                    <button class="ql-code-block" aria-label="Insert Code Block" type="button"></button>\n                </span>\n                <span class="ql-formats">\n                    <button class="ql-clean" aria-label="Remove Styles" type="button"></button>\n                </span>\n            </div>\n            <div class="p-editor-content" [ngStyle]="style"></div>\n        </div>\n    ',providers:[EDITOR_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-editor-container .p-editor-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options .ql-picker-item{height:auto;width:auto}"]}]}],Editor.ctorParameters=(()=>[{type:ElementRef}]),Editor.propDecorators={onTextChange:[{type:Output}],onSelectionChange:[{type:Output}],toolbar:[{type:ContentChild,args:[Header]}],style:[{type:Input}],styleClass:[{type:Input}],placeholder:[{type:Input}],formats:[{type:Input}],modules:[{type:Input}],bounds:[{type:Input}],scrollingContainer:[{type:Input}],debug:[{type:Input}],onInit:[{type:Output}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],readonly:[{type:Input}]};class EditorModule{}EditorModule.decorators=[{type:NgModule,args:[{imports:[CommonModule],exports:[Editor,SharedModule],declarations:[Editor]}]}];export{EDITOR_VALUE_ACCESSOR,Editor,EditorModule};