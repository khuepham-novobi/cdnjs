import{forwardRef,EventEmitter,Component,ChangeDetectionStrategy,ViewEncapsulation,ElementRef,ChangeDetectorRef,Input,Output,ViewChild,ContentChild,ContentChildren,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{FilterService,Header,Footer,PrimeTemplate,SharedModule}from"primeng/api";import{DomHandler}from"primeng/dom";import{ObjectUtils}from"primeng/utils";import{NG_VALUE_ACCESSOR}from"@angular/forms";import{RippleModule}from"primeng/ripple";const LISTBOX_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Listbox),multi:!0};class Listbox{constructor(e,t,i){this.el=e,this.cd=t,this.filterService=i,this.checkbox=!1,this.filter=!1,this.filterMatchMode="contains",this.metaKeySelection=!0,this.showToggleAll=!0,this.onChange=new EventEmitter,this.onClick=new EventEmitter,this.onDblClick=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}get options(){return this._options}set options(e){this._options=e}get filterValue(){return this._filterValue}set filterValue(e){this._filterValue=e,this.activateFilter()}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":this.itemTemplate=e.template;break;case"group":this.groupTemplate=e.template;break;case"header":this.headerTemplate=e.template;break;case"footer":this.footerTemplate=e.template;break;default:this.itemTemplate=e.template}})}getOptionLabel(e){return this.optionLabel?ObjectUtils.resolveFieldData(e,this.optionLabel):null!=e.label?e.label:e}getOptionGroupChildren(e){return this.optionGroupChildren?ObjectUtils.resolveFieldData(e,this.optionGroupChildren):e.items}getOptionGroupLabel(e){return this.optionGroupLabel?ObjectUtils.resolveFieldData(e,this.optionGroupLabel):null!=e.label?e.label:e}getOptionValue(e){return this.optionValue?ObjectUtils.resolveFieldData(e,this.optionValue):this.optionLabel?e:e.value}isOptionDisabled(e){return this.optionDisabled?ObjectUtils.resolveFieldData(e,this.optionDisabled):void 0!==e.disabled&&e.disabled}writeValue(e){this.value=e,this.cd.markForCheck()}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e,this.cd.markForCheck()}onOptionClick(e,t){this.disabled||this.isOptionDisabled(t)||this.readonly||(this.multiple?this.checkbox?this.onOptionClickCheckbox(e,t):this.onOptionClickMultiple(e,t):this.onOptionClickSingle(e,t),this.onClick.emit({originalEvent:e,option:t,value:this.value}),this.optionTouched=!1)}onOptionTouchEnd(e){this.disabled||this.isOptionDisabled(e)||this.readonly||(this.optionTouched=!0)}onOptionDoubleClick(e,t){this.disabled||this.isOptionDisabled(t)||this.readonly||this.onDblClick.emit({originalEvent:e,option:t,value:this.value})}onOptionClickSingle(e,t){let i=this.isSelected(t),l=!1;if(!this.optionTouched&&this.metaKeySelection){let o=e.metaKey||e.ctrlKey;i?o&&(this.value=null,l=!0):(this.value=this.getOptionValue(t),l=!0)}else this.value=i?null:this.getOptionValue(t),l=!0;l&&(this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}))}onOptionClickMultiple(e,t){let i=this.isSelected(t),l=!1;if(!this.optionTouched&&this.metaKeySelection){let o=e.metaKey||e.ctrlKey;i?(o?this.removeOption(t):this.value=[this.getOptionValue(t)],l=!0):(this.value=o&&this.value||[],this.value=[...this.value,this.getOptionValue(t)],l=!0)}else i?this.removeOption(t):this.value=[...this.value||[],this.getOptionValue(t)],l=!0;l&&(this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}))}onOptionClickCheckbox(e,t){if(this.disabled||this.readonly)return;this.isSelected(t)?this.removeOption(t):(this.value=this.value?this.value:[],this.value=[...this.value,this.getOptionValue(t)]),this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value})}removeOption(e){this.value=this.value.filter(t=>!ObjectUtils.equals(t,this.getOptionValue(e),this.dataKey))}isSelected(e){let t=!1,i=this.getOptionValue(e);if(this.multiple){if(this.value)for(let e of this.value)if(ObjectUtils.equals(e,i,this.dataKey)){t=!0;break}}else t=ObjectUtils.equals(this.value,i,this.dataKey);return t}get allChecked(){let e=this.optionsToRender;if(e&&0!==e.length){let t=0,i=0,l=0,o=this.group?0:this.optionsToRender.length;for(let n of e)if(this.group){if(n.items)for(let e of n.items){let n=this.isOptionDisabled(e),s=this.isSelected(e);if(n)s?t++:i++;else{if(!s)return!1;l++}o++}}else{let e=this.isOptionDisabled(n),o=this.isSelected(n);if(e)o?t++:i++;else{if(!o)return!1;l++}}return o===t||o===l||l&&o===l+i+t}return!1}get optionsToRender(){return this._filteredOptions||this.options}hasFilter(){return this._filterValue&&this._filterValue.trim().length>0}onFilter(e){this._filterValue=e.target.value,this.activateFilter()}activateFilter(){if(this.hasFilter()&&this._options)if(this.group){let e=(this.optionLabel||"label").split(","),t=[];for(let i of this.options){let l=this.filterService.filter(this.getOptionGroupChildren(i),e,this.filterValue,this.filterMatchMode,this.filterLocale);l&&l.length&&t.push({label:i.label,value:i.value,items:l})}this._filteredOptions=t}else this._filteredOptions=this._options.filter(e=>this.filterService.filters[this.filterMatchMode](this.getOptionLabel(e),this._filterValue,this.filterLocale));else this._filteredOptions=null}get toggleAllDisabled(){let e=this.optionsToRender;if(e&&0!==e.length){for(let t of e)if(!this.isOptionDisabled(t))return!1;return!0}return!0}toggleAll(e){if(this.disabled||this.toggleAllDisabled||this.readonly)return;this.allChecked?this.uncheckAll():this.checkAll(),this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}),e.preventDefault()}checkAll(){let e=this.optionsToRender,t=[];e.forEach(e=>{if(this.group)e.items&&e.items.forEach(e=>{let i=this.isOptionDisabled(e);(!i||i&&this.isSelected(e))&&t.push(this.getOptionValue(e))});else{let i=this.isOptionDisabled(e);(!i||i&&this.isSelected(e))&&t.push(this.getOptionValue(e))}}),this.value=t}uncheckAll(){let e=this.optionsToRender,t=[];e.forEach(e=>{if(this.group)e.items&&e.items.forEach(e=>{this.isOptionDisabled(e)&&this.isSelected(e)&&t.push(this.getOptionValue(e))});else{this.isOptionDisabled(e)&&this.isSelected(e)&&t.push(this.getOptionValue(e))}}),this.value=t}onOptionKeyDown(e,t){if(this.readonly)return;let i=e.currentTarget;switch(e.which){case 40:var l=this.findNextItem(i);l&&l.focus(),e.preventDefault();break;case 38:var o=this.findPrevItem(i);o&&o.focus(),e.preventDefault();break;case 13:this.onOptionClick(e,t),e.preventDefault()}}findNextItem(e){let t=e.nextElementSibling;return t?DomHandler.hasClass(t,"p-disabled")||DomHandler.isHidden(t)||DomHandler.hasClass(t,"p-listbox-item-group")?this.findNextItem(t):t:null}findPrevItem(e){let t=e.previousElementSibling;return t?DomHandler.hasClass(t,"p-disabled")||DomHandler.isHidden(t)||DomHandler.hasClass(t,"p-listbox-item-group")?this.findPrevItem(t):t:null}onHeaderCheckboxFocus(){this.headerCheckboxFocus=!0}onHeaderCheckboxBlur(){this.headerCheckboxFocus=!1}}Listbox.decorators=[{type:Component,args:[{selector:"p-listbox",template:'\n    <div [ngClass]="{\'p-listbox p-component\': true, \'p-disabled\': disabled}" [ngStyle]="style" [class]="styleClass">\n      <div class="p-listbox-header" *ngIf="headerFacet || headerTemplate">\n        <ng-content select="p-header"></ng-content>\n        <ng-container *ngTemplateOutlet="headerTemplate"></ng-container>\n      </div>\n      <div class="p-listbox-header" *ngIf="(checkbox && multiple && showToggleAll) || filter">\n        <div class="p-checkbox p-component" *ngIf="checkbox && multiple && showToggleAll" [ngClass]="{\'p-checkbox-disabled\': disabled || toggleAllDisabled}">\n          <div class="p-hidden-accessible">\n            <input type="checkbox" readonly="readonly" [checked]="allChecked" (focus)="onHeaderCheckboxFocus()" (blur)="onHeaderCheckboxBlur()" (keydown.space)="toggleAll($event)" [attr.disabled]="disabled || toggleAllDisabled">\n          </div>\n          <div #headerchkbox class="p-checkbox-box" [ngClass]="{\'p-highlight\': allChecked, \'p-focus\': headerCheckboxFocus, \'p-disabled\': disabled || toggleAllDisabled}" (click)="toggleAll($event)">\n            <span class="p-checkbox-icon" [ngClass]="{\'pi pi-check\':allChecked}"></span>\n          </div>\n        </div>\n        <div class="p-listbox-filter-container" *ngIf="filter">\n          <input type="text" [value]="filterValue||\'\'" (input)="onFilter($event)" class="p-listbox-filter p-inputtext p-component" [disabled]="disabled" [attr.placeholder]="filterPlaceHolder" [attr.aria-label]="ariaFilterLabel">\n          <span class="p-listbox-filter-icon pi pi-search"></span>\n        </div>\n      </div>\n      <div [ngClass]="\'p-listbox-list-wrapper\'" [ngStyle]="listStyle" [class]="listStyleClass">\n        <ul class="p-listbox-list" role="listbox" aria-multiselectable="multiple">\n            <ng-container *ngIf="group">\n                <ng-template ngFor let-optgroup [ngForOf]="optionsToRender">\n                    <li class="p-listbox-item-group">\n                        <span *ngIf="!groupTemplate">{{getOptionGroupLabel(optgroup)||\'empty\'}}</span>\n                        <ng-container *ngTemplateOutlet="groupTemplate; context: {$implicit: optgroup}"></ng-container>\n                    </li>\n                    <ng-container *ngTemplateOutlet="itemslist; context: {$implicit: getOptionGroupChildren(optgroup)}"></ng-container>\n                </ng-template>\n            </ng-container>\n            <ng-container *ngIf="!group">\n                    <ng-container *ngTemplateOutlet="itemslist; context: {$implicit: optionsToRender}"></ng-container>\n            </ng-container>\n            <ng-template #itemslist let-optionsToDisplay>\n                <li *ngFor="let option of optionsToDisplay; let i = index;" [attr.tabindex]="disabled || isOptionDisabled(option) ? null : \'0\'" pRipple\n                    [ngClass]="{\'p-listbox-item\':true,\'p-highlight\':isSelected(option), \'p-disabled\': this.isOptionDisabled(option)}" role="option" [attr.aria-label]="getOptionLabel(option)"\n                    [attr.aria-selected]="isSelected(option)" (click)="onOptionClick($event,option)" (dblclick)="onOptionDoubleClick($event,option)" (touchend)="onOptionTouchEnd(option)" (keydown)="onOptionKeyDown($event,option)">\n                    <div class="p-checkbox p-component" *ngIf="checkbox && multiple" [ngClass]="{\'p-checkbox-disabled\': disabled || isOptionDisabled(option)}">\n                        <div class="p-checkbox-box" [ngClass]="{\'p-highlight\':isSelected(option)}">\n                            <span class="p-checkbox-icon" [ngClass]="{\'pi pi-check\':isSelected(option)}"></span>\n                        </div>\n                    </div>\n                    <span *ngIf="!itemTemplate">{{getOptionLabel(option)}}</span>\n                    <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: option, index: i}"></ng-container>\n                </li>\n            </ng-template>\n        </ul>\n      </div>\n      <div class="p-listbox-footer" *ngIf="footerFacet || footerTemplate">\n        <ng-content select="p-footer"></ng-content>\n        <ng-container *ngTemplateOutlet="footerTemplate"></ng-container>\n      </div>\n    </div>\n  ',providers:[LISTBOX_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-listbox-list-wrapper{overflow:auto}.p-listbox-list{list-style-type:none;margin:0;padding:0}.p-listbox-item{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;overflow:hidden;position:relative;user-select:none}.p-listbox-header,.p-listbox-item{align-items:center;display:flex}.p-listbox-filter-container{flex:1 1 auto;position:relative}.p-listbox-filter-icon{margin-top:-.5rem;position:absolute;top:50%}.p-listbox-filter{width:100%}"]}]}],Listbox.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef},{type:FilterService}]),Listbox.propDecorators={multiple:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],listStyle:[{type:Input}],listStyleClass:[{type:Input}],readonly:[{type:Input}],disabled:[{type:Input}],checkbox:[{type:Input}],filter:[{type:Input}],filterMatchMode:[{type:Input}],filterLocale:[{type:Input}],metaKeySelection:[{type:Input}],dataKey:[{type:Input}],showToggleAll:[{type:Input}],optionLabel:[{type:Input}],optionValue:[{type:Input}],optionGroupChildren:[{type:Input}],optionGroupLabel:[{type:Input}],optionDisabled:[{type:Input}],ariaFilterLabel:[{type:Input}],filterPlaceHolder:[{type:Input}],group:[{type:Input}],onChange:[{type:Output}],onClick:[{type:Output}],onDblClick:[{type:Output}],headerCheckboxViewChild:[{type:ViewChild,args:["headerchkbox"]}],headerFacet:[{type:ContentChild,args:[Header]}],footerFacet:[{type:ContentChild,args:[Footer]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],options:[{type:Input}],filterValue:[{type:Input}]};class ListboxModule{}ListboxModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,SharedModule,RippleModule],exports:[Listbox,SharedModule],declarations:[Listbox]}]}];export{LISTBOX_VALUE_ACCESSOR,Listbox,ListboxModule};