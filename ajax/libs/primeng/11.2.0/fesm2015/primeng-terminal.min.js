import{Injectable,Component,ChangeDetectionStrategy,ViewEncapsulation,ElementRef,ChangeDetectorRef,Input,NgModule}from"@angular/core";import{FormsModule}from"@angular/forms";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{Subject}from"rxjs";class TerminalService{constructor(){this.commandSource=new Subject,this.responseSource=new Subject,this.commandHandler=this.commandSource.asObservable(),this.responseHandler=this.responseSource.asObservable()}sendCommand(e){e&&this.commandSource.next(e)}sendResponse(e){e&&this.responseSource.next(e)}}TerminalService.decorators=[{type:Injectable}];class Terminal{constructor(e,n,t){this.el=e,this.terminalService=n,this.cd=t,this.commands=[],this.subscription=n.responseHandler.subscribe(e=>{this.commands[this.commands.length-1].response=e,this.commandProcessed=!0})}ngAfterViewInit(){this.container=DomHandler.find(this.el.nativeElement,".p-terminal")[0]}ngAfterViewChecked(){this.commandProcessed&&(this.container.scrollTop=this.container.scrollHeight,this.commandProcessed=!1)}set response(e){e&&(this.commands[this.commands.length-1].response=e,this.commandProcessed=!0)}handleCommand(e){13==e.keyCode&&(this.commands.push({text:this.command}),this.terminalService.sendCommand(this.command),this.command="")}focus(e){e.focus()}ngOnDestroy(){this.subscription&&this.subscription.unsubscribe()}}Terminal.decorators=[{type:Component,args:[{selector:"p-terminal",template:'\n        <div [ngClass]="\'p-terminal p-component\'" [ngStyle]="style" [class]="styleClass" (click)="focus(in)">\n            <div *ngIf="welcomeMessage">{{welcomeMessage}}</div>\n            <div class="p-terminal-content">\n                <div *ngFor="let command of commands">\n                    <span class="p-terminal-prompt">{{prompt}}</span>\n                    <span class="p-terminal-command">{{command.text}}</span>\n                    <div class="p-terminal-response">{{command.response}}</div>\n                </div>\n            </div>\n            <div class="p-terminal-prompt-container">\n                <span class="p-terminal-content-prompt">{{prompt}}</span>\n                <input #in type="text" [(ngModel)]="command" class="p-terminal-input" autocomplete="off" (keydown)="handleCommand($event)" autofocus>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-terminal{height:18rem;overflow:auto}.p-terminal-prompt-container{align-items:center;display:flex}.p-terminal-input{background-color:transparent;border:0;color:inherit;flex:1 1 auto;outline:0 none;padding:0}.p-terminal-input::-ms-clear{display:none}"]}]}],Terminal.ctorParameters=(()=>[{type:ElementRef},{type:TerminalService},{type:ChangeDetectorRef}]),Terminal.propDecorators={welcomeMessage:[{type:Input}],prompt:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],response:[{type:Input}]};class TerminalModule{}TerminalModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,FormsModule],exports:[Terminal],declarations:[Terminal]}]}];export{Terminal,TerminalModule,TerminalService};