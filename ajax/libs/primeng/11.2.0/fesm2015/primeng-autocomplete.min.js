import{forwardRef,EventEmitter,Component,ChangeDetectionStrategy,ViewEncapsulation,ElementRef,Renderer2,ChangeDetectorRef,IterableDiffers,Input,Output,ViewChild,ContentChildren,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{trigger,transition,style,animate}from"@angular/animations";import{InputTextModule}from"primeng/inputtext";import{ButtonModule}from"primeng/button";import{RippleModule}from"primeng/ripple";import{PrimeTemplate,SharedModule}from"primeng/api";import{DomHandler,ConnectedOverlayScrollHandler}from"primeng/dom";import{UniqueComponentId,ObjectUtils}from"primeng/utils";import{NG_VALUE_ACCESSOR}from"@angular/forms";const AUTOCOMPLETE_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>AutoComplete),multi:!0};class AutoComplete{constructor(t,e,i,n){this.el=t,this.renderer=e,this.cd=i,this.differs=n,this.minLength=1,this.delay=300,this.type="text",this.autoZIndex=!0,this.baseZIndex=0,this.dropdownIcon="pi pi-chevron-down",this.unique=!0,this.completeOnFocus=!1,this.completeMethod=new EventEmitter,this.onSelect=new EventEmitter,this.onUnselect=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this.onDropdownClick=new EventEmitter,this.onClear=new EventEmitter,this.onKeyUp=new EventEmitter,this.onShow=new EventEmitter,this.onHide=new EventEmitter,this.scrollHeight="200px",this.dropdownMode="blank",this.showTransitionOptions=".12s cubic-bezier(0, 0, 0.2, 1)",this.hideTransitionOptions=".1s linear",this.autocomplete="off",this.onModelChange=(()=>{}),this.onModelTouched=(()=>{}),this.overlayVisible=!1,this.focus=!1,this.inputFieldValue=null,this.differ=n.find([]).create(null),this.listId=UniqueComponentId()+"_list"}get suggestions(){return this._suggestions}set suggestions(t){this._suggestions=t,this.handleSuggestionsChange()}ngAfterViewChecked(){this.suggestionsUpdated&&this.overlay&&this.overlay.offsetParent&&(setTimeout(()=>{this.overlay&&this.alignOverlay()},1),this.suggestionsUpdated=!1),this.highlightOptionChanged&&(setTimeout(()=>{if(this.overlay){let t=DomHandler.findSingle(this.overlay,"li.p-highlight");t&&DomHandler.scrollInView(this.overlay,t)}},1),this.highlightOptionChanged=!1)}handleSuggestionsChange(){null!=this._suggestions&&this.loading&&(this.highlightOption=null,this._suggestions.length?(this.noResults=!1,this.show(),this.suggestionsUpdated=!0,this.autoHighlight&&(this.highlightOption=this._suggestions[0])):(this.noResults=!0,this.emptyMessage?(this.show(),this.suggestionsUpdated=!0):this.hide()),this.loading=!1)}ngAfterContentInit(){this.templates.forEach(t=>{switch(t.getType()){case"item":this.itemTemplate=t.template;break;case"group":this.groupTemplate=t.template;break;case"selectedItem":this.selectedItemTemplate=t.template;break;default:this.itemTemplate=t.template}})}writeValue(t){this.value=t,this.filled=this.value&&""!=this.value,this.updateInputField(),this.cd.markForCheck()}getOptionGroupChildren(t){return this.optionGroupChildren?ObjectUtils.resolveFieldData(t,this.optionGroupChildren):t.items}getOptionGroupLabel(t){return this.optionGroupLabel?ObjectUtils.resolveFieldData(t,this.optionGroupLabel):null!=t.label?t.label:t}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t,this.cd.markForCheck()}onInput(t){if(!this.inputKeyDown&&DomHandler.isIE())return;this.timeout&&clearTimeout(this.timeout);let e=t.target.value;this.multiple||this.forceSelection||this.onModelChange(e),0!==e.length||this.multiple||(this.hide(),this.onClear.emit(t),this.onModelChange(e)),e.length>=this.minLength?this.timeout=setTimeout(()=>{this.search(t,e)},this.delay):this.hide(),this.updateFilledState(),this.inputKeyDown=!1}onInputClick(t){this.documentClickListener&&(this.inputClick=!0)}search(t,e){null!=e&&(this.loading=!0,this.completeMethod.emit({originalEvent:t,query:e}))}selectItem(t,e=!0){this.forceSelectionUpdateModelTimeout&&(clearTimeout(this.forceSelectionUpdateModelTimeout),this.forceSelectionUpdateModelTimeout=null),this.multiple?(this.multiInputEL.nativeElement.value="",this.value=this.value||[],this.isSelected(t)&&this.unique||(this.value=[...this.value,t],this.onModelChange(this.value))):(this.inputEL.nativeElement.value=this.field?ObjectUtils.resolveFieldData(t,this.field)||"":t,this.value=t,this.onModelChange(this.value)),this.onSelect.emit(t),this.updateFilledState(),e&&(this.itemClicked=!0,this.focusInput())}show(){if(this.multiInputEL||this.inputEL){let t=this.multiple?this.multiInputEL.nativeElement.ownerDocument.activeElement==this.multiInputEL.nativeElement:this.inputEL.nativeElement.ownerDocument.activeElement==this.inputEL.nativeElement;!this.overlayVisible&&t&&(this.overlayVisible=!0)}}onOverlayAnimationStart(t){switch(t.toState){case"visible":this.overlay=t.element,this.appendOverlay(),this.autoZIndex&&(this.overlay.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),this.alignOverlay(),this.bindDocumentClickListener(),this.bindDocumentResizeListener(),this.bindScrollListener(),this.onShow.emit(t);break;case"void":this.onOverlayHide()}}appendOverlay(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.overlay):DomHandler.appendChild(this.overlay,this.appendTo),this.overlay.style.minWidth||(this.overlay.style.minWidth=DomHandler.getWidth(this.el.nativeElement.children[0])+"px"))}resolveFieldData(t){return this.field?ObjectUtils.resolveFieldData(t,this.field):t}restoreOverlayAppend(){this.overlay&&this.appendTo&&this.el.nativeElement.appendChild(this.overlay)}alignOverlay(){this.appendTo?DomHandler.absolutePosition(this.overlay,this.multiple?this.multiContainerEL.nativeElement:this.inputEL.nativeElement):DomHandler.relativePosition(this.overlay,this.multiple?this.multiContainerEL.nativeElement:this.inputEL.nativeElement)}hide(){this.overlayVisible=!1,this.cd.markForCheck()}handleDropdownClick(t){if(this.overlayVisible)this.hide();else{this.focusInput();let e=this.multiple?this.multiInputEL.nativeElement.value:this.inputEL.nativeElement.value;"blank"===this.dropdownMode?this.search(t,""):"current"===this.dropdownMode&&this.search(t,e),this.onDropdownClick.emit({originalEvent:t,query:e})}}focusInput(){this.multiple?this.multiInputEL.nativeElement.focus():this.inputEL.nativeElement.focus()}removeItem(t){let e=DomHandler.index(t),i=this.value[e];this.value=this.value.filter((t,i)=>i!=e),this.onModelChange(this.value),this.updateFilledState(),this.onUnselect.emit(i)}onKeydown(t){if(this.overlayVisible)switch(t.which){case 40:if(this.group){let t=this.findOptionGroupIndex(this.highlightOption,this.suggestions);if(-1!==t){let e=t.itemIndex+1;e<this.getOptionGroupChildren(this.suggestions[t.groupIndex]).length?(this.highlightOption=this.getOptionGroupChildren(this.suggestions[t.groupIndex])[e],this.highlightOptionChanged=!0):this.suggestions[t.groupIndex+1]&&(this.highlightOption=this.getOptionGroupChildren(this.suggestions[t.groupIndex+1])[0],this.highlightOptionChanged=!0)}else this.highlightOption=this.getOptionGroupChildren(this.suggestions[0])[0]}else{let t=this.findOptionIndex(this.highlightOption,this.suggestions);if(-1!=t){var e=t+1;e!=this.suggestions.length&&(this.highlightOption=this.suggestions[e],this.highlightOptionChanged=!0)}else this.highlightOption=this.suggestions[0]}t.preventDefault();break;case 38:if(this.group){let t=this.findOptionGroupIndex(this.highlightOption,this.suggestions);if(-1!==t){let e=t.itemIndex-1;if(e>=0)this.highlightOption=this.getOptionGroupChildren(this.suggestions[t.groupIndex])[e],this.highlightOptionChanged=!0;else if(e<0){let e=this.suggestions[t.groupIndex-1];e&&(this.highlightOption=this.getOptionGroupChildren(e)[this.getOptionGroupChildren(e).length-1],this.highlightOptionChanged=!0)}}}else{let t=this.findOptionIndex(this.highlightOption,this.suggestions);if(t>0){let e=t-1;this.highlightOption=this.suggestions[e],this.highlightOptionChanged=!0}}t.preventDefault();break;case 13:this.highlightOption&&(this.selectItem(this.highlightOption),this.hide()),t.preventDefault();break;case 27:this.hide(),t.preventDefault();break;case 9:this.highlightOption&&this.selectItem(this.highlightOption),this.hide()}else 40===t.which&&this.suggestions&&this.search(t,t.target.value);if(this.multiple)switch(t.which){case 8:if(this.value&&this.value.length&&!this.multiInputEL.nativeElement.value){this.value=[...this.value];const t=this.value.pop();this.onModelChange(this.value),this.updateFilledState(),this.onUnselect.emit(t)}}this.inputKeyDown=!0}onKeyup(t){this.onKeyUp.emit(t)}onInputFocus(t){if(!this.itemClicked&&this.completeOnFocus){let e=this.multiple?this.multiInputEL.nativeElement.value:this.inputEL.nativeElement.value;this.search(t,e)}this.focus=!0,this.onFocus.emit(t),this.itemClicked=!1}onInputBlur(t){this.focus=!1,this.onModelTouched(),this.onBlur.emit(t)}onInputChange(t){if(this.forceSelection){let e=!1,i=t.target.value.trim();if(this.suggestions)for(let t of this.suggestions){let n=this.field?ObjectUtils.resolveFieldData(t,this.field):t;if(n&&i===n.trim()){e=!0,this.forceSelectionUpdateModelTimeout=setTimeout(()=>{this.selectItem(t,!1)},250);break}}e||(this.multiple?this.multiInputEL.nativeElement.value="":(this.value=null,this.inputEL.nativeElement.value=""),this.onClear.emit(t),this.onModelChange(this.value),this.updateFilledState())}}onInputPaste(t){this.onKeydown(t)}isSelected(t){let e=!1;if(this.value&&this.value.length)for(let i=0;i<this.value.length;i++)if(ObjectUtils.equals(this.value[i],t,this.dataKey)){e=!0;break}return e}findOptionIndex(t,e){let i=-1;if(e)for(let n=0;n<e.length;n++)if(ObjectUtils.equals(t,e[n])){i=n;break}return i}findOptionGroupIndex(t,e){let i,n;if(e)for(let l=0;l<e.length&&(i=l,-1===(n=this.findOptionIndex(t,this.getOptionGroupChildren(e[l]))));l++);return-1!==n?{groupIndex:i,itemIndex:n}:-1}updateFilledState(){this.multiple?this.filled=this.value&&this.value.length||this.multiInputEL&&this.multiInputEL.nativeElement&&""!=this.multiInputEL.nativeElement.value:this.filled=this.inputFieldValue&&""!=this.inputFieldValue||this.inputEL&&this.inputEL.nativeElement&&""!=this.inputEL.nativeElement.value}updateInputField(){let t=this.value?this.field?ObjectUtils.resolveFieldData(this.value,this.field)||"":this.value:"";this.inputFieldValue=t,this.inputEL&&this.inputEL.nativeElement&&(this.inputEL.nativeElement.value=t),this.updateFilledState()}bindDocumentClickListener(){if(!this.documentClickListener){const t=this.el?this.el.nativeElement.ownerDocument:"document";this.documentClickListener=this.renderer.listen(t,"click",t=>{3!==t.which&&(this.inputClick||this.isDropdownClick(t)||this.hide(),this.inputClick=!1,this.cd.markForCheck())})}}isDropdownClick(t){if(this.dropdown){let e=t.target;return e===this.dropdownButton.nativeElement||e.parentNode===this.dropdownButton.nativeElement}return!1}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}onWindowResize(){this.hide()}bindScrollListener(){this.scrollHandler||(this.scrollHandler=new ConnectedOverlayScrollHandler(this.containerEL.nativeElement,()=>{this.overlayVisible&&this.hide()})),this.scrollHandler.bindScrollListener()}unbindScrollListener(){this.scrollHandler&&this.scrollHandler.unbindScrollListener()}onOverlayHide(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener(),this.unbindScrollListener(),this.overlay=null,this.onHide.emit()}ngOnDestroy(){this.forceSelectionUpdateModelTimeout&&(clearTimeout(this.forceSelectionUpdateModelTimeout),this.forceSelectionUpdateModelTimeout=null),this.scrollHandler&&(this.scrollHandler.destroy(),this.scrollHandler=null),this.restoreOverlayAppend(),this.onOverlayHide()}}AutoComplete.decorators=[{type:Component,args:[{selector:"p-autoComplete",template:'\n        <span #container [ngClass]="{\'p-autocomplete p-component\':true,\'p-autocomplete-dd\':dropdown,\'p-autocomplete-multiple\':multiple}" [ngStyle]="style" [class]="styleClass">\n            <input *ngIf="!multiple" #in [attr.type]="type" [attr.id]="inputId" [ngStyle]="inputStyle" [class]="inputStyleClass" [autocomplete]="autocomplete" [attr.required]="required" [attr.name]="name"\n            class="p-autocomplete-input p-inputtext p-component" [ngClass]="{\'p-autocomplete-dd-input\':dropdown,\'p-disabled\': disabled}" [value]="inputFieldValue" aria-autocomplete="list" [attr.aria-controls]="listId" role="searchbox" [attr.aria-expanded]="overlayVisible" aria-haspopup="true" [attr.aria-activedescendant]="\'p-highlighted-option\'"\n            (click)="onInputClick($event)" (input)="onInput($event)" (keydown)="onKeydown($event)" (keyup)="onKeyup($event)" [attr.autofocus]="autofocus" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)" (change)="onInputChange($event)" (paste)="onInputPaste($event)"\n            [attr.placeholder]="placeholder" [attr.size]="size" [attr.maxlength]="maxlength" [attr.tabindex]="tabindex" [readonly]="readonly" [disabled]="disabled" [attr.aria-label]="ariaLabel" [attr.aria-labelledby]="ariaLabelledBy" [attr.aria-required]="required"\n            ><ul *ngIf="multiple" #multiContainer class="p-autocomplete-multiple-container p-component p-inputtext" [ngClass]="{\'p-disabled\':disabled,\'p-focus\':focus}" (click)="multiIn.focus()">\n                <li #token *ngFor="let val of value" class="p-autocomplete-token">\n                    <ng-container *ngTemplateOutlet="selectedItemTemplate; context: {$implicit: val}"></ng-container>\n                    <span *ngIf="!selectedItemTemplate" class="p-autocomplete-token-label">{{resolveFieldData(val)}}</span>\n                    <span class="p-autocomplete-token-icon pi pi-times-circle" (click)="removeItem(token)" *ngIf="!disabled"></span>\n                </li>\n                <li class="p-autocomplete-input-token">\n                    <input #multiIn [attr.type]="type" [attr.id]="inputId" [disabled]="disabled" [attr.placeholder]="(value&&value.length ? null : placeholder)" [attr.tabindex]="tabindex" [attr.maxlength]="maxlength" (input)="onInput($event)"  (click)="onInputClick($event)"\n                            (keydown)="onKeydown($event)" [readonly]="readonly" (keyup)="onKeyup($event)" [attr.autofocus]="autofocus" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)" (change)="onInputChange($event)" (paste)="onInputPaste($event)" [autocomplete]="autocomplete"\n                            [ngStyle]="inputStyle" [class]="inputStyleClass" [attr.aria-label]="ariaLabel" [attr.aria-labelledby]="ariaLabelledBy" [attr.aria-required]="required"\n                            aria-autocomplete="list" [attr.aria-controls]="listId" role="searchbox" [attr.aria-expanded]="overlayVisible" aria-haspopup="true" [attr.aria-activedescendant]="\'p-highlighted-option\'">\n                </li>\n            </ul>\n            <i *ngIf="loading" class="p-autocomplete-loader pi pi-spinner pi-spin"></i><button #ddBtn type="button" pButton [icon]="dropdownIcon" class="p-autocomplete-dropdown" [disabled]="disabled" pRipple\n                (click)="handleDropdownClick($event)" *ngIf="dropdown" [attr.tabindex]="tabindex"></button>\n            <div #panel *ngIf="overlayVisible" [ngClass]="[\'p-autocomplete-panel p-component\']" [style.max-height]="scrollHeight" [ngStyle]="panelStyle" [class]="panelStyleClass"\n                [@overlayAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" (@overlayAnimation.start)="onOverlayAnimationStart($event)">\n                <ul role="listbox" [attr.id]="listId" class="p-autocomplete-items">\n                    <ng-container *ngIf="group">\n                        <ng-template ngFor let-optgroup [ngForOf]="suggestions">\n                            <li class="p-autocomplete-item-group">\n                                <span *ngIf="!groupTemplate">{{getOptionGroupLabel(optgroup)||\'empty\'}}</span>\n                                <ng-container *ngTemplateOutlet="groupTemplate; context: {$implicit: optgroup}"></ng-container>\n                            </li>\n                            <ng-container *ngTemplateOutlet="itemslist; context: {$implicit: getOptionGroupChildren(optgroup)}"></ng-container>\n                        </ng-template>\n                    </ng-container>\n                    <ng-container *ngIf="!group">\n                            <ng-container *ngTemplateOutlet="itemslist; context: {$implicit: suggestions}"></ng-container>\n                    </ng-container>\n                    <ng-template #itemslist let-suggestionsToDisplay>\n                        <li role="option" *ngFor="let option of suggestionsToDisplay; let idx = index" class="p-autocomplete-item" pRipple [ngClass]="{\'p-highlight\': (option === highlightOption)}" [id]="highlightOption == option ? \'p-highlighted-option\':\'\'" (click)="selectItem(option)">\n                            <span *ngIf="!itemTemplate">{{resolveFieldData(option)}}</span>\n                            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: option, index: idx}"></ng-container>\n                        </li>\n                        <li *ngIf="noResults && emptyMessage" class="p-autocomplete-emptymessage p-autocomplete-item">{{emptyMessage}}</li>\n                    </ng-template>\n                </ul>\n            </div>\n        </span>\n    ',animations:[trigger("overlayAnimation",[transition(":enter",[style({opacity:0,transform:"scaleY(0.8)"}),animate("{{showTransitionParams}}")]),transition(":leave",[animate("{{hideTransitionParams}}",style({opacity:0}))])])],host:{"[class.p-inputwrapper-filled]":"filled","[class.p-inputwrapper-focus]":"(focus && !disabled) || overlayVisible"},providers:[AUTOCOMPLETE_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-autocomplete{display:inline-flex;position:relative}.p-autocomplete-loader{margin-top:-.5rem;position:absolute;top:50%}.p-autocomplete-dd .p-autocomplete-input{flex:1 1 auto;width:1%}.p-autocomplete-dd .p-autocomplete-input,.p-autocomplete-dd .p-autocomplete-multiple-container{border-bottom-right-radius:0;border-top-right-radius:0}.p-autocomplete-dd .p-autocomplete-dropdown{border-bottom-left-radius:0;border-top-left-radius:0}.p-autocomplete .p-autocomplete-panel{min-width:100%}.p-autocomplete-panel{overflow:auto;position:absolute}.p-autocomplete-items{list-style-type:none;margin:0;padding:0}.p-autocomplete-item{cursor:pointer;overflow:hidden;position:relative;white-space:nowrap}.p-autocomplete-multiple-container{align-items:center;cursor:text;display:flex;flex-wrap:wrap;list-style-type:none;margin:0;overflow:hidden;padding:0}.p-autocomplete-token{align-items:center;cursor:default;display:inline-flex;flex:0 0 auto}.p-autocomplete-token-icon{cursor:pointer}.p-autocomplete-input-token{display:inline-flex;flex:1 1 auto}.p-autocomplete-input-token input{background-color:transparent;border:0;border-radius:0;box-shadow:none;margin:0;outline:0 none;padding:0;width:100%}.p-fluid .p-autocomplete{display:flex}.p-fluid .p-autocomplete-dd .p-autocomplete-input{width:1%}"]}]}],AutoComplete.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef},{type:IterableDiffers}]),AutoComplete.propDecorators={minLength:[{type:Input}],delay:[{type:Input}],style:[{type:Input}],panelStyle:[{type:Input}],styleClass:[{type:Input}],panelStyleClass:[{type:Input}],inputStyle:[{type:Input}],inputId:[{type:Input}],inputStyleClass:[{type:Input}],placeholder:[{type:Input}],readonly:[{type:Input}],disabled:[{type:Input}],maxlength:[{type:Input}],name:[{type:Input}],required:[{type:Input}],size:[{type:Input}],appendTo:[{type:Input}],autoHighlight:[{type:Input}],forceSelection:[{type:Input}],type:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],ariaLabel:[{type:Input}],ariaLabelledBy:[{type:Input}],dropdownIcon:[{type:Input}],unique:[{type:Input}],group:[{type:Input}],completeOnFocus:[{type:Input}],completeMethod:[{type:Output}],onSelect:[{type:Output}],onUnselect:[{type:Output}],onFocus:[{type:Output}],onBlur:[{type:Output}],onDropdownClick:[{type:Output}],onClear:[{type:Output}],onKeyUp:[{type:Output}],onShow:[{type:Output}],onHide:[{type:Output}],field:[{type:Input}],scrollHeight:[{type:Input}],dropdown:[{type:Input}],dropdownMode:[{type:Input}],multiple:[{type:Input}],tabindex:[{type:Input}],dataKey:[{type:Input}],emptyMessage:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}],autofocus:[{type:Input}],autocomplete:[{type:Input}],optionGroupChildren:[{type:Input}],optionGroupLabel:[{type:Input}],containerEL:[{type:ViewChild,args:["container"]}],inputEL:[{type:ViewChild,args:["in"]}],multiInputEL:[{type:ViewChild,args:["multiIn"]}],multiContainerEL:[{type:ViewChild,args:["multiContainer"]}],dropdownButton:[{type:ViewChild,args:["ddBtn"]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],suggestions:[{type:Input}]};class AutoCompleteModule{}AutoCompleteModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,InputTextModule,ButtonModule,SharedModule,RippleModule],exports:[AutoComplete,SharedModule],declarations:[AutoComplete]}]}];export{AUTOCOMPLETE_VALUE_ACCESSOR,AutoComplete,AutoCompleteModule};