import{EventEmitter,Component,ChangeDetectionStrategy,ViewEncapsulation,ElementRef,Renderer2,ChangeDetectorRef,Input,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{TranslationKeys,ConfirmationService,PrimeNGConfig}from"primeng/api";import{ButtonModule}from"primeng/button";import{trigger,state,style,transition,animate}from"@angular/animations";import{DomHandler,ConnectedOverlayScrollHandler}from"primeng/dom";class ConfirmPopup{constructor(t,e,n,i,o){this.el=t,this.confirmationService=e,this.renderer=n,this.cd=i,this.config=o,this.showTransitionOptions=".12s cubic-bezier(0, 0, 0.2, 1)",this.hideTransitionOptions=".1s linear",this.autoZIndex=!0,this.baseZIndex=0,this.subscription=this.confirmationService.requireConfirmation$.subscribe(t=>{t?t.key===this.key&&(this.confirmation=t,this.confirmation.accept&&(this.confirmation.acceptEvent=new EventEmitter,this.confirmation.acceptEvent.subscribe(this.confirmation.accept)),this.confirmation.reject&&(this.confirmation.rejectEvent=new EventEmitter,this.confirmation.rejectEvent.subscribe(this.confirmation.reject)),this.visible=!0):this.hide()})}get visible(){return this._visible}set visible(t){this._visible=t,this.cd.markForCheck()}onAnimationStart(t){"open"===t.toState&&(this.container=t.element,document.body.appendChild(this.container),this.align(),this.bindListeners())}onAnimationEnd(t){switch(t.toState){case"void":this.onContainerDestroy()}}align(){this.autoZIndex&&(this.container.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),DomHandler.absolutePosition(this.container,this.confirmation.target);const t=DomHandler.getOffset(this.container),e=DomHandler.getOffset(this.confirmation.target);let n=0;t.left<e.left&&(n=e.left-t.left),this.container.style.setProperty("--overlayArrowLeft",`${n}px`),t.top<e.top&&DomHandler.addClass(this.container,"p-confirm-popup-flipped")}hide(){this.visible=!1}accept(){this.confirmation.acceptEvent&&this.confirmation.acceptEvent.emit(),this.hide()}reject(){this.confirmation.rejectEvent&&this.confirmation.rejectEvent.emit(),this.hide()}bindListeners(){this.bindDocumentClickListener(),this.bindDocumentResizeListener(),this.bindScrollListener()}unbindListeners(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener(),this.unbindScrollListener()}bindDocumentClickListener(){if(!this.documentClickListener){let t=DomHandler.isIOS()?"touchstart":"click";const e=this.el?this.el.nativeElement.ownerDocument:document;this.documentClickListener=this.renderer.listen(e,t,t=>{let e=this.confirmation.target;this.container===t.target||this.container.contains(t.target)||e===t.target||e.contains(t.target)||this.hide()})}}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}onWindowResize(){this.hide()}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}bindScrollListener(){this.scrollHandler||(this.scrollHandler=new ConnectedOverlayScrollHandler(this.confirmation.target,()=>{this.visible&&this.hide()})),this.scrollHandler.bindScrollListener()}unbindScrollListener(){this.scrollHandler&&this.scrollHandler.unbindScrollListener()}unsubscribeConfirmationSubscriptions(){this.confirmation&&(this.confirmation.acceptEvent&&this.confirmation.acceptEvent.unsubscribe(),this.confirmation.rejectEvent&&this.confirmation.rejectEvent.unsubscribe())}onContainerDestroy(){this.unbindListeners(),this.unsubscribeConfirmationSubscriptions(),this.confirmation=null,this.container=null}restoreAppend(){this.container&&document.body.removeChild(this.container),this.onContainerDestroy()}get acceptButtonLabel(){return this.confirmation.acceptLabel||this.config.getTranslation(TranslationKeys.ACCEPT)}get rejectButtonLabel(){return this.confirmation.rejectLabel||this.config.getTranslation(TranslationKeys.REJECT)}ngOnDestroy(){this.restoreAppend(),this.subscription&&this.subscription.unsubscribe()}}ConfirmPopup.decorators=[{type:Component,args:[{selector:"p-confirmPopup",template:'\n        <div *ngIf="visible" [ngClass]="\'p-confirm-popup p-component\'" [ngStyle]="style" [class]="styleClass"\n            [@animation]="{value: \'open\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}"\n            (@animation.start)="onAnimationStart($event)" (@animation.done)="onAnimationEnd($event)">\n            <div #content class="p-confirm-popup-content">\n                <i [ngClass]="\'p-confirm-popup-icon\'" [class]="confirmation.icon" *ngIf="confirmation.icon"></i>\n                <span class="p-confirm-popup-message">{{confirmation.message}}</span>\n            </div>\n            <div class="p-confirm-popup-footer">\n                <button type="button" pButton [icon]="confirmation.rejectIcon" [label]="rejectButtonLabel" (click)="reject()" [ngClass]="\'p-confirm-popup-reject p-button-sm\'"\n                    [class]="confirmation.rejectButtonStyleClass || \'p-button-text\'" *ngIf="confirmation.rejectVisible !== false" [attr.aria-label]="rejectButtonLabel"></button>\n                <button type="button" pButton [icon]="confirmation.acceptIcon" [label]="acceptButtonLabel" (click)="accept()" [ngClass]="\'p-confirm-popup-accept p-button-sm\'"\n                    [class]="confirmation.acceptButtonStyleClass" *ngIf="confirmation.acceptVisible !== false" [attr.aria-label]="acceptButtonLabel"></button>\n            </div>\n        </div>\n    ',animations:[trigger("animation",[state("void",style({transform:"scaleY(0.8)",opacity:0})),state("open",style({transform:"translateY(0)",opacity:1})),transition("void => open",animate("{{showTransitionParams}}")),transition("open => void",animate("{{hideTransitionParams}}"))])],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:['.p-confirm-popup{margin-top:10px;position:absolute}.p-confirm-popup-flipped{margin-bottom:10px;margin-top:0}.p-confirm-popup:after,.p-confirm-popup:before{bottom:100%;content:" ";height:0;left:calc(var(--overlayArrowLeft, 0) + 1.25rem);pointer-events:none;position:absolute;width:0}.p-confirm-popup:after{border-width:8px;margin-left:-8px}.p-confirm-popup:before{border-width:10px;margin-left:-10px}.p-confirm-popup-flipped:after,.p-confirm-popup-flipped:before{bottom:auto;top:100%}.p-confirm-popup.p-confirm-popup-flipped:after,.p-confirm-popup.p-confirm-popup-flipped:before{border-bottom-color:transparent}.p-confirm-popup .p-confirm-popup-content{align-items:center;display:flex}']}]}],ConfirmPopup.ctorParameters=(()=>[{type:ElementRef},{type:ConfirmationService},{type:Renderer2},{type:ChangeDetectorRef},{type:PrimeNGConfig}]),ConfirmPopup.propDecorators={key:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],visible:[{type:Input}]};class ConfirmPopupModule{}ConfirmPopupModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,ButtonModule],exports:[ConfirmPopup],declarations:[ConfirmPopup]}]}];export{ConfirmPopup,ConfirmPopupModule};