import{Component,ViewEncapsulation,Inject,forwardRef,Input,EventEmitter,ChangeDetectionStrategy,ElementRef,Renderer2,ChangeDetectorRef,ViewChild,Output,NgModule}from"@angular/core";import{trigger,transition,style,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{DomHandler,ConnectedOverlayScrollHandler}from"primeng/dom";import{RouterModule}from"@angular/router";import{RippleModule}from"primeng/ripple";class MenuItemContent{constructor(e){this.menu=e}}MenuItemContent.decorators=[{type:Component,args:[{selector:"[pMenuItemContent]",template:'\n        <a *ngIf="!item.routerLink" [attr.href]="item.url||null" class="p-menuitem-link" [attr.tabindex]="item.disabled ? null : \'0\'" [attr.data-automationid]="item.automationId" [attr.target]="item.target" [attr.title]="item.title" [attr.id]="item.id"\n            [ngClass]="{\'p-disabled\':item.disabled}" (click)="menu.itemClick($event, item)" role="menuitem">\n            <span class="p-menuitem-icon" *ngIf="item.icon" [ngClass]="item.icon"></span>\n            <span class="p-menuitem-text" *ngIf="item.escape !== false; else htmlLabel">{{item.label}}</span>\n            <ng-template #htmlLabel><span class="p-menuitem-text" [innerHTML]="item.label"></span></ng-template>\n        </a>\n        <a *ngIf="item.routerLink" [routerLink]="item.routerLink" [attr.data-automationid]="item.automationId" [queryParams]="item.queryParams" [routerLinkActive]="\'p-menuitem-link-active\'"\n            [routerLinkActiveOptions]="item.routerLinkActiveOptions||{exact:false}" class="p-menuitem-link" [attr.target]="item.target" [attr.id]="item.id" [attr.tabindex]="item.disabled ? null : \'0\'"\n            [attr.title]="item.title" [ngClass]="{\'p-disabled\':item.disabled}" (click)="menu.itemClick($event, item)" role="menuitem" pRipple\n            [fragment]="item.fragment" [queryParamsHandling]="item.queryParamsHandling" [preserveFragment]="item.preserveFragment" [skipLocationChange]="item.skipLocationChange" [replaceUrl]="item.replaceUrl" [state]="item.state">\n            <span class="p-menuitem-icon" *ngIf="item.icon" [ngClass]="item.icon"></span>\n            <span class="p-menuitem-text" *ngIf="item.escape !== false; else htmlRouteLabel">{{item.label}}</span>\n            <ng-template #htmlRouteLabel><span class="p-menuitem-text" [innerHTML]="item.label"></span></ng-template>\n        </a>\n    ',encapsulation:ViewEncapsulation.None}]}],MenuItemContent.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>Menu)]}]}]),MenuItemContent.propDecorators={item:[{type:Input,args:["pMenuItemContent"]}]};class Menu{constructor(e,t,n){this.el=e,this.renderer=t,this.cd=n,this.autoZIndex=!0,this.baseZIndex=0,this.showTransitionOptions=".12s cubic-bezier(0, 0, 0.2, 1)",this.hideTransitionOptions=".1s linear",this.onShow=new EventEmitter,this.onHide=new EventEmitter}toggle(e){this.visible?this.hide():this.show(e),this.preventDocumentDefault=!0}show(e){this.target=e.currentTarget,this.relativeAlign=e.relativeAlign,this.visible=!0,this.preventDocumentDefault=!0,this.cd.markForCheck()}onOverlayAnimationStart(e){switch(e.toState){case"visible":this.popup&&(this.container=e.element,this.moveOnTop(),this.onShow.emit({}),this.appendOverlay(),this.alignOverlay(),this.bindDocumentClickListener(),this.bindDocumentResizeListener(),this.bindScrollListener());break;case"void":this.onOverlayHide(),this.onHide.emit({})}}alignOverlay(){this.relativeAlign?DomHandler.relativePosition(this.container,this.target):DomHandler.absolutePosition(this.container,this.target)}appendOverlay(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.container):DomHandler.appendChild(this.container,this.appendTo))}restoreOverlayAppend(){this.container&&this.appendTo&&this.el.nativeElement.appendChild(this.container)}moveOnTop(){this.autoZIndex&&(this.container.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex))}hide(){this.visible=!1,this.relativeAlign=!1,this.cd.markForCheck()}onWindowResize(){this.hide()}itemClick(e,t){t.disabled?e.preventDefault():(t.url||e.preventDefault(),t.command&&t.command({originalEvent:e,item:t}),this.popup&&this.hide())}bindDocumentClickListener(){if(!this.documentClickListener){const e=this.el?this.el.nativeElement.ownerDocument:"document";this.documentClickListener=this.renderer.listen(e,"click",()=>{this.preventDocumentDefault||this.hide(),this.preventDocumentDefault=!1})}}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}bindScrollListener(){this.scrollHandler||(this.scrollHandler=new ConnectedOverlayScrollHandler(this.target,()=>{this.visible&&this.hide()})),this.scrollHandler.bindScrollListener()}unbindScrollListener(){this.scrollHandler&&this.scrollHandler.unbindScrollListener()}onOverlayHide(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener(),this.unbindScrollListener(),this.preventDocumentDefault=!1,this.target=null}ngOnDestroy(){this.popup&&(this.scrollHandler&&(this.scrollHandler.destroy(),this.scrollHandler=null),this.restoreOverlayAppend(),this.onOverlayHide())}hasSubMenu(){if(this.model)for(var e of this.model)if(e.items)return!0;return!1}}Menu.decorators=[{type:Component,args:[{selector:"p-menu",template:'\n        <div #container [ngClass]="{\'p-menu p-component\': true, \'p-menu-overlay\': popup}"\n            [class]="styleClass" [ngStyle]="style" (click)="preventDocumentDefault=true" *ngIf="!popup || visible"\n            [@overlayAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" [@.disabled]="popup !== true" (@overlayAnimation.start)="onOverlayAnimationStart($event)">\n            <ul class="p-menu-list p-reset">\n                <ng-template ngFor let-submenu [ngForOf]="model" *ngIf="hasSubMenu()">\n                    <li class="p-menu-separator" *ngIf="submenu.separator" [ngClass]="{\'p-hidden\': submenu.visible === false}"></li>\n                    <li class="p-submenu-header" [attr.data-automationid]="submenu.automationId" *ngIf="!submenu.separator" [ngClass]="{\'p-hidden\': submenu.visible === false}">\n                        <span *ngIf="submenu.escape !== false; else htmlSubmenuLabel">{{submenu.label}}</span>\n                        <ng-template #htmlSubmenuLabel><span [innerHTML]="submenu.label"></span></ng-template>\n                    </li>\n                    <ng-template ngFor let-item [ngForOf]="submenu.items">\n                        <li class="p-menu-separator" *ngIf="item.separator" [ngClass]="{\'p-hidden\': (item.visible === false ||Â submenu.visible === false)}"></li>\n                        <li class="p-menuitem" *ngIf="!item.separator" [pMenuItemContent]="item" [ngClass]="{\'p-hidden\': (item.visible === false || submenu.visible === false)}" [ngStyle]="item.style" [class]="item.styleClass"></li>\n                    </ng-template>\n                </ng-template>\n                <ng-template ngFor let-item [ngForOf]="model" *ngIf="!hasSubMenu()">\n                    <li class="p-menu-separator" *ngIf="item.separator" [ngClass]="{\'p-hidden\': item.visible === false}"></li>\n                    <li class="p-menuitem" *ngIf="!item.separator" [pMenuItemContent]="item" [ngClass]="{\'p-hidden\': item.visible === false}" [ngStyle]="item.style" [class]="item.styleClass"></li>\n                </ng-template>\n            </ul>\n        </div>\n    ',animations:[trigger("overlayAnimation",[transition(":enter",[style({opacity:0,transform:"scaleY(0.8)"}),animate("{{showTransitionParams}}")]),transition(":leave",[animate("{{hideTransitionParams}}",style({opacity:0}))])])],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-menu-overlay{position:absolute}.p-menu ul{list-style:none;margin:0;padding:0}.p-menu .p-menuitem-link{align-items:center;cursor:pointer;display:flex;overflow:hidden;position:relative;text-decoration:none}.p-menu .p-menuitem-text{line-height:1}"]}]}],Menu.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef}]),Menu.propDecorators={model:[{type:Input}],popup:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],appendTo:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}],containerViewChild:[{type:ViewChild,args:["container"]}],onShow:[{type:Output}],onHide:[{type:Output}]};class MenuModule{}MenuModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RouterModule,RippleModule],exports:[Menu,RouterModule],declarations:[Menu,MenuItemContent]}]}];export{Menu,MenuItemContent,MenuModule};