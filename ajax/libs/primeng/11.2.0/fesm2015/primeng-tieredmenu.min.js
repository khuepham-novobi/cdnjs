import{EventEmitter,Component,ViewEncapsulation,ElementRef,Renderer2,ChangeDetectorRef,Input,Output,ChangeDetectionStrategy,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{DomHandler,ConnectedOverlayScrollHandler}from"primeng/dom";import{RouterModule}from"@angular/router";import{RippleModule}from"primeng/ripple";import{trigger,transition,style,animate}from"@angular/animations";class TieredMenuSub{constructor(e,t,i){this.el=e,this.renderer=t,this.cd=i,this.autoZIndex=!0,this.baseZIndex=0,this.leafClick=new EventEmitter,this.keydownItem=new EventEmitter,this.menuHoverActive=!1}get parentActive(){return this._parentActive}set parentActive(e){this.root||(this._parentActive=e,e||(this.activeItem=null))}onItemClick(e,t){t.disabled?e.preventDefault():(t.url||t.routerLink||e.preventDefault(),t.command&&t.command({originalEvent:e,item:t}),t.items&&(this.activeItem&&t===this.activeItem?(this.activeItem=null,this.unbindDocumentClickListener()):(this.activeItem=t,this.root&&this.bindDocumentClickListener())),t.items||this.onLeafClick())}onItemMouseEnter(e,t){t.disabled||this.mobileActive?e.preventDefault():this.root?(this.activeItem||this.autoDisplay||this.popup)&&(this.activeItem=t,this.bindDocumentClickListener()):(this.activeItem=t,this.bindDocumentClickListener())}onLeafClick(){this.activeItem=null,this.root&&this.unbindDocumentClickListener(),this.leafClick.emit()}onItemKeyDown(e,t){let i=e.currentTarget.parentElement;switch(e.key){case"ArrowDown":var n=this.findNextItem(i);n&&n.children[0].focus(),e.preventDefault();break;case"ArrowUp":var s=this.findPrevItem(i);s&&s.children[0].focus(),e.preventDefault();break;case"ArrowRight":t.items&&(this.activeItem=t,this.root&&this.bindDocumentClickListener(),setTimeout(()=>{i.children[1].children[0].children[0].children[0].focus()},50)),e.preventDefault()}this.keydownItem.emit({originalEvent:e,element:i})}findNextItem(e){let t=e.nextElementSibling;return t?DomHandler.hasClass(t,"p-disabled")||!DomHandler.hasClass(t,"p-menuitem")?this.findNextItem(t):t:null}findPrevItem(e){let t=e.previousElementSibling;return t?DomHandler.hasClass(t,"p-disabled")||!DomHandler.hasClass(t,"p-menuitem")?this.findPrevItem(t):t:null}onChildItemKeyDown(e){"ArrowLeft"===e.originalEvent.key&&(this.activeItem=null,this.root&&this.unbindDocumentClickListener(),e.element.parentElement.parentElement.parentElement.children[0].focus())}bindDocumentClickListener(){this.documentClickListener||(this.documentClickListener=(e=>{this.el&&!this.el.nativeElement.contains(e.target)&&(this.activeItem=null,this.cd.markForCheck(),this.unbindDocumentClickListener())}),document.addEventListener("click",this.documentClickListener))}unbindDocumentClickListener(){this.documentClickListener&&(document.removeEventListener("click",this.documentClickListener),this.documentClickListener=null)}ngOnDestroy(){this.unbindDocumentClickListener()}}TieredMenuSub.decorators=[{type:Component,args:[{selector:"p-tieredMenuSub",template:'\n        <ul [ngClass]="{\'p-submenu-list\': !root}">\n            <ng-template ngFor let-child [ngForOf]="(root ? item : item.items)">\n                <li *ngIf="child.separator" class="p-menu-separator" [ngClass]="{\'p-hidden\': child.visible === false}">\n                <li *ngIf="!child.separator" #listItem [ngClass]="{\'p-menuitem\':true, \'p-menuitem-active\': child === activeItem, \'p-hidden\': child.visible === false}">\n                    <a *ngIf="!child.routerLink" (keydown)="onItemKeyDown($event, child)" [attr.href]="child.url" [attr.data-automationid]="child.automationId" [attr.target]="child.target" [attr.title]="child.title" [attr.id]="child.id" \n                         (click)="onItemClick($event, child)" (mouseenter)="onItemMouseEnter($event,child)" \n                         [ngClass]="{\'p-menuitem-link\':true,\'p-disabled\':child.disabled}" [ngStyle]="child.style" [class]="child.styleClass" \n                         [attr.tabindex]="child.disabled ? null : \'0\'" [attr.aria-haspopup]="item.items != null" [attr.aria-expanded]="item === activeItem" pRipple>\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text" *ngIf="child.escape !== false; else htmlLabel">{{child.label}}</span>\n                        <ng-template #htmlLabel><span class="p-menuitem-text" [innerHTML]="child.label"></span></ng-template>\n                        <span class="p-submenu-icon pi pi-angle-right" *ngIf="child.items"></span>\n                    </a>\n                    <a *ngIf="child.routerLink" (keydown)="onItemKeyDown($event, child)" [routerLink]="child.routerLink" [attr.data-automationid]="child.automationId" [queryParams]="child.queryParams" [routerLinkActive]="\'p-menuitem-link-active\'" [routerLinkActiveOptions]="child.routerLinkActiveOptions||{exact:false}"\n                        [attr.target]="child.target" [attr.title]="child.title" [attr.id]="child.id" [attr.tabindex]="child.disabled ? null : \'0\'" role="menuitem"\n                        (click)="onItemClick($event, child)" (mouseenter)="onItemMouseEnter($event,child)"  [ngClass]="{\'p-menuitem-link\':true,\'p-disabled\':child.disabled}" [ngStyle]="child.style" [class]="child.styleClass"\n                        [fragment]="child.fragment" [queryParamsHandling]="child.queryParamsHandling" [preserveFragment]="child.preserveFragment" [skipLocationChange]="child.skipLocationChange" [replaceUrl]="child.replaceUrl" [state]="child.state" pRipple>\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text" *ngIf="child.escape !== false; else htmlRouteLabel">{{child.label}}</span>\n                        <ng-template #htmlRouteLabel><span class="p-menuitem-text" [innerHTML]="child.label"></span></ng-template>\n                        <span class="p-submenu-icon pi pi-angle-right" *ngIf="child.items"></span>\n                    </a>\n                    <p-tieredMenuSub (keydownItem)="onChildItemKeyDown($event)" [parentActive]="child === activeItem" [item]="child" *ngIf="child.items" [mobileActive]="mobileActive" [autoDisplay]="autoDisplay" (leafClick)="onLeafClick()" [popup]="popup"></p-tieredMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    ',encapsulation:ViewEncapsulation.None}]}],TieredMenuSub.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef}]),TieredMenuSub.propDecorators={item:[{type:Input}],root:[{type:Input}],autoDisplay:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],mobileActive:[{type:Input}],popup:[{type:Input}],parentActive:[{type:Input}],leafClick:[{type:Output}],keydownItem:[{type:Output}]};class TieredMenu{constructor(e,t,i){this.el=e,this.renderer=t,this.cd=i,this.autoZIndex=!0,this.baseZIndex=0,this.showTransitionOptions=".12s cubic-bezier(0, 0, 0.2, 1)",this.hideTransitionOptions=".1s linear"}toggle(e){this.visible?this.hide():this.show(e),this.preventDocumentDefault=!0}show(e){this.target=e.currentTarget,this.visible=!0,this.parentActive=!0,this.preventDocumentDefault=!0,this.cd.markForCheck()}onOverlayAnimationStart(e){switch(e.toState){case"visible":this.popup&&(this.container=e.element,this.moveOnTop(),this.appendOverlay(),DomHandler.absolutePosition(this.container,this.target),this.bindDocumentClickListener(),this.bindDocumentResizeListener(),this.bindScrollListener());break;case"void":this.onOverlayHide()}}appendOverlay(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.container):DomHandler.appendChild(this.container,this.appendTo))}restoreOverlayAppend(){this.container&&this.appendTo&&this.el.nativeElement.appendChild(this.container)}moveOnTop(){this.autoZIndex&&(this.container.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex))}hide(){this.visible=!1,this.parentActive=!1,this.cd.markForCheck()}onWindowResize(){this.hide()}onLeafClick(){this.popup&&this.hide(),this.unbindDocumentClickListener()}bindDocumentClickListener(){if(!this.documentClickListener){const e=this.el?this.el.nativeElement.ownerDocument:"document";this.documentClickListener=this.renderer.listen(e,"click",()=>{!this.preventDocumentDefault&&this.popup&&this.hide(),this.preventDocumentDefault=!1})}}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}bindScrollListener(){this.scrollHandler||(this.scrollHandler=new ConnectedOverlayScrollHandler(this.target,()=>{this.visible&&this.hide()})),this.scrollHandler.bindScrollListener()}unbindScrollListener(){this.scrollHandler&&this.scrollHandler.unbindScrollListener()}onOverlayHide(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener(),this.unbindScrollListener(),this.preventDocumentDefault=!1,this.target=null}ngOnDestroy(){this.popup&&(this.scrollHandler&&(this.scrollHandler.destroy(),this.scrollHandler=null),this.restoreOverlayAppend(),this.onOverlayHide())}}TieredMenu.decorators=[{type:Component,args:[{selector:"p-tieredMenu",template:'\n        <div [ngClass]="{\'p-tieredmenu p-component\':true, \'p-tieredmenu-overlay\':popup}" [class]="styleClass" [ngStyle]="style"\n            [@overlayAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" [@.disabled]="popup !== true"\n            (@overlayAnimation.start)="onOverlayAnimationStart($event)" (click)="preventDocumentDefault=true" *ngIf="!popup || visible">\n            <p-tieredMenuSub [item]="model" root="root" [parentActive]="parentActive" [baseZIndex]="baseZIndex" [autoZIndex]="autoZIndex" (leafClick)="onLeafClick()" \n                [autoDisplay]="autoDisplay" [popup]="popup"></p-tieredMenuSub>\n        </div>\n    ',animations:[trigger("overlayAnimation",[transition(":enter",[style({opacity:0,transform:"scaleY(0.8)"}),animate("{{showTransitionParams}}")]),transition(":leave",[animate("{{hideTransitionParams}}",style({opacity:0}))])])],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-tieredmenu-overlay{position:absolute}.p-tieredmenu ul{list-style:none;margin:0;padding:0}.p-tieredmenu .p-submenu-list{display:none;min-width:100%;position:absolute;z-index:1}.p-tieredmenu .p-menuitem-link{align-items:center;cursor:pointer;display:flex;overflow:hidden;position:relative;text-decoration:none}.p-tieredmenu .p-menuitem-text{line-height:1}.p-tieredmenu .p-menuitem{position:relative}.p-tieredmenu .p-menuitem-link .p-submenu-icon{margin-left:auto}.p-tieredmenu .p-menuitem-active>p-tieredmenusub>.p-submenu-list{display:block;left:100%;top:0}"]}]}],TieredMenu.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef}]),TieredMenu.propDecorators={model:[{type:Input}],popup:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],appendTo:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],autoDisplay:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}]};class TieredMenuModule{}TieredMenuModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RouterModule,RippleModule],exports:[TieredMenu,RouterModule],declarations:[TieredMenu,TieredMenuSub]}]}];export{TieredMenu,TieredMenuModule,TieredMenuSub};