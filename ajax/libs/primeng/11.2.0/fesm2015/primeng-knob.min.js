import{forwardRef,EventEmitter,Component,ChangeDetectionStrategy,ViewEncapsulation,ChangeDetectorRef,ElementRef,Input,Output,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{NG_VALUE_ACCESSOR}from"@angular/forms";const KNOB_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Knob),multi:!0};class Knob{constructor(t,e){this.cd=t,this.el=e,this.valueColor="var(--primary-color, Black)",this.rangeColor="var(--surface-d, LightGray)",this.textColor="var(--text-color-secondary, Black)",this.valueTemplate="{value}",this.size=100,this.step=1,this.min=0,this.max=100,this.strokeWidth=14,this.showValue=!0,this.readonly=!1,this.onChange=new EventEmitter,this.radius=40,this.midX=50,this.midY=50,this.minRadians=4*Math.PI/3,this.maxRadians=-Math.PI/3,this.value=null,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}mapRange(t,e,i,s,n){return(t-e)*(n-s)/(i-e)+s}onClick(t){this.disabled||this.readonly||this.updateValue(t.offsetX,t.offsetY)}updateValue(t,e){let i=t-this.size/2,s=this.size/2-e,n=Math.atan2(s,i),a=-Math.PI/2-Math.PI/6;this.updateModel(n,a)}updateModel(t,e){let i;if(t>this.maxRadians)i=this.mapRange(t,this.minRadians,this.maxRadians,this.min,this.max);else{if(!(t<e))return;i=this.mapRange(t+2*Math.PI,this.minRadians,this.maxRadians,this.min,this.max)}let s=Math.round((i-this.min)/this.step)*this.step+this.min;this.value=s,this.onModelChange(this.value),this.onChange.emit(this.value)}onMouseDown(t){this.disabled||this.readonly||(this.windowMouseMoveListener=this.onMouseMove.bind(this),this.windowMouseUpListener=this.onMouseUp.bind(this),window.addEventListener("mousemove",this.windowMouseMoveListener),window.addEventListener("mouseup",this.windowMouseUpListener),t.preventDefault())}onMouseUp(t){this.disabled||this.readonly||(window.removeEventListener("mousemove",this.windowMouseMoveListener),window.removeEventListener("mouseup",this.windowMouseUpListener),this.windowMouseUpListener=null,this.windowMouseMoveListener=null,t.preventDefault())}onTouchStart(t){this.disabled||this.readonly||(this.windowTouchMoveListener=this.onTouchMove.bind(this),this.windowTouchEndListener=this.onTouchEnd.bind(this),window.addEventListener("touchmove",this.windowTouchMoveListener),window.addEventListener("touchend",this.windowTouchEndListener),t.preventDefault())}onTouchEnd(t){this.disabled||this.readonly||(window.removeEventListener("touchmove",this.windowTouchMoveListener),window.removeEventListener("touchend",this.windowTouchEndListener),this.windowTouchMoveListener=null,this.windowTouchEndListener=null,t.preventDefault())}onMouseMove(t){this.disabled||this.readonly||(this.updateValue(t.offsetX,t.offsetY),t.preventDefault())}onTouchMove(t){if(!this.disabled&&!this.readonly&&1==t.touches.length){const e=this.el.nativeElement.children[0].getBoundingClientRect(),i=t.targetTouches.item(0),s=i.clientX-e.left,n=i.clientY-e.top;this.updateValue(s,n)}}writeValue(t){this.value=t,this.cd.markForCheck()}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t,this.cd.markForCheck()}containerClass(){return{"p-knob p-component":!0,"p-disabled":this.disabled}}rangePath(){return`M ${this.minX()} ${this.minY()} A ${this.radius} ${this.radius} 0 1 1 ${this.maxX()} ${this.maxY()}`}valuePath(){return`M ${this.zeroX()} ${this.zeroY()} A ${this.radius} ${this.radius} 0 ${this.largeArc()} ${this.sweep()} ${this.valueX()} ${this.valueY()}`}zeroRadians(){return this.min>0&&this.max>0?this.mapRange(this.min,this.min,this.max,this.minRadians,this.maxRadians):this.mapRange(0,this.min,this.max,this.minRadians,this.maxRadians)}valueRadians(){return this.mapRange(this._value,this.min,this.max,this.minRadians,this.maxRadians)}minX(){return this.midX+Math.cos(this.minRadians)*this.radius}minY(){return this.midY-Math.sin(this.minRadians)*this.radius}maxX(){return this.midX+Math.cos(this.maxRadians)*this.radius}maxY(){return this.midY-Math.sin(this.maxRadians)*this.radius}zeroX(){return this.midX+Math.cos(this.zeroRadians())*this.radius}zeroY(){return this.midY-Math.sin(this.zeroRadians())*this.radius}valueX(){return this.midX+Math.cos(this.valueRadians())*this.radius}valueY(){return this.midY-Math.sin(this.valueRadians())*this.radius}largeArc(){return Math.abs(this.zeroRadians()-this.valueRadians())<Math.PI?0:1}sweep(){return this.valueRadians()>this.zeroRadians()?0:1}valueToDisplay(){return this.valueTemplate.replace("{value}",this._value.toString())}get _value(){return null!=this.value?this.value:this.min}}Knob.decorators=[{type:Component,args:[{selector:"p-knob",template:'\n        <div [ngClass]="containerClass()" [class]="styleClass" [ngStyle]="style">\n        <svg viewBox="0 0 100 100" [style.width]="size + \'px\'" [style.height]="size + \'px\'" (click)="onClick($event)" (mousedown)="onMouseDown($event)" (mouseup)="onMouseUp($event)"\n            (touchstart)="onTouchStart($event)" (touchend)="onTouchEnd($event)">\n            <path [attr.d]="rangePath()" [attr.stroke-width]="strokeWidth" [attr.stroke]="rangeColor" class="p-knob-range"></path>\n            <path [attr.d]="valuePath()" [attr.stroke-width]="strokeWidth" [attr.stroke]="valueColor" class="p-knob-value"></path>\n            <text *ngIf="showValue" [attr.x]="50" [attr.y]="57" text-anchor="middle" [attr.fill]="textColor" class="p-knob-text" [attr.name]="name">{{valueToDisplay()}}</text>\n        </svg>\n        </div>\n    ',providers:[KNOB_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:["@keyframes dash-frame{to{stroke-dashoffset:0}}.p-knob-range{fill:none;transition:stroke .1s ease-in}.p-knob-value{animation-fill-mode:forwards;animation-name:dash-frame;fill:none}.p-knob-text{font-size:1.3rem;text-align:center}"]}]}],Knob.ctorParameters=(()=>[{type:ChangeDetectorRef},{type:ElementRef}]),Knob.propDecorators={styleClass:[{type:Input}],style:[{type:Input}],severity:[{type:Input}],valueColor:[{type:Input}],rangeColor:[{type:Input}],textColor:[{type:Input}],valueTemplate:[{type:Input}],name:[{type:Input}],size:[{type:Input}],step:[{type:Input}],min:[{type:Input}],max:[{type:Input}],strokeWidth:[{type:Input}],disabled:[{type:Input}],showValue:[{type:Input}],readonly:[{type:Input}],onChange:[{type:Output}]};class KnobModule{}KnobModule.decorators=[{type:NgModule,args:[{imports:[CommonModule],exports:[Knob],declarations:[Knob]}]}];export{KNOB_VALUE_ACCESSOR,Knob,KnobModule};