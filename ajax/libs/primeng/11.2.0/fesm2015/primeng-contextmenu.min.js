import{EventEmitter,Component,ViewEncapsulation,Inject,forwardRef,Input,Output,ViewChild,ChangeDetectionStrategy,ElementRef,Renderer2,ChangeDetectorRef,NgZone,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{ContextMenuService}from"primeng/api";import{RippleModule}from"primeng/ripple";import{RouterModule}from"@angular/router";import{Subject}from"rxjs";import{takeUntil}from"rxjs/operators";class ContextMenuSub{constructor(e){this.leafClick=new EventEmitter,this.contextMenu=e}ngOnInit(){this.activeItemKeyChangeSubscription=this.contextMenu.contextMenuService.activeItemKeyChange$.pipe(takeUntil(this.contextMenu.ngDestroy$)).subscribe(e=>{this.activeItemKey=e,this.isActive(this.parentItemKey)&&DomHandler.hasClass(this.sublistViewChild.nativeElement,"p-submenu-list-active")&&this.contextMenu.positionSubmenu(this.sublistViewChild.nativeElement),this.contextMenu.cd.markForCheck()})}onItemMouseEnter(e,t,n){if(this.hideTimeout&&(clearTimeout(this.hideTimeout),this.hideTimeout=null),!t.disabled){if(t.items){let t=DomHandler.findSingle(e.currentTarget,".p-submenu-list");DomHandler.addClass(t,"p-submenu-list-active")}this.contextMenu.contextMenuService.changeKey(n)}}onItemMouseLeave(e,t){t.disabled||this.contextMenu.el.nativeElement.contains(e.toElement)&&(t.items&&this.contextMenu.removeActiveFromSubLists(e.currentTarget),this.root||this.contextMenu.contextMenuService.changeKey(this.parentItemKey))}onItemClick(e,t,n,i){if(t.disabled)e.preventDefault();else{if(t.url||t.routerLink||e.preventDefault(),t.command&&t.command({originalEvent:e,item:t}),t.items){let e=DomHandler.findSingle(n,".p-submenu-list");e&&(this.isActive(i)&&DomHandler.hasClass(e,"p-submenu-list-active")?this.contextMenu.removeActiveFromSubLists(n):DomHandler.addClass(e,"p-submenu-list-active"),this.contextMenu.contextMenuService.changeKey(i))}t.items||this.onLeafClick()}}onLeafClick(){this.root&&this.contextMenu.hide(),this.leafClick.emit()}getKey(e){return this.root?String(e):this.parentItemKey+"_"+e}isActive(e){return this.activeItemKey&&this.activeItemKey.startsWith(e)}}ContextMenuSub.decorators=[{type:Component,args:[{selector:"p-contextMenuSub",template:'\n        <ul #sublist [ngClass]="{\'p-submenu-list\':!root}">\n            <ng-template ngFor let-child let-index="index" [ngForOf]="(root ? item : item.items)">\n                <li *ngIf="child.separator" #menuitem class="p-menu-separator" [ngClass]="{\'p-hidden\': child.visible === false}" role="separator">\n                <li *ngIf="!child.separator" #menuitem [ngClass]="{\'p-menuitem\':true,\'p-menuitem-active\': isActive(getKey(index)),\'p-hidden\': child.visible === false}"\n                    (mouseenter)="onItemMouseEnter($event,child,getKey(index))" (mouseleave)="onItemMouseLeave($event,child)" role="none" [attr.data-ik]="getKey(index)">\n                    <a *ngIf="!child.routerLink" [attr.href]="child.url ? child.url : null" [attr.target]="child.target" [attr.title]="child.title" [attr.id]="child.id" [attr.tabindex]="child.disabled ? null : \'0\'" (click)="onItemClick($event, child, menuitem, getKey(index))"\n                        [ngClass]="{\'p-menuitem-link\':true,\'p-disabled\':child.disabled}" [ngStyle]="child.style" [class]="child.styleClass" pRipple\n                        [attr.aria-haspopup]="item.items != null" [attr.aria-expanded]="isActive(getKey(index))">\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text" *ngIf="child.escape !== false; else htmlLabel">{{child.label}}</span>\n                        <ng-template #htmlLabel><span class="p-menuitem-text" [innerHTML]="child.label"></span></ng-template>\n                        <span class="p-submenu-icon pi pi-angle-right" *ngIf="child.items"></span>\n                    </a>\n                    <a *ngIf="child.routerLink" [routerLink]="child.routerLink" [queryParams]="child.queryParams" [routerLinkActive]="\'p-menuitem-link-active\'" role="menuitem"\n                        [routerLinkActiveOptions]="child.routerLinkActiveOptions||{exact:false}" [attr.target]="child.target" [attr.title]="child.title" [attr.id]="child.id" [attr.tabindex]="child.disabled ? null : \'0\'"\n                        (click)="onItemClick($event, child, menuitem, getKey(index))" [ngClass]="{\'p-menuitem-link\':true,\'p-disabled\':child.disabled}"\n                        [ngStyle]="child.style" [class]="child.styleClass" pRipple\n                        [fragment]="child.fragment" [queryParamsHandling]="child.queryParamsHandling" [preserveFragment]="child.preserveFragment" [skipLocationChange]="child.skipLocationChange" [replaceUrl]="child.replaceUrl" [state]="child.state">\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text" *ngIf="child.escape !== false; else htmlRouteLabel">{{child.label}}</span>\n                        <ng-template #htmlRouteLabel><span class="p-menuitem-text" [innerHTML]="child.label"></span></ng-template>\n                        <span class="p-submenu-icon pi pi-angle-right" *ngIf="child.items"></span>\n                    </a>\n                    <p-contextMenuSub [parentItemKey]="getKey(index)" [item]="child" *ngIf="child.items" (leafClick)="onLeafClick()"></p-contextMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    ',encapsulation:ViewEncapsulation.None}]}],ContextMenuSub.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>ContextMenu)]}]}]),ContextMenuSub.propDecorators={item:[{type:Input}],root:[{type:Input}],parentItemKey:[{type:Input}],leafClick:[{type:Output}],sublistViewChild:[{type:ViewChild,args:["sublist"]}],menuitemViewChild:[{type:ViewChild,args:["menuitem"]}]};class ContextMenu{constructor(e,t,n,i,s){this.el=e,this.renderer=t,this.cd=n,this.zone=i,this.contextMenuService=s,this.autoZIndex=!0,this.baseZIndex=0,this.triggerEvent="contextmenu",this.onShow=new EventEmitter,this.onHide=new EventEmitter,this.ngDestroy$=new Subject}ngAfterViewInit(){if(this.global){const e=this.el?this.el.nativeElement.ownerDocument:"document";this.triggerEventListener=this.renderer.listen(e,this.triggerEvent,e=>{this.show(e),e.preventDefault()})}else this.target&&(this.triggerEventListener=this.renderer.listen(this.target,this.triggerEvent,e=>{this.show(e),e.preventDefault(),e.stopPropagation()}));this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.containerViewChild.nativeElement):DomHandler.appendChild(this.containerViewChild.nativeElement,this.appendTo))}show(e){this.clearActiveItem(),this.position(e),this.moveOnTop(),this.containerViewChild.nativeElement.style.display="block",DomHandler.fadeIn(this.containerViewChild.nativeElement,250),this.bindGlobalListeners(),e&&e.preventDefault(),this.onShow.emit()}hide(){this.containerViewChild.nativeElement.style.display="none",this.unbindGlobalListeners(),this.onHide.emit()}moveOnTop(){this.autoZIndex&&(this.containerViewChild.nativeElement.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex))}toggle(e){this.containerViewChild.nativeElement.offsetParent?this.hide():this.show(e)}position(e){if(e){let t=e.pageX+1,n=e.pageY+1,i=this.containerViewChild.nativeElement.offsetParent?this.containerViewChild.nativeElement.offsetWidth:DomHandler.getHiddenElementOuterWidth(this.containerViewChild.nativeElement),s=this.containerViewChild.nativeElement.offsetParent?this.containerViewChild.nativeElement.offsetHeight:DomHandler.getHiddenElementOuterHeight(this.containerViewChild.nativeElement),l=DomHandler.getViewport();t+i-document.body.scrollLeft>l.width&&(t-=i),n+s-document.body.scrollTop>l.height&&(n-=s),t<document.body.scrollLeft&&(t=document.body.scrollLeft),n<document.body.scrollTop&&(n=document.body.scrollTop),this.containerViewChild.nativeElement.style.left=t+"px",this.containerViewChild.nativeElement.style.top=n+"px"}}positionSubmenu(e){let t=e.parentElement.parentElement,n=DomHandler.getViewport(),i=e.offsetParent?e.offsetWidth:DomHandler.getHiddenElementOuterWidth(e),s=e.offsetHeight?e.offsetHeight:DomHandler.getHiddenElementOuterHeight(e),l=DomHandler.getOuterWidth(t.children[0]),o=DomHandler.getOuterHeight(t.children[0]),r=DomHandler.getOffset(t.parentElement);e.style.zIndex=++DomHandler.zindex,parseInt(r.top)+o+s>n.height-DomHandler.calculateScrollbarHeight()?(e.style.removeProperty("top"),e.style.bottom="0px"):(e.style.removeProperty("bottom"),e.style.top="0px"),parseInt(r.left)+l+i>n.width-DomHandler.calculateScrollbarWidth()?e.style.left=-i+"px":e.style.left=l+"px"}isItemMatched(e){return DomHandler.hasClass(e,"p-menuitem")&&!DomHandler.hasClass(e.children[0],"p-disabled")}findNextItem(e,t){let n=e.nextElementSibling;if(n)return this.isItemMatched(n)?n:this.findNextItem(n,t);{let n=e.parentElement.children[0];return this.isItemMatched(n)?n:t?null:this.findNextItem(n,!0)}}findPrevItem(e,t){let n=e.previousElementSibling;if(n)return this.isItemMatched(n)?n:this.findPrevItem(n,t);{let n=e.parentElement.children[e.parentElement.children.length-1];return this.isItemMatched(n)?n:t?null:this.findPrevItem(n,!0)}}getActiveItem(){let e=this.contextMenuService.activeItemKey;return null==e?null:DomHandler.findSingle(this.containerViewChild.nativeElement,'.p-menuitem[data-ik="'+e+'"]')}clearActiveItem(){this.contextMenuService.activeItemKey&&(this.removeActiveFromSubLists(this.containerViewChild.nativeElement),this.contextMenuService.reset())}removeActiveFromSubLists(e){let t=DomHandler.find(e,".p-submenu-list-active");for(let e of t)DomHandler.removeClass(e,"p-submenu-list-active")}removeActiveFromSublist(e){if(e){DomHandler.findSingle(e,".p-submenu-list")&&DomHandler.hasClass(e,"p-submenu-list-active")&&DomHandler.removeClass(e,"p-submenu-list-active")}}bindGlobalListeners(){if(!this.documentClickListener){const e=this.el?this.el.nativeElement.ownerDocument:"document";this.documentClickListener=this.renderer.listen(e,"click",e=>{this.containerViewChild.nativeElement.offsetParent&&this.isOutsideClicked(e)&&2!==e.button&&this.hide()})}if(this.zone.runOutsideAngular(()=>{this.windowResizeListener||(this.windowResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.windowResizeListener))}),!this.documentKeydownListener){const e=this.el?this.el.nativeElement.ownerDocument:"document";this.documentKeydownListener=this.renderer.listen(e,"keydown",e=>{let t=this.getActiveItem();switch(e.key){case"ArrowDown":if(t)this.removeActiveFromSublist(t),t=this.findNextItem(t);else{let e=DomHandler.findSingle(this.containerViewChild.nativeElement,".p-menuitem-link").parentElement;t=this.isItemMatched(e)?e:this.findNextItem(e)}t&&this.contextMenuService.changeKey(t.getAttribute("data-ik")),e.preventDefault();break;case"ArrowUp":if(t)this.removeActiveFromSublist(t),t=this.findPrevItem(t);else{let e=DomHandler.findSingle(this.containerViewChild.nativeElement,"ul"),n=e.children[e.children.length-1];t=this.isItemMatched(n)?n:this.findPrevItem(n)}t&&this.contextMenuService.changeKey(t.getAttribute("data-ik")),e.preventDefault();break;case"ArrowRight":if(t){let e=DomHandler.findSingle(t,".p-submenu-list");e&&(DomHandler.addClass(e,"p-submenu-list-active"),(t=DomHandler.findSingle(e,".p-menuitem-link:not(.p-disabled)").parentElement)&&this.contextMenuService.changeKey(t.getAttribute("data-ik")))}e.preventDefault();break;case"ArrowLeft":if(t){let e=t.parentElement;e&&DomHandler.hasClass(e,"p-submenu-list-active")&&(DomHandler.removeClass(e,"p-submenu-list-active"),(t=e.parentElement.parentElement)&&this.contextMenuService.changeKey(t.getAttribute("data-ik")))}e.preventDefault();break;case"Escape":this.hide(),e.preventDefault();break;case"Enter":t&&this.handleItemClick(e,this.findModelItemFromKey(this.contextMenuService.activeItemKey),t),e.preventDefault()}})}}findModelItemFromKey(e){if(null==e||!this.model)return null;return e.split("_").reduce((e,t)=>e?e.items[t]:this.model[t],null)}handleItemClick(e,t,n){if(t&&!t.disabled){if(t.command&&t.command({originalEvent:e,item:t}),t.items){let e=DomHandler.findSingle(n,".p-submenu-list");e&&(DomHandler.hasClass(e,"p-submenu-list-active")?this.removeActiveFromSubLists(n):(DomHandler.addClass(e,"p-submenu-list-active"),this.positionSubmenu(e)))}t.items||this.hide()}}unbindGlobalListeners(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null),this.windowResizeListener&&(window.removeEventListener("resize",this.windowResizeListener),this.windowResizeListener=null),this.documentKeydownListener&&(this.documentKeydownListener(),this.documentKeydownListener=null)}onWindowResize(e){this.containerViewChild.nativeElement.offsetParent&&this.hide()}isOutsideClicked(e){return!(this.containerViewChild.nativeElement.isSameNode(e.target)||this.containerViewChild.nativeElement.contains(e.target))}ngOnDestroy(){this.unbindGlobalListeners(),this.triggerEventListener&&this.triggerEventListener(),this.appendTo&&this.el.nativeElement.appendChild(this.containerViewChild.nativeElement),this.ngDestroy$.next(!0),this.ngDestroy$.complete()}}ContextMenu.decorators=[{type:Component,args:[{selector:"p-contextMenu",template:'\n        <div #container [ngClass]="\'p-contextmenu p-component\'" [class]="styleClass" [ngStyle]="style">\n            <p-contextMenuSub [item]="model" [root]="true"></p-contextMenuSub>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-contextmenu{display:none;position:absolute}.p-contextmenu ul{list-style:none;margin:0;padding:0}.p-contextmenu .p-submenu-list{display:none;min-width:100%;position:absolute;z-index:1}.p-contextmenu .p-menuitem-link{align-items:center;cursor:pointer;display:flex;overflow:hidden;position:relative;text-decoration:none}.p-contextmenu .p-menuitem-text{line-height:1}.p-contextmenu .p-menuitem{position:relative}.p-contextmenu .p-menuitem-link .p-submenu-icon{margin-left:auto}.p-contextmenu .p-menuitem-active>p-contextmenusub>.p-submenu-list.p-submenu-list-active{display:block!important}"]}]}],ContextMenu.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef},{type:NgZone},{type:ContextMenuService}]),ContextMenu.propDecorators={model:[{type:Input}],global:[{type:Input}],target:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],appendTo:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],triggerEvent:[{type:Input}],onShow:[{type:Output}],onHide:[{type:Output}],containerViewChild:[{type:ViewChild,args:["container"]}]};class ContextMenuModule{}ContextMenuModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RouterModule,RippleModule],exports:[ContextMenu,RouterModule],declarations:[ContextMenu,ContextMenuSub],providers:[ContextMenuService]}]}];export{ContextMenu,ContextMenuModule,ContextMenuSub};