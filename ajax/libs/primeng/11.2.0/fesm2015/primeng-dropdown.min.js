import{CdkVirtualScrollViewport,ScrollingModule}from"@angular/cdk/scrolling";import{forwardRef,EventEmitter,Component,Input,Output,ChangeDetectionStrategy,ViewEncapsulation,ElementRef,Renderer2,ChangeDetectorRef,NgZone,ViewChild,ContentChildren,NgModule}from"@angular/core";import{trigger,transition,style,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{FilterService,PrimeTemplate,SharedModule}from"primeng/api";import{DomHandler,ConnectedOverlayScrollHandler}from"primeng/dom";import{ObjectUtils}from"primeng/utils";import{NG_VALUE_ACCESSOR}from"@angular/forms";import{TooltipModule}from"primeng/tooltip";import{RippleModule}from"primeng/ripple";const DROPDOWN_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Dropdown),multi:!0};class DropdownItem{constructor(){this.onClick=new EventEmitter}onOptionClick(e){this.onClick.emit({originalEvent:e,option:this.option})}}DropdownItem.decorators=[{type:Component,args:[{selector:"p-dropdownItem",template:'\n        <li (click)="onOptionClick($event)" role="option" pRipple\n            [attr.aria-label]="label" [attr.aria-selected]="selected"\n            [ngStyle]="{\'height\': itemSize + \'px\'}"\n            [ngClass]="{\'p-dropdown-item\':true, \'p-highlight\': selected, \'p-disabled\': disabled}">\n            <span *ngIf="!template">{{label||\'empty\'}}</span>\n            <ng-container *ngTemplateOutlet="template; context: {$implicit: option}"></ng-container>\n        </li>\n    '}]}],DropdownItem.propDecorators={option:[{type:Input}],selected:[{type:Input}],label:[{type:Input}],disabled:[{type:Input}],visible:[{type:Input}],itemSize:[{type:Input}],template:[{type:Input}],onClick:[{type:Output}]};class Dropdown{constructor(e,t,i,n,o){this.el=e,this.renderer=t,this.cd=i,this.zone=n,this.filterService=o,this.scrollHeight="200px",this.resetFilterOnHide=!1,this.dropdownIcon="pi pi-chevron-down",this.autoDisplayFirst=!0,this.emptyFilterMessage="No results found",this.autoZIndex=!0,this.baseZIndex=0,this.showTransitionOptions=".12s cubic-bezier(0, 0, 0.2, 1)",this.hideTransitionOptions=".1s linear",this.filterMatchMode="contains",this.tooltip="",this.tooltipPosition="right",this.tooltipPositionStyle="absolute",this.autofocusFilter=!0,this.onChange=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this.onClick=new EventEmitter,this.onShow=new EventEmitter,this.onHide=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{}),this.viewPortOffsetTop=0}get disabled(){return this._disabled}set disabled(e){e&&(this.focused=!1),this._disabled=e,this.cd.destroyed||this.cd.detectChanges()}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":this.itemTemplate=e.template;break;case"selectedItem":this.selectedItemTemplate=e.template;break;case"group":this.groupTemplate=e.template;break;default:this.itemTemplate=e.template}})}ngOnInit(){this.optionsToDisplay=this.options,this.updateSelectedOption(null)}get options(){return this._options}set options(e){this._options=e,this.optionsToDisplay=this._options,this.updateSelectedOption(this.value),this.optionsChanged=!0,this.updateFilledState(),this._filterValue&&this._filterValue.length&&this.activateFilter()}get filterValue(){return this._filterValue}set filterValue(e){this._filterValue=e,this.activateFilter()}ngAfterViewInit(){this.editable&&this.updateEditableLabel()}get label(){return this.selectedOption?this.getOptionLabel(this.selectedOption):null}updateEditableLabel(){this.editableInputViewChild&&this.editableInputViewChild.nativeElement&&(this.editableInputViewChild.nativeElement.value=this.selectedOption?this.getOptionLabel(this.selectedOption):this.value||"")}getOptionLabel(e){return this.optionLabel?ObjectUtils.resolveFieldData(e,this.optionLabel):null!=e.label?e.label:e}getOptionValue(e){return this.optionValue?ObjectUtils.resolveFieldData(e,this.optionValue):this.optionLabel?e:e.value}isOptionDisabled(e){return this.optionDisabled?ObjectUtils.resolveFieldData(e,this.optionDisabled):void 0!==e.disabled&&e.disabled}getOptionGroupLabel(e){return this.optionGroupLabel?ObjectUtils.resolveFieldData(e,this.optionGroupLabel):null!=e.label?e.label:e}getOptionGroupChildren(e){return this.optionGroupChildren?ObjectUtils.resolveFieldData(e,this.optionGroupChildren):e.items}onItemClick(e){const t=e.option;this.isOptionDisabled(t)||(this.selectItem(e,t),this.accessibleViewChild.nativeElement.focus()),setTimeout(()=>{this.hide(e)},150)}selectItem(e,t){this.selectedOption!=t&&(this.selectedOption=t,this.value=this.getOptionValue(t),this.filled=!0,this.onModelChange(this.value),this.updateEditableLabel(),this.onChange.emit({originalEvent:e.originalEvent,value:this.value}),this.virtualScroll&&setTimeout(()=>{this.viewPortOffsetTop=this.viewPort?this.viewPort.measureScrollOffset():0},1))}ngAfterViewChecked(){if(this.optionsChanged&&this.overlayVisible&&(this.optionsChanged=!1,this.virtualScroll&&this.updateVirtualScrollSelectedIndex(!0),this.zone.runOutsideAngular(()=>{setTimeout(()=>{this.alignOverlay()},1)})),this.selectedOptionUpdated&&this.itemsWrapper){if(this.virtualScroll&&this.viewPort){let e=this.viewPort.getRenderedRange();this.updateVirtualScrollSelectedIndex(!1),(e.start>this.virtualScrollSelectedIndex||e.end<this.virtualScrollSelectedIndex)&&this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex)}DomHandler.findSingle(this.overlay,"li.p-highlight")&&DomHandler.scrollInView(this.itemsWrapper,DomHandler.findSingle(this.overlay,"li.p-highlight")),this.selectedOptionUpdated=!1}}writeValue(e){this.filter&&this.resetFilter(),this.value=e,this.updateSelectedOption(e),this.updateEditableLabel(),this.updateFilledState(),this.cd.markForCheck()}resetFilter(){this._filterValue=null,this.filterViewChild&&this.filterViewChild.nativeElement&&(this.filterViewChild.nativeElement.value=""),this.optionsToDisplay=this.options}updateSelectedOption(e){this.selectedOption=this.findOption(e,this.optionsToDisplay),this.autoDisplayFirst&&!this.placeholder&&!this.selectedOption&&this.optionsToDisplay&&this.optionsToDisplay.length&&!this.editable&&(this.selectedOption=this.optionsToDisplay[0]),this.selectedOptionUpdated=!0}registerOnChange(e){this.onModelChange=e}registerOnTouched(e){this.onModelTouched=e}setDisabledState(e){this.disabled=e,this.cd.markForCheck()}onMouseclick(e){this.disabled||this.readonly||this.isInputClick(e)||(this.onClick.emit(e),this.accessibleViewChild.nativeElement.focus(),this.overlayVisible?this.hide(e):this.show(),this.cd.detectChanges())}isInputClick(e){return DomHandler.hasClass(e.target,"p-dropdown-clear-icon")||e.target.isSameNode(this.accessibleViewChild.nativeElement)||this.editableInputViewChild&&e.target.isSameNode(this.editableInputViewChild.nativeElement)}isOutsideClicked(e){return!(this.el.nativeElement.isSameNode(e.target)||this.el.nativeElement.contains(e.target)||this.overlay&&this.overlay.contains(e.target))}onEditableInputClick(){this.bindDocumentClickListener()}onEditableInputFocus(e){this.focused=!0,this.hide(e),this.onFocus.emit(e)}onEditableInputChange(e){this.value=e.target.value,this.updateSelectedOption(this.value),this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value})}show(){this.overlayVisible=!0}onOverlayAnimationStart(e){switch(e.toState){case"visible":this.overlay=e.element;let t=this.virtualScroll?".cdk-virtual-scroll-viewport":".p-dropdown-items-wrapper";if(this.itemsWrapper=DomHandler.findSingle(this.overlay,t),this.appendOverlay(),this.autoZIndex&&(this.overlay.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),this.alignOverlay(),this.bindDocumentClickListener(),this.bindDocumentResizeListener(),this.bindScrollListener(),this.options&&this.options.length&&!this.virtualScroll){let e=DomHandler.findSingle(this.itemsWrapper,".p-dropdown-item.p-highlight");e&&DomHandler.scrollInView(this.itemsWrapper,e)}this.filterViewChild&&this.filterViewChild.nativeElement&&(this.preventModelTouched=!0,this.autofocusFilter&&this.filterViewChild.nativeElement.focus()),this.onShow.emit(e);break;case"void":this.onOverlayHide()}}scrollToSelectedVirtualScrollElement(){this.virtualAutoScrolled||(this.viewPortOffsetTop?this.viewPort.scrollToOffset(this.viewPortOffsetTop):this.virtualScrollSelectedIndex>-1&&this.viewPort.scrollToIndex(this.virtualScrollSelectedIndex)),this.virtualAutoScrolled=!0}updateVirtualScrollSelectedIndex(e){this.selectedOption&&this.optionsToDisplay&&this.optionsToDisplay.length&&(e&&(this.viewPortOffsetTop=0),this.virtualScrollSelectedIndex=this.findOptionIndex(this.getOptionValue(this.selectedOption),this.optionsToDisplay))}appendOverlay(){this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.overlay):DomHandler.appendChild(this.overlay,this.appendTo),this.overlay.style.minWidth||(this.overlay.style.minWidth=DomHandler.getWidth(this.containerViewChild.nativeElement)+"px"))}restoreOverlayAppend(){this.overlay&&this.appendTo&&this.el.nativeElement.appendChild(this.overlay)}hide(e){this.overlayVisible=!1,this.filter&&this.resetFilterOnHide&&this.resetFilter(),this.virtualScroll&&(this.virtualAutoScrolled=!1),this.cd.markForCheck(),this.onHide.emit(e)}alignOverlay(){this.overlay&&(this.appendTo?DomHandler.absolutePosition(this.overlay,this.containerViewChild.nativeElement):DomHandler.relativePosition(this.overlay,this.containerViewChild.nativeElement))}onInputFocus(e){this.focused=!0,this.onFocus.emit(e)}onInputBlur(e){this.focused=!1,this.onBlur.emit(e),this.preventModelTouched||this.onModelTouched(),this.preventModelTouched=!1}findPrevEnabledOption(e){let t;if(this.optionsToDisplay&&this.optionsToDisplay.length){for(let i=e-1;0<=i;i--){let e=this.optionsToDisplay[i];if(!e.disabled){t=e;break}}if(!t)for(let i=this.optionsToDisplay.length-1;i>=e;i--){let e=this.optionsToDisplay[i];if(!this.isOptionDisabled(e)){t=e;break}}}return t}findNextEnabledOption(e){let t;if(this.optionsToDisplay&&this.optionsToDisplay.length){for(let i=e+1;e<this.optionsToDisplay.length-1;i++){let e=this.optionsToDisplay[i];if(!this.isOptionDisabled(e)){t=e;break}}if(!t)for(let i=0;i<e;i++){let e=this.optionsToDisplay[i];if(!this.isOptionDisabled(e)){t=e;break}}}return t}onKeydown(e,t){if(!this.readonly&&this.optionsToDisplay&&null!==this.optionsToDisplay.length)switch(e.which){case 40:if(!this.overlayVisible&&e.altKey)this.show();else if(this.group){let t=this.selectedOption?this.findOptionGroupIndex(this.getOptionValue(this.selectedOption),this.optionsToDisplay):-1;if(-1!==t){let i=t.itemIndex+1;i<this.getOptionGroupChildren(this.optionsToDisplay[t.groupIndex]).length?(this.selectItem(e,this.getOptionGroupChildren(this.optionsToDisplay[t.groupIndex])[i]),this.selectedOptionUpdated=!0):this.optionsToDisplay[t.groupIndex+1]&&(this.selectItem(e,this.getOptionGroupChildren(this.optionsToDisplay[t.groupIndex+1])[0]),this.selectedOptionUpdated=!0)}else this.selectItem(e,this.getOptionGroupChildren(this.optionsToDisplay[0])[0])}else{let t=this.selectedOption?this.findOptionIndex(this.getOptionValue(this.selectedOption),this.optionsToDisplay):-1,i=this.findNextEnabledOption(t);i&&(this.selectItem(e,i),this.selectedOptionUpdated=!0)}e.preventDefault();break;case 38:if(this.group){let t=this.selectedOption?this.findOptionGroupIndex(this.getOptionValue(this.selectedOption),this.optionsToDisplay):-1;if(-1!==t){let i=t.itemIndex-1;if(i>=0)this.selectItem(e,this.getOptionGroupChildren(this.optionsToDisplay[t.groupIndex])[i]),this.selectedOptionUpdated=!0;else if(i<0){let i=this.optionsToDisplay[t.groupIndex-1];i&&(this.selectItem(e,this.getOptionGroupChildren(i)[this.getOptionGroupChildren(i).length-1]),this.selectedOptionUpdated=!0)}}}else{let t=this.selectedOption?this.findOptionIndex(this.getOptionValue(this.selectedOption),this.optionsToDisplay):-1,i=this.findPrevEnabledOption(t);i&&(this.selectItem(e,i),this.selectedOptionUpdated=!0)}e.preventDefault();break;case 32:case 32:this.overlayVisible||(this.show(),e.preventDefault());break;case 13:(!this.filter||this.optionsToDisplay&&this.optionsToDisplay.length>0)&&this.hide(e),e.preventDefault();break;case 27:case 9:this.hide(e);break;default:t&&this.search(e)}}search(e){this.searchTimeout&&clearTimeout(this.searchTimeout);const t=e.key;let i;if(this.previousSearchChar=this.currentSearchChar,this.currentSearchChar=t,this.previousSearchChar===this.currentSearchChar?this.searchValue=this.currentSearchChar:this.searchValue=this.searchValue?this.searchValue+t:t,this.group){let e=this.selectedOption?this.findOptionGroupIndex(this.getOptionValue(this.selectedOption),this.optionsToDisplay):{groupIndex:0,itemIndex:0};i=this.searchOptionWithinGroup(e)}else{let e=this.selectedOption?this.findOptionIndex(this.getOptionValue(this.selectedOption),this.optionsToDisplay):-1;i=this.searchOption(++e)}i&&!this.isOptionDisabled(i)&&(this.selectItem(e,i),this.selectedOptionUpdated=!0),this.searchTimeout=setTimeout(()=>{this.searchValue=null},250)}searchOption(e){let t;return this.searchValue&&((t=this.searchOptionInRange(e,this.optionsToDisplay.length))||(t=this.searchOptionInRange(0,e))),t}searchOptionInRange(e,t){for(let i=e;i<t;i++){let e=this.optionsToDisplay[i];if(this.getOptionLabel(e).toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale))&&!this.isOptionDisabled(e))return e}return null}searchOptionWithinGroup(e){if(this.searchValue){for(let t=e.groupIndex;t<this.optionsToDisplay.length;t++)for(let i=e.groupIndex===t?e.itemIndex+1:0;i<this.getOptionGroupChildren(this.optionsToDisplay[t]).length;i++){let e=this.getOptionGroupChildren(this.optionsToDisplay[t])[i];if(this.getOptionLabel(e).toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale))&&!this.isOptionDisabled(e))return e}for(let t=0;t<=e.groupIndex;t++)for(let i=0;i<(e.groupIndex===t?e.itemIndex:this.getOptionGroupChildren(this.optionsToDisplay[t]).length);i++){let e=this.getOptionGroupChildren(this.optionsToDisplay[t])[i];if(this.getOptionLabel(e).toLocaleLowerCase(this.filterLocale).startsWith(this.searchValue.toLocaleLowerCase(this.filterLocale))&&!this.isOptionDisabled(e))return e}}return null}findOptionIndex(e,t){let i=-1;if(t)for(let n=0;n<t.length;n++)if(null==e&&null==this.getOptionValue(t[n])||ObjectUtils.equals(e,this.getOptionValue(t[n]),this.dataKey)){i=n;break}return i}findOptionGroupIndex(e,t){let i,n;if(t)for(let o=0;o<t.length&&(i=o,-1===(n=this.findOptionIndex(e,this.getOptionGroupChildren(t[o]))));o++);return-1!==n?{groupIndex:i,itemIndex:n}:-1}findOption(e,t,i){if(this.group&&!i){let i;if(t&&t.length)for(let n of t)if(i=this.findOption(e,this.getOptionGroupChildren(n),!0))break;return i}{let i=this.findOptionIndex(e,t);return-1!=i?t[i]:null}}onFilter(e){let t=e.target.value;t&&t.length?(this._filterValue=t,this.activateFilter()):(this._filterValue=null,this.optionsToDisplay=this.options),this.optionsChanged=!0}activateFilter(){let e=(this.filterBy||this.optionLabel||"label").split(",");if(this.options&&this.options.length){if(this.group){let t=[];for(let i of this.options){let n=this.filterService.filter(this.getOptionGroupChildren(i),e,this.filterValue,this.filterMatchMode,this.filterLocale);n&&n.length&&t.push({label:i.label,value:i.value,items:n})}this.optionsToDisplay=t}else this.optionsToDisplay=this.filterService.filter(this.options,e,this.filterValue,this.filterMatchMode,this.filterLocale);this.optionsChanged=!0}}applyFocus(){this.editable?DomHandler.findSingle(this.el.nativeElement,".p-dropdown-label.p-inputtext").focus():DomHandler.findSingle(this.el.nativeElement,"input[readonly]").focus()}focus(){this.applyFocus()}bindDocumentClickListener(){if(!this.documentClickListener){const e=this.el?this.el.nativeElement.ownerDocument:"document";this.documentClickListener=this.renderer.listen(e,"click",e=>{this.isOutsideClicked(e)&&(this.hide(e),this.unbindDocumentClickListener()),this.cd.markForCheck()})}}unbindDocumentClickListener(){this.documentClickListener&&(this.documentClickListener(),this.documentClickListener=null)}bindDocumentResizeListener(){this.documentResizeListener=this.onWindowResize.bind(this),window.addEventListener("resize",this.documentResizeListener)}unbindDocumentResizeListener(){this.documentResizeListener&&(window.removeEventListener("resize",this.documentResizeListener),this.documentResizeListener=null)}onWindowResize(){DomHandler.isAndroid()||this.hide(event)}bindScrollListener(){this.scrollHandler||(this.scrollHandler=new ConnectedOverlayScrollHandler(this.containerViewChild.nativeElement,e=>{this.overlayVisible&&this.hide(e)})),this.scrollHandler.bindScrollListener()}unbindScrollListener(){this.scrollHandler&&this.scrollHandler.unbindScrollListener()}updateFilledState(){this.filled=null!=this.selectedOption}clear(e){this.value=null,this.onModelChange(this.value),this.onChange.emit({originalEvent:e,value:this.value}),this.updateSelectedOption(this.value),this.updateEditableLabel(),this.updateFilledState()}onOverlayHide(){this.unbindDocumentClickListener(),this.unbindDocumentResizeListener(),this.unbindScrollListener(),this.overlay=null,this.itemsWrapper=null,this.onModelTouched()}ngOnDestroy(){this.scrollHandler&&(this.scrollHandler.destroy(),this.scrollHandler=null),this.restoreOverlayAppend(),this.onOverlayHide()}}Dropdown.decorators=[{type:Component,args:[{selector:"p-dropdown",template:'\n         <div #container [ngClass]="{\'p-dropdown p-component\':true,\n            \'p-disabled\':disabled, \'p-dropdown-open\':overlayVisible, \'p-focus\':focused, \'p-dropdown-clearable\': showClear && !disabled}"\n            (click)="onMouseclick($event)" [ngStyle]="style" [class]="styleClass">\n            <div class="p-hidden-accessible">\n                <input #in [attr.id]="inputId" type="text" [attr.aria-label]="label" readonly (focus)="onInputFocus($event)" aria-haspopup="listbox"\n                    aria-haspopup="listbox" [attr.aria-expanded]="overlayVisible" [attr.aria-labelledby]="ariaLabelledBy" (blur)="onInputBlur($event)" (keydown)="onKeydown($event, true)"\n                    [disabled]="disabled" [attr.tabindex]="tabindex" [attr.autofocus]="autofocus" role="listbox">\n            </div>\n            <span [ngClass]="{\'p-dropdown-label p-inputtext\':true,\'p-dropdown-label-empty\':(label == null || label.length === 0)}" *ngIf="!editable && (label != null)" [pTooltip]="tooltip" [tooltipPosition]="tooltipPosition" [positionStyle]="tooltipPositionStyle" [tooltipStyleClass]="tooltipStyleClass">\n                <ng-container *ngIf="!selectedItemTemplate">{{label||\'empty\'}}</ng-container>\n                <ng-container *ngTemplateOutlet="selectedItemTemplate; context: {$implicit: selectedOption}"></ng-container>\n            </span>\n            <span [ngClass]="{\'p-dropdown-label p-inputtext p-placeholder\':true,\'p-dropdown-label-empty\': (placeholder == null || placeholder.length === 0)}" *ngIf="!editable && (label == null)">{{placeholder||\'empty\'}}</span>\n            <input #editableInput type="text" [attr.maxlength]="maxlength" [attr.aria-label]="label" class="p-dropdown-label p-inputtext" *ngIf="editable" [disabled]="disabled" [attr.placeholder]="placeholder"\n                aria-haspopup="listbox" [attr.aria-expanded]="overlayVisible" (click)="onEditableInputClick()" (input)="onEditableInputChange($event)" (focus)="onEditableInputFocus($event)" (blur)="onInputBlur($event)">\n            <i class="p-dropdown-clear-icon pi pi-times" (click)="clear($event)" *ngIf="value != null && showClear && !disabled"></i>\n            <div class="p-dropdown-trigger" role="button" aria-haspopup="listbox" [attr.aria-expanded]="overlayVisible">\n                <span class="p-dropdown-trigger-icon" [ngClass]="dropdownIcon"></span>\n            </div>\n            <div *ngIf="overlayVisible" [ngClass]="\'p-dropdown-panel p-component\'" [@overlayAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}" (@overlayAnimation.start)="onOverlayAnimationStart($event)" [ngStyle]="panelStyle" [class]="panelStyleClass">\n                <div class="p-dropdown-header" *ngIf="filter" >\n                    <div class="p-dropdown-filter-container" (click)="$event.stopPropagation()">\n                        <input #filter type="text" autocomplete="off" [value]="filterValue||\'\'" class="p-dropdown-filter p-inputtext p-component" [attr.placeholder]="filterPlaceholder"\n                        (keydown.enter)="$event.preventDefault()" (keydown)="onKeydown($event, false)" (input)="onFilter($event)" [attr.aria-label]="ariaFilterLabel">\n                        <span class="p-dropdown-filter-icon pi pi-search"></span>\n                    </div>\n                </div>\n                <div class="p-dropdown-items-wrapper" [style.max-height]="virtualScroll ? \'auto\' : (scrollHeight||\'auto\')">\n                    <ul class="p-dropdown-items" role="listbox">\n                        <ng-container *ngIf="group">\n                            <ng-template ngFor let-optgroup [ngForOf]="optionsToDisplay">\n                                <li class="p-dropdown-item-group">\n                                    <span *ngIf="!groupTemplate">{{getOptionGroupLabel(optgroup)||\'empty\'}}</span>\n                                    <ng-container *ngTemplateOutlet="groupTemplate; context: {$implicit: optgroup}"></ng-container>\n                                </li>\n                                <ng-container *ngTemplateOutlet="itemslist; context: {$implicit: getOptionGroupChildren(optgroup), selectedOption: selectedOption}"></ng-container>\n                            </ng-template>\n                        </ng-container>\n                        <ng-container *ngIf="!group">\n                            <ng-container *ngTemplateOutlet="itemslist; context: {$implicit: optionsToDisplay, selectedOption: selectedOption}"></ng-container>\n                        </ng-container>\n                        <ng-template #itemslist let-options let-selectedOption="selectedOption">\n                            <ng-container *ngIf="!virtualScroll; else virtualScrollList">\n                                <ng-template ngFor let-option let-i="index" [ngForOf]="options">\n                                    <p-dropdownItem [option]="option" [selected]="selectedOption == option" [label]="getOptionLabel(option)" [disabled]="isOptionDisabled(option)"\n                                                    (onClick)="onItemClick($event)"\n                                                    [template]="itemTemplate"></p-dropdownItem>\n                                </ng-template>\n                            </ng-container>\n                            <ng-template #virtualScrollList>\n                                <cdk-virtual-scroll-viewport (scrolledIndexChange)="scrollToSelectedVirtualScrollElement()" #viewport [ngStyle]="{\'height\': scrollHeight}" [itemSize]="itemSize" *ngIf="virtualScroll && optionsToDisplay && optionsToDisplay.length">\n                                    <ng-container *cdkVirtualFor="let option of options; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd">\n                                        <p-dropdownItem [option]="option" [selected]="selectedOption == option" [label]="getOptionLabel(option)" [disabled]="isOptionDisabled(option)"\n                                                                   (onClick)="onItemClick($event)"\n                                                                   [template]="itemTemplate"></p-dropdownItem>\n                                    </ng-container>\n                                </cdk-virtual-scroll-viewport>\n                            </ng-template>\n                        </ng-template>\n                        <li *ngIf="filter && (!optionsToDisplay || (optionsToDisplay && optionsToDisplay.length === 0))" class="p-dropdown-empty-message">{{emptyFilterMessage}}</li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    ',animations:[trigger("overlayAnimation",[transition(":enter",[style({opacity:0,transform:"scaleY(0.8)"}),animate("{{showTransitionParams}}")]),transition(":leave",[animate("{{hideTransitionParams}}",style({opacity:0}))])])],host:{"[class.p-inputwrapper-filled]":"filled","[class.p-inputwrapper-focus]":"focused || overlayVisible"},providers:[DROPDOWN_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-dropdown{-ms-user-select:none;-webkit-user-select:none;cursor:pointer;display:inline-flex;position:relative;user-select:none}.p-dropdown-clear-icon{margin-top:-.5rem;position:absolute;top:50%}.p-dropdown-trigger{align-items:center;display:flex;flex-shrink:0;justify-content:center}.p-dropdown-label{cursor:pointer;display:block;flex:1 1 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;width:1%}.p-dropdown-label-empty{overflow:hidden;visibility:hidden}input.p-dropdown-label{cursor:default}.p-dropdown .p-dropdown-panel{min-width:100%}.p-dropdown-panel{position:absolute}.p-dropdown-items-wrapper{overflow:auto}.p-dropdown-item{cursor:pointer;font-weight:400;overflow:hidden;position:relative;white-space:nowrap}.p-dropdown-items{list-style-type:none;margin:0;padding:0}.p-dropdown-filter{width:100%}.p-dropdown-filter-container{position:relative}.p-dropdown-filter-icon{margin-top:-.5rem;position:absolute;top:50%}.p-fluid .p-dropdown{display:flex}.p-fluid .p-dropdown .p-dropdown-label{width:1%}"]}]}],Dropdown.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef},{type:NgZone},{type:FilterService}]),Dropdown.propDecorators={scrollHeight:[{type:Input}],filter:[{type:Input}],name:[{type:Input}],style:[{type:Input}],panelStyle:[{type:Input}],styleClass:[{type:Input}],panelStyleClass:[{type:Input}],readonly:[{type:Input}],required:[{type:Input}],editable:[{type:Input}],appendTo:[{type:Input}],tabindex:[{type:Input}],placeholder:[{type:Input}],filterPlaceholder:[{type:Input}],filterLocale:[{type:Input}],inputId:[{type:Input}],selectId:[{type:Input}],dataKey:[{type:Input}],filterBy:[{type:Input}],autofocus:[{type:Input}],resetFilterOnHide:[{type:Input}],dropdownIcon:[{type:Input}],optionLabel:[{type:Input}],optionValue:[{type:Input}],optionDisabled:[{type:Input}],optionGroupLabel:[{type:Input}],optionGroupChildren:[{type:Input}],autoDisplayFirst:[{type:Input}],group:[{type:Input}],showClear:[{type:Input}],emptyFilterMessage:[{type:Input}],virtualScroll:[{type:Input}],itemSize:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}],ariaFilterLabel:[{type:Input}],ariaLabelledBy:[{type:Input}],filterMatchMode:[{type:Input}],maxlength:[{type:Input}],tooltip:[{type:Input}],tooltipPosition:[{type:Input}],tooltipPositionStyle:[{type:Input}],tooltipStyleClass:[{type:Input}],autofocusFilter:[{type:Input}],onChange:[{type:Output}],onFocus:[{type:Output}],onBlur:[{type:Output}],onClick:[{type:Output}],onShow:[{type:Output}],onHide:[{type:Output}],containerViewChild:[{type:ViewChild,args:["container"]}],filterViewChild:[{type:ViewChild,args:["filter"]}],accessibleViewChild:[{type:ViewChild,args:["in"]}],viewPort:[{type:ViewChild,args:[CdkVirtualScrollViewport]}],editableInputViewChild:[{type:ViewChild,args:["editableInput"]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],disabled:[{type:Input}],options:[{type:Input}],filterValue:[{type:Input}]};class DropdownModule{}DropdownModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,SharedModule,ScrollingModule,TooltipModule,RippleModule],exports:[Dropdown,SharedModule,ScrollingModule],declarations:[Dropdown,DropdownItem]}]}];export{DROPDOWN_VALUE_ACCESSOR,Dropdown,DropdownItem,DropdownModule};