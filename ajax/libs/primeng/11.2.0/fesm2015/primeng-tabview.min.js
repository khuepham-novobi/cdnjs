import{Component,Inject,forwardRef,ViewContainerRef,ChangeDetectorRef,Input,ContentChildren,EventEmitter,ChangeDetectionStrategy,ViewEncapsulation,ElementRef,ViewChild,Output,NgModule}from"@angular/core";import{CommonModule}from"@angular/common";import{TooltipModule}from"primeng/tooltip";import{RippleModule}from"primeng/ripple";import{PrimeTemplate,SharedModule}from"primeng/api";import{DomHandler}from"primeng/dom";let idx=0;class TabPanel{constructor(e,t,n){this.viewContainer=t,this.cd=n,this.cache=!0,this.tooltipPosition="top",this.tooltipPositionStyle="absolute",this.id=`p-tabpanel-${idx++}`,this.tabView=e}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"header":this.headerTemplate=e.template;break;case"content":default:this.contentTemplate=e.template}})}get selected(){return this._selected}set selected(e){this._selected=e,this.loaded||this.cd.detectChanges(),e&&(this.loaded=!0)}get disabled(){return this._disabled}set disabled(e){this._disabled=e,this.tabView.cd.markForCheck()}get header(){return this._header}set header(e){this._header=e,this.tabView.cd.markForCheck()}ngOnDestroy(){this.view=null}}TabPanel.decorators=[{type:Component,args:[{selector:"p-tabPanel",template:'\n        <div [attr.id]="id" class="p-tabview-panel" [hidden]="!selected"\n            role="tabpanel" [attr.aria-hidden]="!selected" [attr.aria-labelledby]="id + \'-label\'" *ngIf="!closed">\n            <ng-content></ng-content>\n            <ng-container *ngIf="contentTemplate && (cache ? loaded : selected)">\n                <ng-container *ngTemplateOutlet="contentTemplate"></ng-container>\n            </ng-container>\n        </div>\n    '}]}],TabPanel.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>TabView)]}]},{type:ViewContainerRef},{type:ChangeDetectorRef}]),TabPanel.propDecorators={closable:[{type:Input}],headerStyle:[{type:Input}],headerStyleClass:[{type:Input}],leftIcon:[{type:Input}],rightIcon:[{type:Input}],cache:[{type:Input}],tooltip:[{type:Input}],tooltipPosition:[{type:Input}],tooltipPositionStyle:[{type:Input}],tooltipStyleClass:[{type:Input}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],selected:[{type:Input}],disabled:[{type:Input}],header:[{type:Input}]};class TabView{constructor(e,t){this.el=e,this.cd=t,this.orientation="top",this.onChange=new EventEmitter,this.onClose=new EventEmitter,this.activeIndexChange=new EventEmitter}ngAfterContentInit(){this.initTabs(),this.tabPanels.changes.subscribe(e=>{this.initTabs()})}ngAfterViewChecked(){this.tabChanged&&(this.updateInkBar(),this.tabChanged=!1)}initTabs(){this.tabs=this.tabPanels.toArray(),!this.findSelectedTab()&&this.tabs.length&&(null!=this.activeIndex&&this.tabs.length>this.activeIndex?this.tabs[this.activeIndex].selected=!0:this.tabs[0].selected=!0,this.tabChanged=!0),this.cd.markForCheck()}open(e,t){if(t.disabled)e&&e.preventDefault();else{if(!t.selected){let n=this.findSelectedTab();n&&(n.selected=!1),this.tabChanged=!0,t.selected=!0;let a=this.findTabIndex(t);this.preventActiveIndexPropagation=!0,this.activeIndexChange.emit(a),this.onChange.emit({originalEvent:e,index:a})}e&&e.preventDefault()}}close(e,t){this.controlClose?this.onClose.emit({originalEvent:e,index:this.findTabIndex(t),close:()=>{this.closeTab(t)}}):(this.closeTab(t),this.onClose.emit({originalEvent:e,index:this.findTabIndex(t)})),e.stopPropagation()}closeTab(e){if(!e.disabled){if(e.selected){this.tabChanged=!0,e.selected=!1;for(let t=0;t<this.tabs.length;t++){let n=this.tabs[t];if(!n.closed&&!e.disabled){n.selected=!0;break}}}e.closed=!0}}findSelectedTab(){for(let e=0;e<this.tabs.length;e++)if(this.tabs[e].selected)return this.tabs[e];return null}findTabIndex(e){let t=-1;for(let n=0;n<this.tabs.length;n++)if(this.tabs[n]==e){t=n;break}return t}getBlockableElement(){return this.el.nativeElement.children[0]}get activeIndex(){return this._activeIndex}set activeIndex(e){this._activeIndex=e,this.preventActiveIndexPropagation?this.preventActiveIndexPropagation=!1:this.tabs&&this.tabs.length&&null!=this._activeIndex&&this.tabs.length>this._activeIndex&&(this.findSelectedTab().selected=!1,this.tabs[this._activeIndex].selected=!0)}updateInkBar(){let e=DomHandler.findSingle(this.navbar.nativeElement,"li.p-highlight");this.inkbar.nativeElement.style.width=DomHandler.getWidth(e)+"px",this.inkbar.nativeElement.style.left=DomHandler.getOffset(e).left-DomHandler.getOffset(this.navbar.nativeElement).left+"px"}}TabView.decorators=[{type:Component,args:[{selector:"p-tabView",template:'\n        <div [ngClass]="\'p-tabview p-component\'" [ngStyle]="style" [class]="styleClass">\n            <ul #navbar class="p-tabview-nav" role="tablist">\n                <ng-template ngFor let-tab [ngForOf]="tabs">\n                    <li role="presentation" [ngClass]="{\'p-highlight\': tab.selected, \'p-disabled\': tab.disabled}" [ngStyle]="tab.headerStyle" [class]="tab.headerStyleClass" *ngIf="!tab.closed">\n                        <a role="tab" class="p-tabview-nav-link" [attr.id]="tab.id + \'-label\'" [attr.aria-selected]="tab.selected" [attr.aria-controls]="tab.id" [pTooltip]="tab.tooltip" [tooltipPosition]="tab.tooltipPosition"\n                            [attr.aria-selected]="tab.selected" [positionStyle]="tab.tooltipPositionStyle" [tooltipStyleClass]="tab.tooltipStyleClass"\n                            (click)="open($event,tab)" (keydown.enter)="open($event,tab)" pRipple [attr.tabindex]="tab.disabled ? null : \'0\'">\n                            <ng-container *ngIf="!tab.headerTemplate">\n                                <span class="p-tabview-left-icon" [ngClass]="tab.leftIcon" *ngIf="tab.leftIcon"></span>\n                                <span class="p-tabview-title">{{tab.header}}</span>\n                                <span class="p-tabview-right-icon" [ngClass]="tab.rightIcon" *ngIf="tab.rightIcon"></span>\n                            </ng-container>\n                            <ng-container *ngTemplateOutlet="tab.headerTemplate"></ng-container>\n                            <span *ngIf="tab.closable" class="p-tabview-close pi pi-times" (click)="close($event,tab)"></span>\n                        </a>\n                    </li>\n                </ng-template>\n                <li #inkbar class="p-tabview-ink-bar"></li>\n            </ul>\n            <div class="p-tabview-panels">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-tabview-nav{display:flex;flex-wrap:wrap;list-style-type:none;margin:0;padding:0}.p-tabview-nav-link{-ms-user-select:none;-webkit-user-select:none;align-items:center;cursor:pointer;display:flex;overflow:hidden;position:relative;text-decoration:none;user-select:none}.p-tabview-ink-bar{display:none;z-index:1}.p-tabview-nav-link:focus{z-index:1}.p-tabview-title{line-height:1}.p-tabview-close{z-index:1}"]}]}],TabView.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),TabView.propDecorators={orientation:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],controlClose:[{type:Input}],navbar:[{type:ViewChild,args:["navbar"]}],inkbar:[{type:ViewChild,args:["inkbar"]}],tabPanels:[{type:ContentChildren,args:[TabPanel]}],onChange:[{type:Output}],onClose:[{type:Output}],activeIndexChange:[{type:Output}],activeIndex:[{type:Input}]};class TabViewModule{}TabViewModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,SharedModule,TooltipModule,RippleModule],exports:[TabView,TabPanel,SharedModule],declarations:[TabView,TabPanel]}]}];export{TabPanel,TabView,TabViewModule};