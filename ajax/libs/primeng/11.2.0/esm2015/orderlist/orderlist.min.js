import{NgModule,Component,ElementRef,Input,Output,ContentChildren,EventEmitter,ViewChild,ChangeDetectionStrategy,ViewEncapsulation,ChangeDetectorRef}from"@angular/core";import{CommonModule}from"@angular/common";import{ButtonModule}from"primeng/button";import{SharedModule,PrimeTemplate,FilterService}from"primeng/api";import{DomHandler}from"primeng/dom";import{ObjectUtils}from"primeng/utils";import{RippleModule}from"primeng/ripple";export class OrderList{constructor(e,t,i){this.el=e,this.cd=t,this.filterService=i,this.metaKeySelection=!0,this.controlsPosition="left",this.filterMatchMode="contains",this.selectionChange=new EventEmitter,this.trackBy=((e,t)=>t),this.onReorder=new EventEmitter,this.onSelectionChange=new EventEmitter,this.onFilterEvent=new EventEmitter}get selection(){return this._selection}set selection(e){this._selection=e}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":default:this.itemTemplate=e.template}})}ngAfterViewChecked(){if(this.movedUp||this.movedDown){let e,t=DomHandler.find(this.listViewChild.nativeElement,"li.p-highlight");t.length>0&&(e=this.movedUp?t[0]:t[t.length-1],DomHandler.scrollInView(this.listViewChild.nativeElement,e)),this.movedUp=!1,this.movedDown=!1}}get value(){return this._value}set value(e){this._value=e,this.filterValue&&this.filter()}onItemClick(e,t,i){this.itemTouched=!1;let l=ObjectUtils.findIndexInList(t,this.selection),n=-1!=l;if(!this.itemTouched&&this.metaKeySelection){let r=e.metaKey||e.ctrlKey||e.shiftKey;n&&r?this._selection=this._selection.filter((e,t)=>t!==l):(this._selection=r&&this._selection?[...this._selection]:[],ObjectUtils.insertIntoOrderedArray(t,i,this._selection,this.value))}else n?this._selection=this._selection.filter((e,t)=>t!==l):(this._selection=this._selection?[...this._selection]:[],ObjectUtils.insertIntoOrderedArray(t,i,this._selection,this.value));this.selectionChange.emit(this._selection),this.onSelectionChange.emit({originalEvent:e,value:this._selection})}onFilterKeyup(e){this.filterValue=e.target.value.trim().toLocaleLowerCase(this.filterLocale),this.filter(),this.onFilterEvent.emit({originalEvent:e,value:this.visibleOptions})}filter(){let e=this.filterBy.split(",");this.visibleOptions=this.filterService.filter(this.value,e,this.filterValue,this.filterMatchMode,this.filterLocale)}isItemVisible(e){if(!this.filterValue||!this.filterValue.trim().length)return!0;for(let t=0;t<this.visibleOptions.length;t++)if(e==this.visibleOptions[t])return!0}onItemTouchEnd(e){this.itemTouched=!0}isSelected(e){return-1!=ObjectUtils.findIndexInList(e,this.selection)}moveUp(e){if(this.selection){for(let e=0;e<this.selection.length;e++){let t=this.selection[e],i=ObjectUtils.findIndexInList(t,this.value);if(0==i)break;{let e=this.value[i],t=this.value[i-1];this.value[i-1]=e,this.value[i]=t}}this.movedUp=!0,this.onReorder.emit(e)}}moveTop(e){if(this.selection){for(let e=this.selection.length-1;e>=0;e--){let t=this.selection[e],i=ObjectUtils.findIndexInList(t,this.value);if(0==i)break;{let e=this.value.splice(i,1)[0];this.value.unshift(e)}}this.onReorder.emit(e),this.listViewChild.nativeElement.scrollTop=0}}moveDown(e){if(this.selection){for(let e=this.selection.length-1;e>=0;e--){let t=this.selection[e],i=ObjectUtils.findIndexInList(t,this.value);if(i==this.value.length-1)break;{let e=this.value[i],t=this.value[i+1];this.value[i+1]=e,this.value[i]=t}}this.movedDown=!0,this.onReorder.emit(e)}}moveBottom(e){if(this.selection){for(let e=0;e<this.selection.length;e++){let t=this.selection[e],i=ObjectUtils.findIndexInList(t,this.value);if(i==this.value.length-1)break;{let e=this.value.splice(i,1)[0];this.value.push(e)}}this.onReorder.emit(e),this.listViewChild.nativeElement.scrollTop=this.listViewChild.nativeElement.scrollHeight}}onDragStart(e,t){e.dataTransfer.setData("text","b"),e.target.blur(),this.dragging=!0,this.draggedItemIndex=t}onDragOver(e,t){this.dragging&&this.draggedItemIndex!==t&&this.draggedItemIndex+1!==t&&(this.dragOverItemIndex=t,e.preventDefault())}onDragLeave(e){this.dragOverItemIndex=null}onDrop(e,t){let i=this.draggedItemIndex>t?t:0===t?0:t-1;ObjectUtils.reorderArray(this.value,this.draggedItemIndex,i),this.dragOverItemIndex=null,this.onReorder.emit(e),e.preventDefault()}onDragEnd(e){this.dragging=!1}onListMouseMove(e){if(this.dragging){let t=this.listViewChild.nativeElement.getBoundingClientRect().top+document.body.scrollTop,i=t+this.listViewChild.nativeElement.clientHeight-e.pageY,l=e.pageY-t;i<25&&i>0?this.listViewChild.nativeElement.scrollTop+=15:l<25&&l>0&&(this.listViewChild.nativeElement.scrollTop-=15)}}onItemKeydown(e,t,i){let l=e.currentTarget;switch(e.which){case 40:var n=this.findNextItem(l);n&&n.focus(),e.preventDefault();break;case 38:var r=this.findPrevItem(l);r&&r.focus(),e.preventDefault();break;case 13:this.onItemClick(e,t,i),e.preventDefault()}}findNextItem(e){let t=e.nextElementSibling;return t?!DomHandler.hasClass(t,"p-orderlist-item")||DomHandler.isHidden(t)?this.findNextItem(t):t:null}findPrevItem(e){let t=e.previousElementSibling;return t?!DomHandler.hasClass(t,"p-orderlist-item")||DomHandler.isHidden(t)?this.findPrevItem(t):t:null}};OrderList.decorators=[{type:Component,args:[{selector:"p-orderList",template:'\n        <div [ngClass]="{\'p-orderlist p-component\': true, \'p-orderlist-controls-left\': controlsPosition === \'left\',\n                    \'p-orderlist-controls-right\': controlsPosition === \'right\'}" [ngStyle]="style" [class]="styleClass">\n            <div class="p-orderlist-controls">\n                <button type="button" pButton pRipple icon="pi pi-angle-up" (click)="moveUp($event)"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-double-up" (click)="moveTop($event)"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-down" (click)="moveDown($event)"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-double-down" (click)="moveBottom($event)"></button>\n            </div>\n            <div class="p-orderlist-list-container">\n                <div class="p-orderlist-header" *ngIf="header">\n                    <div class="p-orderlist-title">{{header}}</div>\n                </div>\n                <div class="p-orderlist-filter-container" *ngIf="filterBy">\n                    <div class="p-orderlist-filter">\n                        <input type="text" role="textbox" (keyup)="onFilterKeyup($event)" class="p-orderlist-filter-input p-inputtext p-component" [attr.placeholder]="filterPlaceholder" [attr.aria-label]="ariaFilterLabel">\n                        <span class="p-orderlist-filter-icon pi pi-search"></span>\n                    </div>\n                </div>\n                <ul #listelement class="p-orderlist-list" [ngStyle]="listStyle" (dragover)="onListMouseMove($event)">\n                    <ng-template ngFor [ngForTrackBy]="trackBy" let-item [ngForOf]="value" let-i="index" let-l="last">\n                        <li class="p-orderlist-droppoint" *ngIf="dragdrop && isItemVisible(item)" (dragover)="onDragOver($event, i)" (drop)="onDrop($event, i)" (dragleave)="onDragLeave($event)"\n                            [ngClass]="{\'p-orderlist-droppoint-highlight\': (i === dragOverItemIndex)}"></li>\n                        <li class="p-orderlist-item" tabindex="0" [ngClass]="{\'p-highlight\':isSelected(item)}" pRipple\n                            (click)="onItemClick($event,item,i)" (touchend)="onItemTouchEnd($event)" (keydown)="onItemKeydown($event,item,i)"\n                            [style.display]="isItemVisible(item) ? \'block\' : \'none\'" role="option" [attr.aria-selected]="isSelected(item)"\n                            [attr.draggable]="dragdrop" (dragstart)="onDragStart($event, i)" (dragend)="onDragEnd($event)">\n                            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>\n                        </li>\n                        <li class="p-orderlist-droppoint" *ngIf="dragdrop && l" (dragover)="onDragOver($event, i + 1)" (drop)="onDrop($event, i + 1)" (dragleave)="onDragLeave($event)"\n                            [ngClass]="{\'p-orderlist-droppoint-highlight\': (i + 1 === dragOverItemIndex)}"></li>\n                    </ng-template>\n                </ul>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-orderlist{display:flex}.p-orderlist-controls{display:flex;flex-direction:column;justify-content:center}.p-orderlist-list-container{flex:1 1 auto}.p-orderlist-list{list-style-type:none;margin:0;max-height:24rem;min-height:12rem;overflow:auto;padding:0}.p-orderlist-item{cursor:pointer;overflow:hidden;position:relative}.p-orderlist-item[draggable=true]{cursor:move}.p-orderlist.p-state-disabled .p-button,.p-orderlist.p-state-disabled .p-orderlist-item{cursor:default}.p-orderlist.p-state-disabled .p-orderlist-list{overflow:hidden}.p-orderlist-filter{position:relative}.p-orderlist-filter-icon{margin-top:-.5rem;position:absolute;top:50%}.p-orderlist-filter-input{width:100%}.p-orderlist-controls-right .p-orderlist-controls{order:2}.p-orderlist-controls-right .p-orderlist-list-container{order:1}.p-orderlist-droppoint{height:6px}"]}]}],OrderList.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef},{type:FilterService}]),OrderList.propDecorators={header:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],listStyle:[{type:Input}],responsive:[{type:Input}],filterBy:[{type:Input}],filterPlaceholder:[{type:Input}],filterLocale:[{type:Input}],metaKeySelection:[{type:Input}],dragdrop:[{type:Input}],controlsPosition:[{type:Input}],ariaFilterLabel:[{type:Input}],filterMatchMode:[{type:Input}],selectionChange:[{type:Output}],trackBy:[{type:Input}],onReorder:[{type:Output}],onSelectionChange:[{type:Output}],onFilterEvent:[{type:Output}],listViewChild:[{type:ViewChild,args:["listelement"]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],selection:[{type:Input}],value:[{type:Input}]};export class OrderListModule{};OrderListModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,ButtonModule,SharedModule,RippleModule],exports:[OrderList,SharedModule],declarations:[OrderList]}]}];