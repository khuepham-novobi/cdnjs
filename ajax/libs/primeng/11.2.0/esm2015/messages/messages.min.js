import{NgModule,Component,Input,Output,EventEmitter,Optional,ElementRef,ChangeDetectionStrategy,ContentChildren,ViewEncapsulation,ChangeDetectorRef}from"@angular/core";import{CommonModule}from"@angular/common";import{trigger,style,transition,animate}from"@angular/animations";import{PrimeTemplate,MessageService}from"primeng/api";import{RippleModule}from"primeng/ripple";export class Messages{constructor(e,s,t){this.messageService=e,this.el=s,this.cd=t,this.closable=!0,this.enableService=!0,this.escape=!0,this.showTransitionOptions="300ms ease-out",this.hideTransitionOptions="200ms cubic-bezier(0.86, 0, 0.07, 1)",this.valueChange=new EventEmitter}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"content":default:this.contentTemplate=e.template}}),this.messageService&&this.enableService&&!this.contentTemplate&&(this.messageSubscription=this.messageService.messageObserver.subscribe(e=>{if(e){if(e instanceof Array){let s=e.filter(e=>this.key===e.key);this.value=this.value?[...this.value,...s]:[...s]}else this.key===e.key&&(this.value=this.value?[...this.value,...[e]]:[e]);this.cd.markForCheck()}}),this.clearSubscription=this.messageService.clearObserver.subscribe(e=>{e?this.key===e&&(this.value=null):this.value=null,this.cd.markForCheck()}))}hasMessages(){let e=this.el.nativeElement.parentElement;return!(!e||!e.offsetParent)&&(null!=this.contentTemplate||this.value&&this.value.length>0)}clear(){this.value=[],this.valueChange.emit(this.value)}removeMessage(e){this.value=this.value.filter((s,t)=>t!==e),this.valueChange.emit(this.value)}get icon(){const e=this.severity||(this.hasMessages()?this.value[0].severity:null);if(this.hasMessages())switch(e){case"success":return"pi-check";case"info":return"pi-info-circle";case"error":return"pi-times";case"warn":return"pi-exclamation-triangle";default:return"pi-info-circle"}return null}ngOnDestroy(){this.messageSubscription&&this.messageSubscription.unsubscribe(),this.clearSubscription&&this.clearSubscription.unsubscribe()}};Messages.decorators=[{type:Component,args:[{selector:"p-messages",template:'\n        <div class="p-messages p-component" role="alert" [ngStyle]="style" [class]="styleClass">\n            <ng-container *ngIf="!contentTemplate; else staticMessage">\n                <div *ngFor="let msg of value; let i=index" [ngClass]="\'p-message p-message-\' + msg.severity" role="alert" \n                    [@messageAnimation]="{value: \'visible\', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}">\n                    <div class="p-message-wrapper">\n                       <span [class]="\'p-message-icon pi\' + (msg.icon ? \' \' + msg.icon : \'\')" [ngClass]="{\'pi-info-circle\': msg.severity === \'info\', \n                            \'pi-check\': msg.severity === \'success\',\n                            \'pi-exclamation-triangle\': msg.severity === \'warn\',\n                            \'pi-times-circle\': msg.severity === \'error\'}"></span>\n                        <ng-container *ngIf="!escape; else escapeOut">\n                            <span *ngIf="msg.summary" class="p-message-summary" [innerHTML]="msg.summary"></span>\n                            <span *ngIf="msg.detail" class="p-message-detail" [innerHTML]="msg.detail"></span>\n                        </ng-container>\n                        <ng-template #escapeOut>\n                            <span *ngIf="msg.summary" class="p-message-summary">{{msg.summary}}</span>\n                            <span *ngIf="msg.detail" class="p-message-detail">{{msg.detail}}</span>\n                        </ng-template>\n                        <button class="p-message-close p-link" (click)="removeMessage(i)" *ngIf="closable" type="button" pRipple>\n                            <i class="p-message-close-icon pi pi-times"></i>\n                        </button>\n                    </div>\n                </div>\n            </ng-container>\n            <ng-template #staticMessage>\n                <div [ngClass]="\'p-message p-message-\' + severity" role="alert">\n                    <div class="p-message-wrapper">\n                        <ng-container *ngTemplateOutlet="contentTemplate"></ng-container>\n                    </div>\n                </div>\n            </ng-template>\n            </div>\n    ',animations:[trigger("messageAnimation",[transition(":enter",[style({opacity:0,transform:"translateY(-25%)"}),animate("{{showTransitionParams}}")]),transition(":leave",[animate("{{hideTransitionParams}}",style({height:0,marginTop:0,marginBottom:0,marginLeft:0,marginRight:0,overflow:"hidden",opacity:0}))])])],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-message-close,.p-message-wrapper{align-items:center;display:flex}.p-message-close{justify-content:center}.p-message-close.p-link{margin-left:auto;overflow:hidden;position:relative}"]}]}],Messages.ctorParameters=(()=>[{type:MessageService,decorators:[{type:Optional}]},{type:ElementRef},{type:ChangeDetectorRef}]),Messages.propDecorators={value:[{type:Input}],closable:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],enableService:[{type:Input}],key:[{type:Input}],escape:[{type:Input}],severity:[{type:Input}],showTransitionOptions:[{type:Input}],hideTransitionOptions:[{type:Input}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],valueChange:[{type:Output}]};export class MessagesModule{};MessagesModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RippleModule],exports:[Messages],declarations:[Messages]}]}];