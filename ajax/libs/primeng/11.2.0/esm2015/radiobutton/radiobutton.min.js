import{NgModule,Component,Input,Output,EventEmitter,forwardRef,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy,Injectable,Injector}from"@angular/core";import{CommonModule}from"@angular/common";import{NG_VALUE_ACCESSOR,NgControl}from"@angular/forms";import*as i0 from"@angular/core";export const RADIO_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>RadioButton),multi:!0};export class RadioControlRegistry{constructor(){this.accessors=[]}add(t,e){this.accessors.push([t,e])}remove(t){this.accessors=this.accessors.filter(e=>e[1]!==t)}select(t){this.accessors.forEach(e=>{this.isSameGroup(e,t)&&e[1]!==t&&e[1].writeValue(t.value)})}isSameGroup(t,e){return!!t[0].control&&(t[0].control.root===e.control.control.root&&t[1].name===e.name)}};RadioControlRegistry.ɵprov=i0.ɵɵdefineInjectable({factory:function(){return new RadioControlRegistry},token:RadioControlRegistry,providedIn:"root"}),RadioControlRegistry.decorators=[{type:Injectable,args:[{providedIn:"root"}]}];export class RadioButton{constructor(t,e,o){this.cd=t,this.injector=e,this.registry=o,this.onClick=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}ngOnInit(){this.formControlName&&(this.control=this.injector.get(NgControl),this.checkName(),this.registry.add(this.control,this))}handleClick(t,e,o){t.preventDefault(),this.disabled||(this.select(t),o&&e.focus())}select(t){this.disabled||(this.inputViewChild.nativeElement.checked=!0,this.checked=!0,this.onModelChange(this.value),this.formControlName&&this.registry.select(this),this.onClick.emit(t))}writeValue(t){this.checked=t==this.value,this.inputViewChild&&this.inputViewChild.nativeElement&&(this.inputViewChild.nativeElement.checked=this.checked),this.cd.markForCheck()}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t,this.cd.markForCheck()}onInputFocus(t){this.focused=!0,this.onFocus.emit(t)}onInputBlur(t){this.focused=!1,this.onModelTouched(),this.onBlur.emit(t)}onChange(t){this.select(t)}focus(){this.inputViewChild.nativeElement.focus()}ngOnDestroy(){this.formControlName&&this.registry.remove(this)}checkName(){this.name&&this.formControlName&&this.name!==this.formControlName&&this.throwNameError(),!this.name&&this.formControlName&&(this.name=this.formControlName)}throwNameError(){throw new Error('\n          If you define both a name and a formControlName attribute on your radio button, their values\n          must match. Ex: <p-radioButton formControlName="food" name="food"></p-radioButton>\n        ')}};RadioButton.decorators=[{type:Component,args:[{selector:"p-radioButton",template:'\n        <div [ngStyle]="style" [ngClass]="{\'p-radiobutton p-component\':true,\'p-radiobutton-checked\': checked, \'p-radiobutton-disabled\': disabled, \'p-radiobutton-focused\': focused}" [class]="styleClass">\n            <div class="p-hidden-accessible">\n                <input #rb type="radio" [attr.id]="inputId" [attr.name]="name" [attr.value]="value" [attr.tabindex]="tabindex" [attr.aria-labelledby]="ariaLabelledBy"\n                    [checked]="checked" (change)="onChange($event)" (focus)="onInputFocus($event)" (blur)="onInputBlur($event)" [disabled]="disabled">\n            </div>\n            <div (click)="handleClick($event, rb, true)" role="radio" [attr.aria-checked]="checked"\n                [ngClass]="{\'p-radiobutton-box\':true,\n                \'p-highlight\': checked, \'p-disabled\': disabled, \'p-focus\': focused}">\n                <span class="p-radiobutton-icon"></span>\n            </div>\n        </div>\n        <label (click)="select($event)" [class]="labelStyleClass"\n            [ngClass]="{\'p-radiobutton-label\':true, \'p-radiobutton-label-active\':rb.checked, \'p-disabled\':disabled, \'p-radiobutton-label-focus\':focused}"\n            *ngIf="label" [attr.for]="inputId">{{label}}</label>\n    ',providers:[RADIO_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush}]}],RadioButton.ctorParameters=(()=>[{type:ChangeDetectorRef},{type:Injector},{type:RadioControlRegistry}]),RadioButton.propDecorators={value:[{type:Input}],formControlName:[{type:Input}],name:[{type:Input}],disabled:[{type:Input}],label:[{type:Input}],tabindex:[{type:Input}],inputId:[{type:Input}],ariaLabelledBy:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],labelStyleClass:[{type:Input}],onClick:[{type:Output}],onFocus:[{type:Output}],onBlur:[{type:Output}],inputViewChild:[{type:ViewChild,args:["rb"]}]};export class RadioButtonModule{};RadioButtonModule.decorators=[{type:NgModule,args:[{imports:[CommonModule],exports:[RadioButton],declarations:[RadioButton]}]}];