import{NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ContentChild,TemplateRef,ChangeDetectionStrategy,ViewEncapsulation}from"@angular/core";import{CommonModule}from"@angular/common";import{ObjectUtils}from"primeng/utils";import{RippleModule}from"primeng/ripple";import{NG_VALUE_ACCESSOR}from"@angular/forms";export const SELECTBUTTON_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>SelectButton),multi:!0};export class SelectButton{constructor(t){this.cd=t,this.tabindex=0,this.onOptionClick=new EventEmitter,this.onChange=new EventEmitter,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{})}getOptionLabel(t){return this.optionLabel?ObjectUtils.resolveFieldData(t,this.optionLabel):null!=t.label?t.label:t}getOptionValue(t){return this.optionValue?ObjectUtils.resolveFieldData(t,this.optionValue):this.optionLabel?t:t.value}isOptionDisabled(t){return this.optionDisabled?ObjectUtils.resolveFieldData(t,this.optionDisabled):void 0!==t.disabled&&t.disabled}writeValue(t){this.value=t,this.cd.markForCheck()}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t,this.cd.markForCheck()}onItemClick(t,e,o){this.disabled||this.isOptionDisabled(e)||(this.multiple?this.isSelected(e)?this.removeOption(e):this.value=[...this.value||[],this.getOptionValue(e)]:this.value=this.getOptionValue(e),this.onOptionClick.emit({originalEvent:t,option:e,index:o}),this.onModelChange(this.value),this.onChange.emit({originalEvent:t,value:this.value}))}onBlur(){this.onModelTouched()}removeOption(t){this.value=this.value.filter(e=>!ObjectUtils.equals(e,this.getOptionValue(t),this.dataKey))}isSelected(t){let e=!1,o=this.getOptionValue(t);if(this.multiple){if(this.value)for(let t of this.value)if(ObjectUtils.equals(t,o,this.dataKey)){e=!0;break}}else e=ObjectUtils.equals(this.getOptionValue(t),this.value,this.dataKey);return e}};SelectButton.decorators=[{type:Component,args:[{selector:"p-selectButton",template:'\n        <div [ngClass]="\'p-selectbutton p-buttonset p-component\'" [ngStyle]="style" [class]="styleClass"  role="group">\n            <div *ngFor="let option of options; let i = index" #btn class="p-button p-component" [class]="option.styleClass" role="button" [attr.aria-pressed]="isSelected(option)"\n                [ngClass]="{\'p-highlight\':isSelected(option), \n                        \'p-disabled\': disabled || isOptionDisabled(option),\n                        \'p-button-icon-only\': (option.icon && !getOptionLabel(option))}" \n                (click)="onItemClick($event,option,i)" (keydown.enter)="onItemClick($event,option,i)"\n                [attr.title]="option.title" [attr.aria-label]="option.label" (blur)="onBlur()" [attr.tabindex]="disabled ? null : tabindex" [attr.aria-labelledby]="this.getOptionLabel(option)" pRipple>\n                <ng-container *ngIf="!itemTemplate else customcontent">\n                    <span [ngClass]="\'p-button-icon p-button-icon-left\'" [class]="option.icon" *ngIf="option.icon"></span>\n                    <span class="p-button-label">{{getOptionLabel(option)}}</span>\n                </ng-container>\n                <ng-template #customcontent>\n                    <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: option, index: i}"></ng-container>\n                </ng-template>\n            </div>\n        </div>\n    ',providers:[SELECTBUTTON_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-button{-ms-user-select:none;-webkit-user-select:none;align-items:center;cursor:pointer;display:inline-flex;margin:0;overflow:hidden;position:relative;text-align:center;user-select:none;vertical-align:bottom}.p-button-label{flex:1 1 auto}.p-button-icon-right{order:1}.p-button:disabled{cursor:default}.p-button-icon-only{justify-content:center}.p-button-icon-only .p-button-label{flex:0 0 auto;visibility:hidden;width:0}.p-button-vertical{flex-direction:column}.p-button-icon-bottom{order:2}.p-buttonset .p-button{margin:0}.p-buttonset .p-button:not(:last-child){border-right:0}.p-buttonset .p-button:not(:first-of-type):not(:last-of-type){border-radius:0}.p-buttonset .p-button:first-of-type{border-bottom-right-radius:0;border-top-right-radius:0}.p-buttonset .p-button:last-of-type{border-bottom-left-radius:0;border-top-left-radius:0}.p-buttonset .p-button:focus{position:relative;z-index:1}"]}]}],SelectButton.ctorParameters=(()=>[{type:ChangeDetectorRef}]),SelectButton.propDecorators={options:[{type:Input}],optionLabel:[{type:Input}],optionValue:[{type:Input}],optionDisabled:[{type:Input}],tabindex:[{type:Input}],multiple:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],ariaLabelledBy:[{type:Input}],disabled:[{type:Input}],dataKey:[{type:Input}],onOptionClick:[{type:Output}],onChange:[{type:Output}],itemTemplate:[{type:ContentChild,args:[TemplateRef]}]};export class SelectButtonModule{};SelectButtonModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RippleModule],exports:[SelectButton],declarations:[SelectButton]}]}];