import{NgModule,Component,ElementRef,Input,Output,EventEmitter,forwardRef,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy,ViewEncapsulation}from"@angular/core";import{CommonModule}from"@angular/common";import{InputTextModule}from"primeng/inputtext";import{NG_VALUE_ACCESSOR}from"@angular/forms";export const SPINNER_VALUE_ACCESSOR={provide:NG_VALUE_ACCESSOR,useExisting:forwardRef(()=>Spinner),multi:!0};export class Spinner{constructor(t,e){this.el=t,this.cd=e,this.onChange=new EventEmitter,this.onFocus=new EventEmitter,this.onBlur=new EventEmitter,this._step=1,this.onModelChange=(()=>{}),this.onModelTouched=(()=>{}),this.keyPattern=/[0-9\+\-]/,this.negativeSeparator="-"}get step(){return this._step}set step(t){if(this._step=t,null!=this._step){let t=this.step.toString().split(/[,]|[.]/);this.calculatedPrecision=t[1]?t[1].length:void 0}}ngOnInit(){this.formatInput&&(this.localeDecimalSeparator=1.1.toLocaleString().substring(1,2),this.localeThousandSeparator=1e3.toLocaleString().substring(1,2),this.thousandRegExp=new RegExp(`[${this.thousandSeparator||this.localeThousandSeparator}]`,"gim"),this.decimalSeparator&&this.thousandSeparator&&this.decimalSeparator===this.thousandSeparator&&console.warn("thousandSeparator and decimalSeparator cannot have the same value."))}repeat(t,e,i){let n=e||500;this.clearTimer(),this.timer=setTimeout(()=>{this.repeat(t,40,i)},n),this.spin(t,i)}spin(t,e){let i,n=this.step*e,a=this.getPrecision();i=this.value?"string"==typeof this.value?this.parseValue(this.value):this.value:0,this.value=a?parseFloat(this.toFixed(i+n,a)):i+n,void 0!==this.maxlength&&this.value.toString().length>this.maxlength&&(this.value=i),void 0!==this.min&&this.value<this.min&&(this.value=this.min),void 0!==this.max&&this.value>this.max&&(this.value=this.max),this.formatValue(),this.onModelChange(this.value),this.onChange.emit(t)}getPrecision(){return void 0===this.precision?this.calculatedPrecision:this.precision}toFixed(t,e){let i=Math.pow(10,e||0);return String(Math.round(t*i)/i)}onUpButtonMousedown(t){this.disabled||(this.inputfieldViewChild.nativeElement.focus(),this.repeat(t,null,1),this.updateFilledState(),t.preventDefault())}onUpButtonMouseup(t){this.disabled||this.clearTimer()}onUpButtonMouseleave(t){this.disabled||this.clearTimer()}onDownButtonMousedown(t){this.disabled||(this.inputfieldViewChild.nativeElement.focus(),this.repeat(t,null,-1),this.updateFilledState(),t.preventDefault())}onDownButtonMouseup(t){this.disabled||this.clearTimer()}onDownButtonMouseleave(t){this.disabled||this.clearTimer()}onInputKeydown(t){38==t.which?(this.spin(t,1),t.preventDefault()):40==t.which&&(this.spin(t,-1),t.preventDefault())}onInputChange(t){this.onChange.emit(t)}onInput(t){this.value=this.parseValue(t.target.value),this.onModelChange(this.value),this.updateFilledState()}onInputBlur(t){this.focus=!1,this.formatValue(),this.onModelTouched(),this.onBlur.emit(t)}onInputFocus(t){this.focus=!0,this.onFocus.emit(t)}parseValue(t){let e,i=this.getPrecision();return""===t.trim()?e=null:(this.formatInput&&(t=t.replace(this.thousandRegExp,"")),i?(t=this.formatInput?t.replace(this.decimalSeparator||this.localeDecimalSeparator,"."):t.replace(",","."),e=parseFloat(t)):e=parseInt(t,10),isNaN(e)?e=null:(null!==this.max&&e>this.max&&(e=this.max),null!==this.min&&e<this.min&&(e=this.min))),e}formatValue(){let t=this.value,e=this.getPrecision();null!=t?(this.formatInput&&(t=t.toLocaleString(void 0,{maximumFractionDigits:20}),this.decimalSeparator&&this.thousandSeparator&&(t=t.split(this.localeDecimalSeparator),e&&t[1]&&(t[1]=(this.decimalSeparator||this.localeDecimalSeparator)+t[1]),this.thousandSeparator&&t[0].length>3&&(t[0]=t[0].replace(new RegExp(`[${this.localeThousandSeparator}]`,"gim"),this.thousandSeparator)),t=t.join(""))),this.formattedValue=t.toString()):this.formattedValue=null,this.inputfieldViewChild&&this.inputfieldViewChild.nativeElement&&(this.inputfieldViewChild.nativeElement.value=this.formattedValue)}clearTimer(){this.timer&&clearInterval(this.timer)}writeValue(t){this.value=t,this.formatValue(),this.updateFilledState(),this.cd.markForCheck()}registerOnChange(t){this.onModelChange=t}registerOnTouched(t){this.onModelTouched=t}setDisabledState(t){this.disabled=t,this.cd.markForCheck()}updateFilledState(){this.filled=void 0!==this.value&&null!=this.value}};Spinner.decorators=[{type:Component,args:[{selector:"p-spinner",template:'\n        <span class="ui-spinner ui-widget ui-corner-all">\n            <input #inputfield type="text" [attr.id]="inputId" [value]="formattedValue||null" [attr.name]="name" [attr.aria-valumin]="min" [attr.aria-valuemax]="max" [attr.aria-valuenow]="value" [attr.aria-labelledby]="ariaLabelledBy"\n            [attr.size]="size" [attr.maxlength]="maxlength" [attr.tabindex]="tabindex" [attr.placeholder]="placeholder" [disabled]="disabled" [readonly]="readonly" [attr.required]="required"\n            (keydown)="onInputKeydown($event)" (blur)="onInputBlur($event)" (input)="onInput($event)" (change)="onInputChange($event)" (focus)="onInputFocus($event)"\n            [ngStyle]="inputStyle" [class]="inputStyleClass" [ngClass]="\'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all\'">\n            <button type="button" [ngClass]="{\'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default\':true,\'ui-state-disabled\':disabled}" [disabled]="disabled||readonly" tabindex="-1" [attr.readonly]="readonly"\n                (mouseleave)="onUpButtonMouseleave($event)" (mousedown)="onUpButtonMousedown($event)" (mouseup)="onUpButtonMouseup($event)">\n                <span class="ui-spinner-button-icon pi pi-caret-up ui-clickable"></span>\n            </button>\n            <button type="button" [ngClass]="{\'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default\':true,\'ui-state-disabled\':disabled}" [disabled]="disabled||readonly" tabindex="-1" [attr.readonly]="readonly"\n                (mouseleave)="onDownButtonMouseleave($event)" (mousedown)="onDownButtonMousedown($event)" (mouseup)="onDownButtonMouseup($event)">\n                <span class="ui-spinner-button-icon pi pi-caret-down ui-clickable"></span>\n            </button>\n        </span>\n    ',host:{"[class.ui-inputwrapper-filled]":"filled","[class.ui-inputwrapper-focus]":"focus"},providers:[SPINNER_VALUE_ACCESSOR],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".ui-spinner{display:inline-block;overflow:visible;padding:0;position:relative;vertical-align:middle}.ui-spinner-input{padding-right:1.5em;vertical-align:middle}.ui-spinner-button{cursor:default;display:block;height:50%;margin:0;overflow:hidden;padding:0;position:absolute;right:0;text-align:center;vertical-align:middle;width:1.5em}.ui-spinner .ui-spinner-button-icon{left:50%;margin-left:-.5em;margin-top:-.5em;position:absolute;top:50%;width:1em}.ui-spinner-up{top:0}.ui-spinner-down{bottom:0}.ui-fluid .ui-spinner{width:100%}.ui-fluid .ui-spinner .ui-spinner-input{padding-right:2em;width:100%}.ui-fluid .ui-spinner .ui-spinner-button{width:1.5em}.ui-fluid .ui-spinner .ui-spinner-button .ui-spinner-button-icon{left:.7em}"]}]}],Spinner.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),Spinner.propDecorators={onChange:[{type:Output}],onFocus:[{type:Output}],onBlur:[{type:Output}],min:[{type:Input}],max:[{type:Input}],maxlength:[{type:Input}],size:[{type:Input}],placeholder:[{type:Input}],inputId:[{type:Input}],disabled:[{type:Input}],readonly:[{type:Input}],tabindex:[{type:Input}],required:[{type:Input}],name:[{type:Input}],ariaLabelledBy:[{type:Input}],inputStyle:[{type:Input}],inputStyleClass:[{type:Input}],formatInput:[{type:Input}],decimalSeparator:[{type:Input}],thousandSeparator:[{type:Input}],precision:[{type:Input}],inputfieldViewChild:[{type:ViewChild,args:["inputfield"]}],step:[{type:Input}]};export class SpinnerModule{};SpinnerModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,InputTextModule],exports:[Spinner],declarations:[Spinner]}]}];