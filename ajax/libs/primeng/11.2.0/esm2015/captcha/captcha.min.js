import{NgModule,Component,EventEmitter,Input,NgZone,Output,ElementRef,ChangeDetectionStrategy,ViewEncapsulation,ChangeDetectorRef}from"@angular/core";import{CommonModule}from"@angular/common";export class Captcha{constructor(t,e,n){this.el=t,this._zone=e,this.cd=n,this.siteKey=null,this.theme="light",this.type="image",this.size="normal",this.tabindex=0,this.language=null,this.initCallback="initRecaptcha",this.onResponse=new EventEmitter,this.onExpire=new EventEmitter,this._instance=null}ngAfterViewInit(){window.grecaptcha?window.grecaptcha.render?this.init():setTimeout(()=>{this.init()},100):window[this.initCallback]=(()=>{this.init()})}init(){this._instance=window.grecaptcha.render(this.el.nativeElement.children[0],{sitekey:this.siteKey,theme:this.theme,type:this.type,size:this.size,tabindex:this.tabindex,hl:this.language,callback:t=>{this._zone.run(()=>this.recaptchaCallback(t))},"expired-callback":()=>{this._zone.run(()=>this.recaptchaExpiredCallback())}})}reset(){null!==this._instance&&(window.grecaptcha.reset(this._instance),this.cd.markForCheck())}getResponse(){return null===this._instance?null:window.grecaptcha.getResponse(this._instance)}recaptchaCallback(t){this.onResponse.emit({response:t})}recaptchaExpiredCallback(){this.onExpire.emit()}ngOnDestroy(){null!=this._instance&&window.grecaptcha.reset(this._instance)}};Captcha.decorators=[{type:Component,args:[{selector:"p-captcha",template:"<div></div>",changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None}]}],Captcha.ctorParameters=(()=>[{type:ElementRef},{type:NgZone},{type:ChangeDetectorRef}]),Captcha.propDecorators={siteKey:[{type:Input}],theme:[{type:Input}],type:[{type:Input}],size:[{type:Input}],tabindex:[{type:Input}],language:[{type:Input}],initCallback:[{type:Input}],onResponse:[{type:Output}],onExpire:[{type:Output}]};export class CaptchaModule{};CaptchaModule.decorators=[{type:NgModule,args:[{imports:[CommonModule],exports:[Captcha],declarations:[Captcha]}]}];