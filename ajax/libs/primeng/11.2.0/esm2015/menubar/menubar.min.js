import{NgModule,Component,ElementRef,Input,Renderer2,ChangeDetectorRef,ChangeDetectionStrategy,ViewEncapsulation,ContentChildren,ViewChild,Output,EventEmitter}from"@angular/core";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";import{PrimeTemplate}from"primeng/api";import{RouterModule}from"@angular/router";import{RippleModule}from"primeng/ripple";export class MenubarSub{constructor(e,t,n){this.el=e,this.renderer=t,this.cd=n,this.autoZIndex=!0,this.baseZIndex=0,this.leafClick=new EventEmitter,this.menuHoverActive=!1}get parentActive(){return this._parentActive}set parentActive(e){this.root||(this._parentActive=e,e||(this.activeItem=null))}onItemClick(e,t){t.disabled?e.preventDefault():(t.url||t.routerLink||e.preventDefault(),t.command&&t.command({originalEvent:e,item:t}),t.items&&(this.activeItem&&t===this.activeItem?(this.activeItem=null,this.unbindDocumentClickListener()):(this.activeItem=t,this.root&&this.bindDocumentClickListener())),t.items||this.onLeafClick())}onItemMouseEnter(e,t){t.disabled||this.mobileActive?e.preventDefault():this.root?(this.activeItem||this.autoDisplay)&&(this.activeItem=t,this.bindDocumentClickListener()):(this.activeItem=t,this.bindDocumentClickListener())}onLeafClick(){this.activeItem=null,this.root&&this.unbindDocumentClickListener(),this.leafClick.emit()}bindDocumentClickListener(){this.documentClickListener||(this.documentClickListener=(e=>{this.el&&!this.el.nativeElement.contains(e.target)&&(this.activeItem=null,this.cd.markForCheck(),this.unbindDocumentClickListener())}),document.addEventListener("click",this.documentClickListener))}unbindDocumentClickListener(){this.documentClickListener&&(document.removeEventListener("click",this.documentClickListener),this.documentClickListener=null)}ngOnDestroy(){this.unbindDocumentClickListener()}};MenubarSub.decorators=[{type:Component,args:[{selector:"p-menubarSub",template:'\n        <ul [ngClass]="{\'p-submenu-list\': !root, \'p-menubar-root-list\': root}">\n            <ng-template ngFor let-child [ngForOf]="(root ? item : item.items)">\n                <li *ngIf="child.separator" class="p-menu-separator" [ngClass]="{\'p-hidden\': child.visible === false}">\n                <li *ngIf="!child.separator" #listItem [ngClass]="{\'p-menuitem\':true, \'p-menuitem-active\': child === activeItem, \'p-hidden\': child.visible === false}">\n                    <a *ngIf="!child.routerLink" [attr.href]="child.url" [attr.data-automationid]="child.automationId" [attr.target]="child.target" [attr.title]="child.title" [attr.id]="child.id" \n                        (click)="onItemClick($event, child)" (mouseenter)="onItemMouseEnter($event,child)" \n                         [ngClass]="{\'p-menuitem-link\':true,\'p-disabled\':child.disabled}" [ngStyle]="child.style" [class]="child.styleClass" \n                         [attr.tabindex]="child.disabled ? null : \'0\'" [attr.aria-haspopup]="item.items != null" [attr.aria-expanded]="item === activeItem" pRipple>\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text" *ngIf="child.escape !== false; else htmlLabel">{{child.label}}</span>\n                        <ng-template #htmlLabel><span class="p-menuitem-text" [innerHTML]="child.label"></span></ng-template>\n                        <span class="p-submenu-icon pi" *ngIf="child.items" [ngClass]="{\'pi-angle-down\':root,\'pi-angle-right\':!root}"></span>\n                    </a>\n                    <a *ngIf="child.routerLink" [routerLink]="child.routerLink" [attr.data-automationid]="child.automationId" [queryParams]="child.queryParams" [routerLinkActive]="\'p-menuitem-link-active\'" [routerLinkActiveOptions]="child.routerLinkActiveOptions||{exact:false}"\n                        [attr.target]="child.target" [attr.title]="child.title" [attr.id]="child.id" [attr.tabindex]="child.disabled ? null : \'0\'" role="menuitem"\n                        (click)="onItemClick($event, child)" (mouseenter)="onItemMouseEnter($event,child)" \n                        [ngClass]="{\'p-menuitem-link\':true,\'p-disabled\':child.disabled}" [ngStyle]="child.style" [class]="child.styleClass"\n                        [fragment]="child.fragment" [queryParamsHandling]="child.queryParamsHandling" [preserveFragment]="child.preserveFragment" [skipLocationChange]="child.skipLocationChange" [replaceUrl]="child.replaceUrl" [state]="child.state" pRipple>\n                        <span class="p-menuitem-icon" *ngIf="child.icon" [ngClass]="child.icon"></span>\n                        <span class="p-menuitem-text" *ngIf="child.escape !== false; else htmlRouteLabel">{{child.label}}</span>\n                        <ng-template #htmlRouteLabel><span class="p-menuitem-text" [innerHTML]="child.label"></span></ng-template>\n                        <span class="p-submenu-icon pi" *ngIf="child.items" [ngClass]="{\'pi-angle-down\':root,\'pi-angle-right\':!root}"></span>\n                    </a>\n                    <p-menubarSub [parentActive]="child === activeItem" [item]="child" *ngIf="child.items" [mobileActive]="mobileActive" [autoDisplay]="autoDisplay" (leafClick)="onLeafClick()"></p-menubarSub>\n                </li>\n            </ng-template>\n        </ul>\n    ',encapsulation:ViewEncapsulation.None}]}],MenubarSub.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef}]),MenubarSub.propDecorators={item:[{type:Input}],root:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],mobileActive:[{type:Input}],autoDisplay:[{type:Input}],parentActive:[{type:Input}],leafClick:[{type:Output}]};export class Menubar{constructor(e,t,n){this.el=e,this.renderer=t,this.cd=n,this.autoZIndex=!0,this.baseZIndex=0}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"start":this.startTemplate=e.template;break;case"end":this.endTemplate=e.template}})}toggle(e){this.mobileActive=!this.mobileActive,DomHandler.findSingle(this.el.nativeElement,".p-menubar-root-list").style.zIndex=String(DomHandler.generateZIndex()),this.bindOutsideClickListener(),e.preventDefault()}bindOutsideClickListener(){this.outsideClickListener||(this.outsideClickListener=(e=>{!this.mobileActive||this.rootmenu.el.nativeElement===e.target||this.rootmenu.el.nativeElement.contains(e.target)||this.menubutton.nativeElement===e.target||this.menubutton.nativeElement.contains(e.target)||(this.mobileActive=!1,this.cd.markForCheck())}),document.addEventListener("click",this.outsideClickListener))}onLeafClick(){this.mobileActive=!1,this.unbindOutsideClickListener()}unbindOutsideClickListener(){this.outsideClickListener&&(document.removeEventListener("click",this.outsideClickListener),this.outsideClickListener=null)}ngOnDestroy(){this.unbindOutsideClickListener()}};Menubar.decorators=[{type:Component,args:[{selector:"p-menubar",template:'\n        <div [ngClass]="{\'p-menubar p-component\':true, \'p-menubar-mobile-active\': mobileActive}" [class]="styleClass" [ngStyle]="style">\n            <div class="p-menubar-start" *ngIf="startTemplate">\n                <ng-container *ngTemplateOutlet="startTemplate"></ng-container>\n            </div>\n            <a #menubutton tabindex="0" class="p-menubar-button" (click)="toggle($event)">\n                <i class="pi pi-bars"></i>\n            </a>\n            <p-menubarSub #rootmenu [item]="model" root="root" [baseZIndex]="baseZIndex" (leafClick)="onLeafClick()" [autoZIndex]="autoZIndex" [mobileActive]="mobileActive" [autoDisplay]="autoDisplay"></p-menubarSub>\n            <div class="p-menubar-end" *ngIf="endTemplate; else legacy">\n                <ng-container *ngTemplateOutlet="endTemplate"></ng-container>\n            </div>\n            <ng-template #legacy>\n                <div class="p-menubar-end">\n                    <ng-content></ng-content>\n                </div>\n            </ng-template>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-menubar{align-items:center;display:flex}.p-menubar ul{list-style:none;margin:0;padding:0}.p-menubar .p-menuitem-link{align-items:center;cursor:pointer;display:flex;overflow:hidden;position:relative;text-decoration:none}.p-menubar .p-menuitem-text{line-height:1}.p-menubar .p-menuitem{position:relative}.p-menubar-root-list{align-items:center;display:flex}.p-menubar-root-list>li ul{display:none;z-index:1}.p-menubar-root-list>.p-menuitem-active>p-menubarsub>.p-submenu-list{display:block}.p-menubar .p-submenu-list{display:none;position:absolute;z-index:1}.p-menubar .p-submenu-list>.p-menuitem-active>p-menubarsub>.p-submenu-list{display:block;left:100%;top:0}.p-menubar .p-submenu-list .p-menuitem-link .p-submenu-icon{margin-left:auto}.p-menubar .p-menubar-custom,.p-menubar .p-menubar-end{-ms-grid-row-align:center;align-self:center;margin-left:auto}.p-menubar-button{align-items:center;cursor:pointer;display:none;justify-content:center}"]}]}],Menubar.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef}]),Menubar.propDecorators={model:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],autoDisplay:[{type:Input}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],menubutton:[{type:ViewChild,args:["menubutton"]}],rootmenu:[{type:ViewChild,args:["rootmenu"]}]};export class MenubarModule{};MenubarModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RouterModule,RippleModule],exports:[Menubar,RouterModule],declarations:[Menubar,MenubarSub]}]}];