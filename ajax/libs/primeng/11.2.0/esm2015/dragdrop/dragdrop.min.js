import{NgModule,Directive,ElementRef,HostListener,Input,Output,EventEmitter,NgZone}from"@angular/core";import{CommonModule}from"@angular/common";import{DomHandler}from"primeng/dom";export class Draggable{constructor(e,t){this.el=e,this.zone=t,this.onDragStart=new EventEmitter,this.onDragEnd=new EventEmitter,this.onDrag=new EventEmitter}get pDraggableDisabled(){return this._pDraggableDisabled}set pDraggableDisabled(e){this._pDraggableDisabled=e,this._pDraggableDisabled?this.unbindMouseListeners():(this.el.nativeElement.draggable=!0,this.bindMouseListeners())}ngAfterViewInit(){this.pDraggableDisabled||(this.el.nativeElement.draggable=!0,this.bindMouseListeners())}bindDragListener(){this.dragListener||this.zone.runOutsideAngular(()=>{this.dragListener=this.drag.bind(this),this.el.nativeElement.addEventListener("drag",this.dragListener)})}unbindDragListener(){this.dragListener&&this.zone.runOutsideAngular(()=>{this.el.nativeElement.removeEventListener("drag",this.dragListener),this.dragListener=null})}bindMouseListeners(){this.mouseDownListener||this.mouseUpListener||this.zone.runOutsideAngular(()=>{this.mouseDownListener=this.mousedown.bind(this),this.mouseUpListener=this.mouseup.bind(this),this.el.nativeElement.addEventListener("mousedown",this.mouseDownListener),this.el.nativeElement.addEventListener("mouseup",this.mouseUpListener)})}unbindMouseListeners(){this.mouseDownListener&&this.mouseUpListener&&this.zone.runOutsideAngular(()=>{this.el.nativeElement.removeEventListener("mousedown",this.mouseDownListener),this.el.nativeElement.removeEventListener("mouseup",this.mouseUpListener),this.mouseDownListener=null,this.mouseUpListener=null})}drag(e){this.onDrag.emit(e)}dragStart(e){this.allowDrag()&&!this.pDraggableDisabled?(this.dragEffect&&(e.dataTransfer.effectAllowed=this.dragEffect),e.dataTransfer.setData("text",this.scope),this.onDragStart.emit(e),this.bindDragListener()):e.preventDefault()}dragEnd(e){this.onDragEnd.emit(e),this.unbindDragListener()}mousedown(e){this.handle=e.target}mouseup(e){this.handle=null}allowDrag(){return!this.dragHandle||!this.handle||DomHandler.matches(this.handle,this.dragHandle)}ngOnDestroy(){this.unbindDragListener(),this.unbindMouseListeners()}};Draggable.decorators=[{type:Directive,args:[{selector:"[pDraggable]"}]}],Draggable.ctorParameters=(()=>[{type:ElementRef},{type:NgZone}]),Draggable.propDecorators={scope:[{type:Input,args:["pDraggable"]}],dragEffect:[{type:Input}],dragHandle:[{type:Input}],onDragStart:[{type:Output}],onDragEnd:[{type:Output}],onDrag:[{type:Output}],pDraggableDisabled:[{type:Input}],dragStart:[{type:HostListener,args:["dragstart",["$event"]]}],dragEnd:[{type:HostListener,args:["dragend",["$event"]]}]};export class Droppable{constructor(e,t){this.el=e,this.zone=t,this.onDragEnter=new EventEmitter,this.onDragLeave=new EventEmitter,this.onDrop=new EventEmitter}ngAfterViewInit(){this.pDroppableDisabled||this.bindDragOverListener()}bindDragOverListener(){this.dragOverListener||this.zone.runOutsideAngular(()=>{this.dragOverListener=this.dragOver.bind(this),this.el.nativeElement.addEventListener("dragover",this.dragOverListener)})}unbindDragOverListener(){this.dragOverListener&&this.zone.runOutsideAngular(()=>{this.el.nativeElement.removeEventListener("dragover",this.dragOverListener),this.dragOverListener=null})}dragOver(e){e.preventDefault()}drop(e){this.allowDrop(e)&&(DomHandler.removeClass(this.el.nativeElement,"p-draggable-enter"),e.preventDefault(),this.onDrop.emit(e))}dragEnter(e){e.preventDefault(),this.dropEffect&&(e.dataTransfer.dropEffect=this.dropEffect),DomHandler.addClass(this.el.nativeElement,"p-draggable-enter"),this.onDragEnter.emit(e)}dragLeave(e){e.preventDefault(),DomHandler.removeClass(this.el.nativeElement,"p-draggable-enter"),this.onDragLeave.emit(e)}allowDrop(e){let t=e.dataTransfer.getData("text");if("string"==typeof this.scope&&t==this.scope)return!0;if(this.scope instanceof Array)for(let e=0;e<this.scope.length;e++)if(t==this.scope[e])return!0;return!1}ngOnDestroy(){this.unbindDragOverListener()}};Droppable.decorators=[{type:Directive,args:[{selector:"[pDroppable]"}]}],Droppable.ctorParameters=(()=>[{type:ElementRef},{type:NgZone}]),Droppable.propDecorators={scope:[{type:Input,args:["pDroppable"]}],pDroppableDisabled:[{type:Input}],dropEffect:[{type:Input}],onDragEnter:[{type:Output}],onDragLeave:[{type:Output}],onDrop:[{type:Output}],drop:[{type:HostListener,args:["drop",["$event"]]}],dragEnter:[{type:HostListener,args:["dragenter",["$event"]]}],dragLeave:[{type:HostListener,args:["dragleave",["$event"]]}]};export class DragDropModule{};DragDropModule.decorators=[{type:NgModule,args:[{imports:[CommonModule],exports:[Draggable,Droppable],declarations:[Draggable,Droppable]}]}];