import{NgModule,Component,ElementRef,Input,Output,EventEmitter,Inject,forwardRef,ContentChildren,ChangeDetectionStrategy,ViewEncapsulation,ChangeDetectorRef}from"@angular/core";import{trigger,state,style,transition,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{SharedModule}from"primeng/api";import{PrimeTemplate}from"primeng/api";import{Subject}from"rxjs";export class OrganizationChartNode{constructor(e,t){this.cd=t,this.chart=e,this.subscription=this.chart.selectionSource$.subscribe(()=>{this.cd.markForCheck()})}get leaf(){return 0!=this.node.leaf&&!(this.node.children&&this.node.children.length)}get colspan(){return this.node.children&&this.node.children.length?2*this.node.children.length:null}onNodeClick(e,t){this.chart.onNodeClick(e,t)}toggleNode(e,t){t.expanded=!t.expanded,t.expanded?this.chart.onNodeExpand.emit({originalEvent:e,node:this.node}):this.chart.onNodeCollapse.emit({originalEvent:e,node:this.node}),e.preventDefault()}isSelected(){return this.chart.isSelected(this.node)}ngOnDestroy(){this.subscription.unsubscribe()}};OrganizationChartNode.decorators=[{type:Component,args:[{selector:"[pOrganizationChartNode]",template:'\n        <tbody *ngIf="node">\n            <tr>\n                <td [attr.colspan]="colspan">\n                    <div [class]="node.styleClass" [ngClass]="{\'p-organizationchart-node-content\': true, \'p-organizationchart-selectable-node\': chart.selectionMode && node.selectable !== false,\'p-highlight\':isSelected()}"\n                        (click)="onNodeClick($event,node)">\n                        <div *ngIf="!chart.getTemplateForNode(node)">{{node.label}}</div>\n                        <div *ngIf="chart.getTemplateForNode(node)">\n                            <ng-container *ngTemplateOutlet="chart.getTemplateForNode(node); context: {$implicit: node}"></ng-container>\n                        </div>\n                        <a *ngIf="!leaf" tabindex="0" class="p-node-toggler" (click)="toggleNode($event, node)" (keydown.enter)="toggleNode($event, node)">\n                            <i class="p-node-toggler-icon pi" [ngClass]="{\'pi-chevron-down\': node.expanded, \'pi-chevron-up\': !node.expanded}"></i>\n                        </a>\n                    </div>\n                </td>\n            </tr>\n            <tr [ngClass]="!leaf&&node.expanded ? \'p-organizationchart-node-visible\' : \'p-organizationchart-node-hidden\'" class="p-organizationchart-lines" [@childState]="\'in\'">\n                <td [attr.colspan]="colspan">\n                    <div class="p-organizationchart-line-down"></div>\n                </td>\n            </tr>\n            <tr [ngClass]="!leaf&&node.expanded ? \'p-organizationchart-node-visible\' : \'p-organizationchart-node-hidden\'" class="p-organizationchart-lines" [@childState]="\'in\'">\n                <ng-container *ngIf="node.children && node.children.length === 1">\n                    <td [attr.colspan]="colspan">\n                        <div class="p-organizationchart-line-down"></div>\n                    </td>\n                </ng-container>\n                <ng-container *ngIf="node.children && node.children.length > 1">\n                    <ng-template ngFor let-child [ngForOf]="node.children" let-first="first" let-last="last">\n                        <td class="p-organizationchart-line-left" [ngClass]="{\'p-organizationchart-line-top\':!first}">&nbsp;</td>\n                        <td class="p-organizationchart-line-right" [ngClass]="{\'p-organizationchart-line-top\':!last}">&nbsp;</td>\n                    </ng-template>\n                </ng-container>\n            </tr>\n            <tr [ngClass]="!leaf&&node.expanded ? \'p-organizationchart-node-visible\' : \'p-organizationchart-node-hidden\'" class="p-organizationchart-nodes" [@childState]="\'in\'">\n                <td *ngFor="let child of node.children" colspan="2">\n                    <table class="p-organizationchart-table" pOrganizationChartNode [node]="child"></table>\n                </td>\n            </tr>\n        </tbody>\n    ',animations:[trigger("childState",[state("in",style({opacity:1})),transition("void => *",[style({opacity:0}),animate(150)]),transition("* => void",[animate(150,style({opacity:0}))])])],encapsulation:ViewEncapsulation.None,changeDetection:ChangeDetectionStrategy.OnPush,styles:[".p-organizationchart-table{border-collapse:separate;border-spacing:0;margin:0 auto}.p-organizationchart-table>tbody>tr>td{padding:0 .75rem;text-align:center;vertical-align:top}.p-organizationchart-node-content{display:inline-block;position:relative}.p-organizationchart-node-content .p-node-toggler{-ms-user-select:none;-webkit-user-select:none;bottom:-.75rem;cursor:pointer;height:1.5rem;left:50%;margin-left:-.75rem;position:absolute;user-select:none;width:1.5rem;z-index:2}.p-organizationchart-node-content .p-node-toggler .p-node-toggler-icon{position:relative;top:.25rem}.p-organizationchart-line-down{height:20px;margin:0 auto;width:1px}.p-organizationchart-line-left,.p-organizationchart-line-right{border-radius:0}.p-organizationchart-selectable-node{cursor:pointer}.p-organizationchart .p-organizationchart-node-hidden{display:none}.p-organizationchart-preservespace .p-organizationchart-node-hidden{display:inherit;visibility:hidden}"]}]}],OrganizationChartNode.ctorParameters=(()=>[{type:void 0,decorators:[{type:Inject,args:[forwardRef(()=>OrganizationChart)]}]},{type:ChangeDetectorRef}]),OrganizationChartNode.propDecorators={node:[{type:Input}],root:[{type:Input}],first:[{type:Input}],last:[{type:Input}]};export class OrganizationChart{constructor(e,t){this.el=e,this.cd=t,this.preserveSpace=!0,this.selectionChange=new EventEmitter,this.onNodeSelect=new EventEmitter,this.onNodeUnselect=new EventEmitter,this.onNodeExpand=new EventEmitter,this.onNodeCollapse=new EventEmitter,this.selectionSource=new Subject,this.selectionSource$=this.selectionSource.asObservable()}get selection(){return this._selection}set selection(e){this._selection=e,this.initialized&&this.selectionSource.next()}get root(){return this.value&&this.value.length?this.value[0]:null}ngAfterContentInit(){this.templates.length&&(this.templateMap={}),this.templates.forEach(e=>{this.templateMap[e.getType()]=e.template}),this.initialized=!0}getTemplateForNode(e){return this.templateMap?e.type?this.templateMap[e.type]:this.templateMap.default:null}onNodeClick(e,t){let n=e.target;if((!n.className||-1===n.className.indexOf("p-node-toggler")&&-1===n.className.indexOf("p-node-toggler-icon"))&&this.selectionMode){if(!1===t.selectable)return;let n=this.findIndexInSelection(t),i=n>=0;"single"===this.selectionMode?i?(this.selection=null,this.onNodeUnselect.emit({originalEvent:e,node:t})):(this.selection=t,this.onNodeSelect.emit({originalEvent:e,node:t})):"multiple"===this.selectionMode&&(i?(this.selection=this.selection.filter((e,t)=>t!=n),this.onNodeUnselect.emit({originalEvent:e,node:t})):(this.selection=[...this.selection||[],t],this.onNodeSelect.emit({originalEvent:e,node:t}))),this.selectionChange.emit(this.selection),this.selectionSource.next()}}findIndexInSelection(e){let t=-1;if(this.selectionMode&&this.selection)if("single"===this.selectionMode)t=this.selection==e?0:-1;else if("multiple"===this.selectionMode)for(let n=0;n<this.selection.length;n++)if(this.selection[n]==e){t=n;break}return t}isSelected(e){return-1!=this.findIndexInSelection(e)}};OrganizationChart.decorators=[{type:Component,args:[{selector:"p-organizationChart",template:'\n        <div [ngStyle]="style" [class]="styleClass" [ngClass]="{\'p-organizationchart p-component\': true, \'p-organizationchart-preservespace\': preserveSpace}">\n            <table class="p-organizationchart-table" pOrganizationChartNode [node]="root" *ngIf="root"></table>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush}]}],OrganizationChart.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef}]),OrganizationChart.propDecorators={value:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],selectionMode:[{type:Input}],preserveSpace:[{type:Input}],selection:[{type:Input}],selectionChange:[{type:Output}],onNodeSelect:[{type:Output}],onNodeUnselect:[{type:Output}],onNodeExpand:[{type:Output}],onNodeCollapse:[{type:Output}],templates:[{type:ContentChildren,args:[PrimeTemplate]}]};export class OrganizationChartModule{};OrganizationChartModule.decorators=[{type:NgModule,args:[{imports:[CommonModule],exports:[OrganizationChart,SharedModule],declarations:[OrganizationChart,OrganizationChartNode]}]}];