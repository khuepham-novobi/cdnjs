import{NgModule,Component,Input,Output,EventEmitter,ViewChild,ElementRef,Renderer2,ChangeDetectionStrategy,ViewEncapsulation,ContentChildren,ChangeDetectorRef}from"@angular/core";import{trigger,state,style,transition,animate}from"@angular/animations";import{CommonModule}from"@angular/common";import{RippleModule}from"primeng/ripple";import{DomHandler}from"primeng/dom";import{PrimeTemplate}from"primeng/api";export class Sidebar{constructor(e,t,i){this.el=e,this.renderer=t,this.cd=i,this.position="left",this.blockScroll=!1,this.autoZIndex=!0,this.baseZIndex=0,this.modal=!0,this.dismissible=!0,this.showCloseIcon=!0,this.closeOnEscape=!0,this.onShow=new EventEmitter,this.onHide=new EventEmitter,this.visibleChange=new EventEmitter}ngAfterViewInit(){this.initialized=!0,this.appendTo&&("body"===this.appendTo?document.body.appendChild(this.containerViewChild.nativeElement):DomHandler.appendChild(this.containerViewChild.nativeElement,this.appendTo)),this.visible&&this.show()}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"content":default:this.contentTemplate=e.template}})}get visible(){return this._visible}set visible(e){this._visible=e,this.initialized&&this.containerViewChild&&this.containerViewChild.nativeElement&&(this._visible?this.show():this.preventVisibleChangePropagation?this.preventVisibleChangePropagation=!1:this.hide())}ngAfterViewChecked(){this.executePostDisplayActions&&(this.onShow.emit({}),this.executePostDisplayActions=!1)}show(){this.executePostDisplayActions=!0,this.autoZIndex&&(this.containerViewChild.nativeElement.style.zIndex=String(this.baseZIndex+ ++DomHandler.zindex)),this.modal&&this.enableModality()}hide(){this.onHide.emit({}),this.modal&&this.disableModality()}close(e){this.preventVisibleChangePropagation=!0,this.hide(),this.visibleChange.emit(!1),e.preventDefault()}enableModality(){this.mask||(this.mask=document.createElement("div"),this.mask.style.zIndex=String(parseInt(this.containerViewChild.nativeElement.style.zIndex)-1),DomHandler.addMultipleClasses(this.mask,"p-component-overlay p-sidebar-mask"),this.dismissible&&(this.maskClickListener=this.renderer.listen(this.mask,"click",e=>{this.dismissible&&this.close(e)})),document.body.appendChild(this.mask),this.blockScroll&&DomHandler.addClass(document.body,"p-overflow-hidden"))}disableModality(){this.mask&&(this.unbindMaskClickListener(),document.body.removeChild(this.mask),this.blockScroll&&DomHandler.removeClass(document.body,"p-overflow-hidden"),this.mask=null)}onAnimationStart(e){switch(e.toState){case"visible":this.closeOnEscape&&this.bindDocumentEscapeListener();break;case"hidden":this.unbindGlobalListeners()}}bindDocumentEscapeListener(){const e=this.el?this.el.nativeElement.ownerDocument:"document";this.documentEscapeListener=this.renderer.listen(e,"keydown",e=>{27==e.which&&parseInt(this.containerViewChild.nativeElement.style.zIndex)===DomHandler.zindex+this.baseZIndex&&this.close(e)})}unbindDocumentEscapeListener(){this.documentEscapeListener&&(this.documentEscapeListener(),this.documentEscapeListener=null)}unbindMaskClickListener(){this.maskClickListener&&(this.maskClickListener(),this.maskClickListener=null)}unbindGlobalListeners(){this.unbindMaskClickListener(),this.unbindDocumentEscapeListener()}ngOnDestroy(){this.initialized=!1,this.visible&&this.hide(),this.appendTo&&this.el.nativeElement.appendChild(this.containerViewChild.nativeElement),this.unbindGlobalListeners()}};Sidebar.decorators=[{type:Component,args:[{selector:"p-sidebar",template:'\n        <div #container [ngClass]="{\'p-sidebar\':true, \'p-sidebar-active\': visible,\n            \'p-sidebar-left\': (position === \'left\'), \'p-sidebar-right\': (position === \'right\'),\n            \'p-sidebar-top\': (position === \'top\'), \'p-sidebar-bottom\': (position === \'bottom\'),\n            \'p-sidebar-full\': fullScreen}"\n            [@panelState]="visible ? \'visible\' : \'hidden\'" (@panelState.start)="onAnimationStart($event)" [ngStyle]="style" [class]="styleClass"  role="complementary" [attr.aria-modal]="modal">\n            <div class="p-sidebar-content">\n                <button type="button" class="p-sidebar-close p-link" *ngIf="showCloseIcon" (click)="close($event)" (keydown.enter)="close($event)" [attr.aria-label]="ariaCloseLabel" pRipple>\n                    <span class="p-sidebar-close-icon pi pi-times"></span>\n                </button>\n                <ng-content></ng-content>\n                <ng-container *ngTemplateOutlet="contentTemplate"></ng-container>\n            </div>\n        </div>\n    ',animations:[trigger("panelState",[state("hidden",style({opacity:0})),state("visible",style({opacity:1})),transition("visible => hidden",animate("300ms ease-in")),transition("hidden => visible",animate("300ms ease-out"))])],changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-sidebar{position:fixed;transition:transform .3s}.p-sidebar-content{position:relative}.p-sidebar-close{align-items:center;display:flex;justify-content:center;overflow:hidden;position:absolute;right:0;top:0}.p-sidebar-mask{transition-property:background-color}.p-sidebar-mask,.p-sidebar-mask-leave.p-component-overlay{background-color:transparent}.p-sidebar-left{height:100%;left:0;top:0;transform:translateX(-100%);width:20rem}.p-sidebar-left.p-sidebar-active{transform:translateX(0)}.p-sidebar-right{height:100%;right:0;top:0;transform:translateX(100%);width:20rem}.p-sidebar-right.p-sidebar-active{transform:translateX(0)}.p-sidebar-top{height:10rem;left:0;top:0;transform:translateY(-100%);width:100%}.p-sidebar-top.p-sidebar-active{transform:translateY(0)}.p-sidebar-bottom{bottom:0;height:10rem;left:0;transform:translateY(100%);width:100%}.p-sidebar-bottom.p-sidebar-active{transform:translateY(0)}.p-sidebar-full{height:100%;left:0;top:0;transition:none;width:100%}.p-sidebar-left.p-sidebar-sm,.p-sidebar-right.p-sidebar-sm{width:20rem}.p-sidebar-left.p-sidebar-md,.p-sidebar-right.p-sidebar-md{width:40rem}.p-sidebar-left.p-sidebar-lg,.p-sidebar-right.p-sidebar-lg{width:60rem}.p-sidebar-bottom.p-sidebar-sm,.p-sidebar-top.p-sidebar-sm{height:10rem}.p-sidebar-bottom.p-sidebar-md,.p-sidebar-top.p-sidebar-md{height:20rem}.p-sidebar-bottom.p-sidebar-lg,.p-sidebar-top.p-sidebar-lg{height:30rem}@media screen and (max-width:64em){.p-sidebar-left.p-sidebar-lg,.p-sidebar-left.p-sidebar-md,.p-sidebar-right.p-sidebar-lg,.p-sidebar-right.p-sidebar-md{width:20rem}}"]}]}],Sidebar.ctorParameters=(()=>[{type:ElementRef},{type:Renderer2},{type:ChangeDetectorRef}]),Sidebar.propDecorators={position:[{type:Input}],fullScreen:[{type:Input}],appendTo:[{type:Input}],blockScroll:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],ariaCloseLabel:[{type:Input}],autoZIndex:[{type:Input}],baseZIndex:[{type:Input}],modal:[{type:Input}],dismissible:[{type:Input}],showCloseIcon:[{type:Input}],closeOnEscape:[{type:Input}],containerViewChild:[{type:ViewChild,args:["container"]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],onShow:[{type:Output}],onHide:[{type:Output}],visibleChange:[{type:Output}],visible:[{type:Input}]};export class SidebarModule{};SidebarModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,RippleModule],exports:[Sidebar],declarations:[Sidebar]}]}];