import{NgModule,Component,ElementRef,Input,Output,ContentChildren,EventEmitter,ViewChild,ChangeDetectionStrategy,ViewEncapsulation,ChangeDetectorRef}from"@angular/core";import{CommonModule}from"@angular/common";import{ButtonModule}from"primeng/button";import{SharedModule,PrimeTemplate,FilterService}from"primeng/api";import{DomHandler}from"primeng/dom";import{RippleModule}from"primeng/ripple";import{ObjectUtils}from"primeng/utils";export class PickList{constructor(e,t,i){this.el=e,this.cd=t,this.filterService=i,this.trackBy=((e,t)=>t),this.showSourceFilter=!0,this.showTargetFilter=!0,this.metaKeySelection=!0,this.showSourceControls=!0,this.showTargetControls=!0,this.disabled=!1,this.filterMatchMode="contains",this.onMoveToSource=new EventEmitter,this.onMoveAllToSource=new EventEmitter,this.onMoveAllToTarget=new EventEmitter,this.onMoveToTarget=new EventEmitter,this.onSourceReorder=new EventEmitter,this.onTargetReorder=new EventEmitter,this.onSourceSelect=new EventEmitter,this.onTargetSelect=new EventEmitter,this.onSourceFilter=new EventEmitter,this.onTargetFilter=new EventEmitter,this.selectedItemsSource=[],this.selectedItemsTarget=[],this.SOURCE_LIST=-1,this.TARGET_LIST=1}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"item":this.itemTemplate=e.template;break;case"emptymessagesource":this.emptyMessageSourceTemplate=e.template;break;case"emptymessagetarget":this.emptyMessageTargetTemplate=e.template;break;default:this.itemTemplate=e.template}})}ngAfterViewChecked(){if(this.movedUp||this.movedDown){let e,t=DomHandler.find(this.reorderedListElement,"li.p-highlight");e=this.movedUp?t[0]:t[t.length-1],DomHandler.scrollInView(this.reorderedListElement,e),this.movedUp=!1,this.movedDown=!1,this.reorderedListElement=null}}onItemClick(e,t,i,s){if(this.disabled)return;let r=this.findIndexInSelection(t,i),l=-1!=r;if(!this.itemTouched&&this.metaKeySelection){let s=e.metaKey||e.ctrlKey||e.shiftKey;l&&s?i.splice(r,1):(s||(i.length=0),i.push(t))}else l?i.splice(r,1):i.push(t);s.emit({originalEvent:e,items:i}),this.itemTouched=!1}onSourceItemDblClick(){this.disabled||this.moveRight()}onTargetItemDblClick(){this.disabled||this.moveLeft()}onFilter(e,t,i){let s=e.target.value.trim().toLocaleLowerCase(this.filterLocale);this.filter(s,t,i)}filter(e,t,i){let s=this.filterBy.split(",");i===this.SOURCE_LIST?(this.filterValueSource=e,this.visibleOptionsSource=this.filterService.filter(t,s,this.filterValueSource,this.filterMatchMode,this.filterLocale),this.onSourceFilter.emit({query:this.filterValueSource,value:this.visibleOptionsSource})):i===this.TARGET_LIST&&(this.filterValueTarget=e,this.visibleOptionsTarget=this.filterService.filter(t,s,this.filterValueTarget,this.filterMatchMode,this.filterLocale),this.onTargetFilter.emit({query:this.filterValueTarget,value:this.visibleOptionsTarget}))}isItemVisible(e,t){return t==this.SOURCE_LIST?this.isVisibleInList(this.visibleOptionsSource,e,this.filterValueSource):this.isVisibleInList(this.visibleOptionsTarget,e,this.filterValueTarget)}isVisibleInList(e,t,i){if(!i||!i.trim().length)return!0;for(let i=0;i<e.length;i++)if(t==e[i])return!0}onItemTouchEnd(e){this.disabled||(this.itemTouched=!0)}sortByIndexInList(e,t){return e.sort((e,i)=>this.findIndexInList(e,t)-this.findIndexInList(i,t))}moveUp(e,t,i,s){if(i&&i.length){i=this.sortByIndexInList(i,t);for(let e=0;e<i.length;e++){let s=i[e],r=this.findIndexInList(s,t);if(0==r)break;{let e=t[r],i=t[r-1];t[r-1]=e,t[r]=i}}this.movedUp=!0,this.reorderedListElement=e,s.emit({items:i})}}moveTop(e,t,i,s){if(i&&i.length){i=this.sortByIndexInList(i,t);for(let e=0;e<i.length;e++){let s=i[e],r=this.findIndexInList(s,t);if(0==r)break;{let e=t.splice(r,1)[0];t.unshift(e)}}e.scrollTop=0,s.emit({items:i})}}moveDown(e,t,i,s){if(i&&i.length){for(let e=(i=this.sortByIndexInList(i,t)).length-1;e>=0;e--){let s=i[e],r=this.findIndexInList(s,t);if(r==t.length-1)break;{let e=t[r],i=t[r+1];t[r+1]=e,t[r]=i}}this.movedDown=!0,this.reorderedListElement=e,s.emit({items:i})}}moveBottom(e,t,i,s){if(i&&i.length){for(let e=(i=this.sortByIndexInList(i,t)).length-1;e>=0;e--){let s=i[e],r=this.findIndexInList(s,t);if(r==t.length-1)break;{let e=t.splice(r,1)[0];t.push(e)}}e.scrollTop=e.scrollHeight,s.emit({items:i})}}moveRight(){if(this.selectedItemsSource&&this.selectedItemsSource.length){for(let e=0;e<this.selectedItemsSource.length;e++){let t=this.selectedItemsSource[e];-1==this.findIndexInList(t,this.target)&&this.target.push(this.source.splice(this.findIndexInList(t,this.source),1)[0])}this.onMoveToTarget.emit({items:this.selectedItemsSource}),this.selectedItemsSource=[],this.filterValueTarget&&this.filter(this.filterValueTarget,this.target,this.TARGET_LIST)}}moveAllRight(){if(this.source){let e=[];for(let t=0;t<this.source.length;t++)if(this.isItemVisible(this.source[t],this.SOURCE_LIST)){let i=this.source.splice(t,1)[0];this.target.push(i),e.push(i),t--}this.onMoveAllToTarget.emit({items:e}),this.selectedItemsSource=[],this.filterValueTarget&&this.filter(this.filterValueTarget,this.target,this.TARGET_LIST)}}moveLeft(){if(this.selectedItemsTarget&&this.selectedItemsTarget.length){for(let e=0;e<this.selectedItemsTarget.length;e++){let t=this.selectedItemsTarget[e];-1==this.findIndexInList(t,this.source)&&this.source.push(this.target.splice(this.findIndexInList(t,this.target),1)[0])}this.onMoveToSource.emit({items:this.selectedItemsTarget}),this.selectedItemsTarget=[],this.filterValueSource&&this.filter(this.filterValueSource,this.source,this.SOURCE_LIST)}}moveAllLeft(){if(this.target){let e=[];for(let t=0;t<this.target.length;t++)if(this.isItemVisible(this.target[t],this.TARGET_LIST)){let i=this.target.splice(t,1)[0];this.source.push(i),e.push(i),t--}this.onMoveAllToSource.emit({items:e}),this.selectedItemsTarget=[],this.filterValueSource&&this.filter(this.filterValueSource,this.source,this.SOURCE_LIST)}}isSelected(e,t){return-1!=this.findIndexInSelection(e,t)}findIndexInSelection(e,t){return this.findIndexInList(e,t)}findIndexInList(e,t){let i=-1;if(t)for(let s=0;s<t.length;s++)if(t[s]==e){i=s;break}return i}onDragStart(e,t,i){e.dataTransfer.setData("text","b"),e.target.blur(),this.dragging=!0,this.fromListType=i,i===this.SOURCE_LIST?this.draggedItemIndexSource=t:this.draggedItemIndexTarget=t}onDragOver(e,t,i){this.dragging&&(i==this.SOURCE_LIST?(this.draggedItemIndexSource!==t&&this.draggedItemIndexSource+1!==t||this.fromListType===this.TARGET_LIST)&&(this.dragOverItemIndexSource=t,e.preventDefault()):(this.draggedItemIndexTarget!==t&&this.draggedItemIndexTarget+1!==t||this.fromListType===this.SOURCE_LIST)&&(this.dragOverItemIndexTarget=t,e.preventDefault()),this.onListItemDroppoint=!0)}onDragLeave(e,t){this.dragOverItemIndexSource=null,this.dragOverItemIndexTarget=null,this.onListItemDroppoint=!1}onDrop(e,t,i){this.onListItemDroppoint&&(i===this.SOURCE_LIST?(this.fromListType===this.TARGET_LIST?this.insert(this.draggedItemIndexTarget,this.target,t,this.source,this.onMoveToSource):(ObjectUtils.reorderArray(this.source,this.draggedItemIndexSource,this.draggedItemIndexSource>t?t:0===t?0:t-1),this.onSourceReorder.emit({items:this.source[this.draggedItemIndexSource]})),this.dragOverItemIndexSource=null):(this.fromListType===this.SOURCE_LIST?this.insert(this.draggedItemIndexSource,this.source,t,this.target,this.onMoveToTarget):(ObjectUtils.reorderArray(this.target,this.draggedItemIndexTarget,this.draggedItemIndexTarget>t?t:0===t?0:t-1),this.onTargetReorder.emit({items:this.target[this.draggedItemIndexTarget]})),this.dragOverItemIndexTarget=null),this.listHighlightTarget=!1,this.listHighlightSource=!1,e.preventDefault())}onDragEnd(e){this.dragging=!1}onListDrop(e,t){this.onListItemDroppoint||(t===this.SOURCE_LIST?this.fromListType===this.TARGET_LIST&&this.insert(this.draggedItemIndexTarget,this.target,null,this.source,this.onMoveToSource):this.fromListType===this.SOURCE_LIST&&this.insert(this.draggedItemIndexSource,this.source,null,this.target,this.onMoveToTarget),this.listHighlightTarget=!1,this.listHighlightSource=!1,e.preventDefault())}insert(e,t,i,s,r){const l=t[e];null===i?s.push(t.splice(e,1)[0]):s.splice(i,0,t.splice(e,1)[0]),r.emit({items:[l]})}onListMouseMove(e,t){if(this.dragging){let i=0==t?this.listViewSourceChild:this.listViewTargetChild,s=i.nativeElement.getBoundingClientRect().top+document.body.scrollTop,r=s+i.nativeElement.clientHeight-e.pageY,l=e.pageY-s;r<25&&r>0?i.nativeElement.scrollTop+=15:l<25&&l>0&&(i.nativeElement.scrollTop-=15),t===this.SOURCE_LIST?this.fromListType===this.TARGET_LIST&&(this.listHighlightSource=!0):this.fromListType===this.SOURCE_LIST&&(this.listHighlightTarget=!0),e.preventDefault()}}onListDragLeave(){this.listHighlightTarget=!1,this.listHighlightSource=!1}resetFilter(){this.visibleOptionsSource=null,this.filterValueSource=null,this.visibleOptionsTarget=null,this.filterValueTarget=null,this.sourceFilterViewChild.nativeElement.value="",this.targetFilterViewChild.nativeElement.value=""}onItemKeydown(e,t,i,s){let r=e.currentTarget;switch(e.which){case 40:var l=this.findNextItem(r);l&&l.focus(),e.preventDefault();break;case 38:var n=this.findPrevItem(r);n&&n.focus(),e.preventDefault();break;case 13:this.onItemClick(e,t,i,s),e.preventDefault()}}findNextItem(e){let t=e.nextElementSibling;return t?!DomHandler.hasClass(t,"p-picklist-item")||DomHandler.isHidden(t)?this.findNextItem(t):t:null}findPrevItem(e){let t=e.previousElementSibling;return t?!DomHandler.hasClass(t,"p-picklist-item")||DomHandler.isHidden(t)?this.findPrevItem(t):t:null}};PickList.decorators=[{type:Component,args:[{selector:"p-pickList",template:'\n        <div [class]="styleClass" [ngStyle]="style" [ngClass]="\'p-picklist p-component\'">\n            <div class="p-picklist-buttons p-picklist-source-controls" *ngIf="showSourceControls">\n                <button type="button" pButton pRipple icon="pi pi-angle-up" [disabled]="disabled" (click)="moveUp(sourcelist,source,selectedItemsSource,onSourceReorder)"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-double-up" [disabled]="disabled" (click)="moveTop(sourcelist,source,selectedItemsSource,onSourceReorder)"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-down" [disabled]="disabled" (click)="moveDown(sourcelist,source,selectedItemsSource,onSourceReorder)"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-double-down" [disabled]="disabled" (click)="moveBottom(sourcelist,source,selectedItemsSource,onSourceReorder)"></button>\n            </div>\n            <div class="p-picklist-list-wrapper p-picklist-source-wrapper">\n                <div class="p-picklist-header" *ngIf="sourceHeader">\n                    <div class="p-picklist-title">{{sourceHeader}}</div>\n                </div>\n                <div class="p-picklist-filter-container" *ngIf="filterBy && showSourceFilter !== false">\n                    <div class="p-picklist-filter">\n                        <input #sourceFilter type="text" role="textbox" (keyup)="onFilter($event,source,SOURCE_LIST)" class="p-picklist-filter-input p-inputtext p-component" [disabled]="disabled" [attr.placeholder]="sourceFilterPlaceholder" [attr.aria-label]="ariaSourceFilterLabel">\n                        <span class="p-picklist-filter-icon pi pi-search"></span>\n                    </div>\n                </div>\n                \n                <ul #sourcelist class="p-picklist-list p-picklist-source" [ngClass]="{\'p-picklist-list-highlight\': listHighlightSource}"\n                    [ngStyle]="sourceStyle" (dragover)="onListMouseMove($event,SOURCE_LIST)" (dragleave)="onListDragLeave()" (drop)="onListDrop($event, SOURCE_LIST)" role="listbox" aria-multiselectable="multiple">\n                    <ng-template ngFor let-item [ngForOf]="source" [ngForTrackBy]="sourceTrackBy || trackBy" let-i="index" let-l="last">\n                        <li class="p-picklist-droppoint" *ngIf="dragdrop" (dragover)="onDragOver($event, i, SOURCE_LIST)" (drop)="onDrop($event, i, SOURCE_LIST)" (dragleave)="onDragLeave($event, SOURCE_LIST)"\n                        [ngClass]="{\'p-picklist-droppoint-highlight\': (i === dragOverItemIndexSource)}" [style.display]="isItemVisible(item, SOURCE_LIST) ? \'block\' : \'none\'"></li>\n                        <li [ngClass]="{\'p-picklist-item\':true,\'p-highlight\':isSelected(item,selectedItemsSource),\'p-disabled\': disabled}" pRipple\n                            (click)="onItemClick($event,item,selectedItemsSource,onSourceSelect)" (dblclick)="onSourceItemDblClick()" (touchend)="onItemTouchEnd($event)" (keydown)="onItemKeydown($event,item,selectedItemsSource,onSourceSelect)"\n                            [style.display]="isItemVisible(item, SOURCE_LIST) ? \'block\' : \'none\'" tabindex="0" role="option" [attr.aria-selected]="isSelected(item, selectedItemsSource)"\n                            [attr.draggable]="dragdrop" (dragstart)="onDragStart($event, i, SOURCE_LIST)" (dragend)="onDragEnd($event)">\n                            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>\n                        </li>\n                        <li class="p-picklist-droppoint" *ngIf="dragdrop&&l" (dragover)="onDragOver($event, i + 1, SOURCE_LIST)" (drop)="onDrop($event, i + 1, SOURCE_LIST)" (dragleave)="onDragLeave($event, SOURCE_LIST)"\n                        [ngClass]="{\'p-picklist-droppoint-highlight\': (i + 1 === dragOverItemIndexSource)}"></li>\n                    </ng-template>\n                    <ng-container *ngIf="(source == null || source.length === 0) && emptyMessageSourceTemplate">\n                        <li class="p-picklist-empty-message">\n                            <ng-container *ngTemplateOutlet="emptyMessageSourceTemplate"></ng-container>\n                        </li>\n                    </ng-container>\n                </ul>\n            </div>\n            <div class="p-picklist-buttons p-picklist-transfer-buttons">\n                <button type="button" pButton pRipple icon="pi pi-angle-right" [disabled]="disabled" (click)="moveRight()"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-double-right" [disabled]="disabled" (click)="moveAllRight()"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-left" [disabled]="disabled" (click)="moveLeft()"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-double-left" [disabled]="disabled" (click)="moveAllLeft()"></button>\n            </div>\n            <div class="p-picklist-list-wrapper p-picklist-target-wrapper">\n                <div class="p-picklist-header" *ngIf="targetHeader">\n                    <div class="p-picklist-title" *ngIf="targetHeader">{{targetHeader}}</div>\n                </div>\n                <div class="p-picklist-filter-container" *ngIf="filterBy && showTargetFilter !== false">\n                    <div class="p-picklist-filter">\n                        <input #targetFilter type="text" role="textbox" (keyup)="onFilter($event,target,TARGET_LIST)" class="p-picklist-filter-input p-inputtext p-component" [disabled]="disabled" [attr.placeholder]="targetFilterPlaceholder" [attr.aria-label]="ariaTargetFilterLabel">\n                        <span class="p-picklist-filter-icon pi pi-search"></span>\n                    </div>\n                </div>\n                <ul #targetlist class="p-picklist-list p-picklist-target" [ngClass]="{\'p-picklist-list-highlight\': listHighlightTarget}"\n                    [ngStyle]="targetStyle" (dragover)="onListMouseMove($event,TARGET_LIST)" (dragleave)="onListDragLeave()" (drop)="onListDrop($event,TARGET_LIST)" role="listbox" aria-multiselectable="multiple">\n                    <ng-template ngFor let-item [ngForOf]="target" [ngForTrackBy]="targetTrackBy || trackBy" let-i="index" let-l="last">\n                        <li class="p-picklist-droppoint" *ngIf="dragdrop" (dragover)="onDragOver($event, i, TARGET_LIST)" (drop)="onDrop($event, i, TARGET_LIST)" (dragleave)="onDragLeave($event, TARGET_LIST)"\n                        [ngClass]="{\'p-picklist-droppoint-highlight\': (i === dragOverItemIndexTarget)}" [style.display]="isItemVisible(item, TARGET_LIST) ? \'block\' : \'none\'"></li>\n                        <li [ngClass]="{\'p-picklist-item\':true,\'p-highlight\':isSelected(item,selectedItemsTarget), \'p-disabled\': disabled}" pRipple\n                            (click)="onItemClick($event,item,selectedItemsTarget,onTargetSelect)" (dblclick)="onTargetItemDblClick()" (touchend)="onItemTouchEnd($event)" (keydown)="onItemKeydown($event,item,selectedItemsTarget,onTargetSelect)"\n                            [style.display]="isItemVisible(item, TARGET_LIST) ? \'block\' : \'none\'" tabindex="0" role="option" [attr.aria-selected]="isSelected(item, selectedItemsTarget)"\n                            [attr.draggable]="dragdrop" (dragstart)="onDragStart($event, i, TARGET_LIST)" (dragend)="onDragEnd($event)">\n                            <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: item, index: i}"></ng-container>\n                        </li>\n                        <li class="p-picklist-droppoint" *ngIf="dragdrop&&l" (dragover)="onDragOver($event, i + 1, TARGET_LIST)" (drop)="onDrop($event, i + 1, TARGET_LIST)" (dragleave)="onDragLeave($event, TARGET_LIST)"\n                        [ngClass]="{\'p-picklist-droppoint-highlight\': (i + 1 === dragOverItemIndexTarget)}"></li>\n                    </ng-template>\n                    <ng-container *ngIf="(target == null || target.length === 0) && emptyMessageTargetTemplate">\n                        <li class="p-picklist-empty-message">\n                            <ng-container *ngTemplateOutlet="emptyMessageTargetTemplate"></ng-container>\n                        </li>\n                    </ng-container>\n                </ul>\n            </div>\n            <div class="p-picklist-buttons p-picklist-target-controls" *ngIf="showTargetControls">\n                <button type="button" pButton pRipple icon="pi pi-angle-up" [disabled]="disabled" (click)="moveUp(targetlist,target,selectedItemsTarget,onTargetReorder)"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-double-up" [disabled]="disabled" (click)="moveTop(targetlist,target,selectedItemsTarget,onTargetReorder)"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-down" [disabled]="disabled" (click)="moveDown(targetlist,target,selectedItemsTarget,onTargetReorder)"></button>\n                <button type="button" pButton pRipple icon="pi pi-angle-double-down" [disabled]="disabled" (click)="moveBottom(targetlist,target,selectedItemsTarget,onTargetReorder)"></button>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-picklist{display:flex}.p-picklist-buttons{display:flex;flex-direction:column;justify-content:center}.p-picklist-list-wrapper{flex:1 1 50%}.p-picklist-list{list-style-type:none;margin:0;max-height:24rem;min-height:12rem;overflow:auto;padding:0}.p-picklist-item{cursor:pointer;overflow:hidden;position:relative}.p-picklist-item[draggable=true]{cursor:move}.p-picklist-filter{position:relative}.p-picklist-filter-icon{margin-top:-.5rem;position:absolute;top:50%}.p-picklist-filter-input{width:100%}.p-picklist-droppoint{height:6px}"]}]}],PickList.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef},{type:FilterService}]),PickList.propDecorators={source:[{type:Input}],target:[{type:Input}],sourceHeader:[{type:Input}],targetHeader:[{type:Input}],responsive:[{type:Input}],filterBy:[{type:Input}],filterLocale:[{type:Input}],trackBy:[{type:Input}],sourceTrackBy:[{type:Input}],targetTrackBy:[{type:Input}],showSourceFilter:[{type:Input}],showTargetFilter:[{type:Input}],metaKeySelection:[{type:Input}],dragdrop:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],sourceStyle:[{type:Input}],targetStyle:[{type:Input}],showSourceControls:[{type:Input}],showTargetControls:[{type:Input}],sourceFilterPlaceholder:[{type:Input}],targetFilterPlaceholder:[{type:Input}],disabled:[{type:Input}],ariaSourceFilterLabel:[{type:Input}],ariaTargetFilterLabel:[{type:Input}],filterMatchMode:[{type:Input}],onMoveToSource:[{type:Output}],onMoveAllToSource:[{type:Output}],onMoveAllToTarget:[{type:Output}],onMoveToTarget:[{type:Output}],onSourceReorder:[{type:Output}],onTargetReorder:[{type:Output}],onSourceSelect:[{type:Output}],onTargetSelect:[{type:Output}],onSourceFilter:[{type:Output}],onTargetFilter:[{type:Output}],listViewSourceChild:[{type:ViewChild,args:["sourcelist"]}],listViewTargetChild:[{type:ViewChild,args:["targetlist"]}],sourceFilterViewChild:[{type:ViewChild,args:["sourceFilter"]}],targetFilterViewChild:[{type:ViewChild,args:["targetFilter"]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}]};export class PickListModule{};PickListModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,ButtonModule,SharedModule,RippleModule],exports:[PickList,SharedModule],declarations:[PickList]}]}];