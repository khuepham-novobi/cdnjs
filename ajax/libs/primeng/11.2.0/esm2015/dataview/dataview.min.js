import{NgModule,Component,ElementRef,Input,Output,EventEmitter,ContentChild,ContentChildren,ChangeDetectionStrategy,ChangeDetectorRef,ViewEncapsulation}from"@angular/core";import{CommonModule}from"@angular/common";import{ObjectUtils}from"primeng/utils";import{Header,Footer,PrimeTemplate,SharedModule,FilterService}from"primeng/api";import{PaginatorModule}from"primeng/paginator";export class DataView{constructor(t,e,a){this.el=t,this.cd=e,this.filterService=a,this.layout="list",this.pageLinks=5,this.paginatorPosition="bottom",this.alwaysShowPaginator=!0,this.paginatorDropdownScrollHeight="200px",this.currentPageReportTemplate="{currentPage} of {totalPages}",this.showFirstLastIcon=!0,this.showPageLinks=!0,this.emptyMessage="No records found",this.onLazyLoad=new EventEmitter,this.trackBy=((t,e)=>e),this.loadingIcon="pi pi-spinner",this.first=0,this.onPage=new EventEmitter,this.onSort=new EventEmitter,this.onChangeLayout=new EventEmitter}ngOnInit(){this.lazy&&this.onLazyLoad.emit(this.createLazyLoadMetadata()),this.initialized=!0}ngOnChanges(t){t.value&&(this._value=t.value.currentValue,this.updateTotalRecords(),!this.lazy&&this.hasFilter()&&this.filter(this.filterValue)),(t.sortField||t.sortOrder)&&(this.lazy&&!this.initialized||this.sort())}ngAfterContentInit(){this.templates.forEach(t=>{switch(t.getType()){case"listItem":this.listItemTemplate=t.template;break;case"gridItem":this.gridItemTemplate=t.template;break;case"paginatorleft":this.paginatorLeftTemplate=t.template;break;case"paginatorright":this.paginatorRightTemplate=t.template;break;case"paginatordropdownitem":this.paginatorDropdownItemTemplate=t.template;break;case"header":this.headerTemplate=t.template;break;case"footer":this.footerTemplate=t.template}}),this.updateItemTemplate()}updateItemTemplate(){switch(this.layout){case"list":this.itemTemplate=this.listItemTemplate;break;case"grid":this.itemTemplate=this.gridItemTemplate}}changeLayout(t){this.layout=t,this.onChangeLayout.emit({layout:this.layout}),this.updateItemTemplate(),this.cd.markForCheck()}updateTotalRecords(){this.totalRecords=this.lazy?this.totalRecords:this._value?this._value.length:0}paginate(t){this.first=t.first,this.rows=t.rows,this.lazy&&this.onLazyLoad.emit(this.createLazyLoadMetadata()),this.onPage.emit({first:this.first,rows:this.rows})}sort(){this.first=0,this.lazy?this.onLazyLoad.emit(this.createLazyLoadMetadata()):this.value&&(this.value.sort((t,e)=>{let a=ObjectUtils.resolveFieldData(t,this.sortField),o=ObjectUtils.resolveFieldData(e,this.sortField),i=null;return i=null==a&&null!=o?-1:null!=a&&null==o?1:null==a&&null==o?0:"string"==typeof a&&"string"==typeof o?a.localeCompare(o):a<o?-1:a>o?1:0,this.sortOrder*i}),this.hasFilter()&&this.filter(this.filterValue)),this.onSort.emit({sortField:this.sortField,sortOrder:this.sortOrder})}isEmpty(){let t=this.filteredValue||this.value;return null==t||0==t.length}createLazyLoadMetadata(){return{first:this.first,rows:this.rows,sortField:this.sortField,sortOrder:this.sortOrder}}getBlockableElement(){return this.el.nativeElement.children[0]}filter(t,e="contains"){if(this.filterValue=t,this.value&&this.value.length){let a=this.filterBy.split(",");this.filteredValue=this.filterService.filter(this.value,a,t,e,this.filterLocale),this.filteredValue.length===this.value.length&&(this.filteredValue=null),this.paginator&&(this.first=0,this.totalRecords=this.filteredValue?this.filteredValue.length:this.value?this.value.length:0),this.cd.markForCheck()}}hasFilter(){return this.filterValue&&this.filterValue.trim().length>0}};DataView.decorators=[{type:Component,args:[{selector:"p-dataView",template:'\n        <div [ngClass]="{\'p-dataview p-component\': true, \'p-dataview-list\': (layout === \'list\'), \'p-dataview-grid\': (layout === \'grid\')}" [ngStyle]="style" [class]="styleClass">\n            <div class="p-dataview-loading" *ngIf="loading">\n                <div class="p-dataview-loading-overlay p-component-overlay">\n                    <i [class]="\'p-dataview-loading-icon pi-spin \' + loadingIcon"></i>\n                </div>\n            </div>\n            <div class="p-dataview-header" *ngIf="header || headerTemplate">\n                <ng-content select="p-header"></ng-content>\n                <ng-container *ngTemplateOutlet="headerTemplate"></ng-container>\n            </div>\n            <p-paginator [rows]="rows" [first]="first" [totalRecords]="totalRecords" [pageLinkSize]="pageLinks" [alwaysShow]="alwaysShowPaginator"\n                (onPageChange)="paginate($event)" styleClass="p-paginator-top" [rowsPerPageOptions]="rowsPerPageOptions" *ngIf="paginator && (paginatorPosition === \'top\' || paginatorPosition ==\'both\')"\n                [dropdownAppendTo]="paginatorDropdownAppendTo" [dropdownScrollHeight]="paginatorDropdownScrollHeight" [templateLeft]="paginatorLeftTemplate" [templateRight]="paginatorRightTemplate"\n                [currentPageReportTemplate]="currentPageReportTemplate" [showFirstLastIcon]="showFirstLastIcon" [dropdownItemTemplate]="paginatorDropdownItemTemplate" [showCurrentPageReport]="showCurrentPageReport" [showJumpToPageDropdown]="showJumpToPageDropdown" [showPageLinks]="showPageLinks"></p-paginator>\n            <div class="p-dataview-content">\n                <div class="p-grid p-nogutter">\n                    <ng-template ngFor let-rowData let-rowIndex="index" [ngForOf]="paginator ? ((filteredValue||value) | slice:(lazy ? 0 : first):((lazy ? 0 : first) + rows)) : (filteredValue||value)" [ngForTrackBy]="trackBy">\n                        <ng-container *ngTemplateOutlet="itemTemplate; context: {$implicit: rowData, rowIndex: rowIndex}"></ng-container>\n                    </ng-template>\n                    <div *ngIf="isEmpty()" class="p-col">\n                        <div class="p-dataview-emptymessage">{{emptyMessage}}</div>\n                    </div>\n                </div>\n            </div>\n            <p-paginator [rows]="rows" [first]="first" [totalRecords]="totalRecords" [pageLinkSize]="pageLinks" [alwaysShow]="alwaysShowPaginator"\n                (onPageChange)="paginate($event)" styleClass="p-paginator-bottom" [rowsPerPageOptions]="rowsPerPageOptions" *ngIf="paginator && (paginatorPosition === \'bottom\' || paginatorPosition ==\'both\')"\n                [dropdownAppendTo]="paginatorDropdownAppendTo" [dropdownScrollHeight]="paginatorDropdownScrollHeight" [templateLeft]="paginatorLeftTemplate" [templateRight]="paginatorRightTemplate"\n                [currentPageReportTemplate]="currentPageReportTemplate" [showFirstLastIcon]="showFirstLastIcon" [dropdownItemTemplate]="paginatorDropdownItemTemplate" [showCurrentPageReport]="showCurrentPageReport" [showJumpToPageDropdown]="showJumpToPageDropdown" [showPageLinks]="showPageLinks"></p-paginator>\n            <div class="p-dataview-footer" *ngIf="footer || footerTemplate">\n                <ng-content select="p-footer"></ng-content>\n                <ng-container *ngTemplateOutlet="footerTemplate"></ng-container>\n            </div>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-dataview{position:relative}.p-dataview .p-dataview-loading-overlay{align-items:center;display:flex;justify-content:center;position:absolute;z-index:2}"]}]}],DataView.ctorParameters=(()=>[{type:ElementRef},{type:ChangeDetectorRef},{type:FilterService}]),DataView.propDecorators={layout:[{type:Input}],paginator:[{type:Input}],rows:[{type:Input}],totalRecords:[{type:Input}],pageLinks:[{type:Input}],rowsPerPageOptions:[{type:Input}],paginatorPosition:[{type:Input}],alwaysShowPaginator:[{type:Input}],paginatorDropdownAppendTo:[{type:Input}],paginatorDropdownScrollHeight:[{type:Input}],currentPageReportTemplate:[{type:Input}],showCurrentPageReport:[{type:Input}],showJumpToPageDropdown:[{type:Input}],showFirstLastIcon:[{type:Input}],showPageLinks:[{type:Input}],lazy:[{type:Input}],emptyMessage:[{type:Input}],onLazyLoad:[{type:Output}],style:[{type:Input}],styleClass:[{type:Input}],trackBy:[{type:Input}],filterBy:[{type:Input}],filterLocale:[{type:Input}],loading:[{type:Input}],loadingIcon:[{type:Input}],first:[{type:Input}],sortField:[{type:Input}],sortOrder:[{type:Input}],value:[{type:Input}],onPage:[{type:Output}],onSort:[{type:Output}],onChangeLayout:[{type:Output}],header:[{type:ContentChild,args:[Header]}],footer:[{type:ContentChild,args:[Footer]}],templates:[{type:ContentChildren,args:[PrimeTemplate]}]};export class DataViewLayoutOptions{constructor(t){this.dv=t}changeLayout(t,e){this.dv.changeLayout(e),t.preventDefault()}};DataViewLayoutOptions.decorators=[{type:Component,args:[{selector:"p-dataViewLayoutOptions",template:'\n        <div [ngClass]="\'p-dataview-layout-options p-selectbutton p-buttonset\'" [ngStyle]="style" [class]="styleClass">\n            <button type="button" class="p-button p-button-icon-only" [ngClass]="{\'p-highlight\': dv.layout === \'list\'}" (click)="changeLayout($event, \'list\')" (keydown.enter)="changeLayout($event, \'list\')">\n                <i class="pi pi-bars"></i>\n            </button><button type="button" class="p-button p-button-icon-only" [ngClass]="{\'p-highlight\': dv.layout === \'grid\'}" (click)="changeLayout($event, \'grid\')" (keydown.enter)="changeLayout($event, \'grid\')">\n                <i class="pi pi-th-large"></i>\n            </button>\n        </div>\n    ',encapsulation:ViewEncapsulation.None}]}],DataViewLayoutOptions.ctorParameters=(()=>[{type:DataView}]),DataViewLayoutOptions.propDecorators={style:[{type:Input}],styleClass:[{type:Input}]};export class DataViewModule{};DataViewModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,SharedModule,PaginatorModule],exports:[DataView,SharedModule,DataViewLayoutOptions],declarations:[DataView,DataViewLayoutOptions]}]}];