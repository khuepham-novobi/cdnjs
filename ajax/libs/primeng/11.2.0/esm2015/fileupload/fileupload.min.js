import{NgModule,Component,Input,Output,EventEmitter,ContentChildren,ViewChild,ElementRef,NgZone,ChangeDetectionStrategy,ViewEncapsulation,ChangeDetectorRef}from"@angular/core";import{CommonModule}from"@angular/common";import{DomSanitizer}from"@angular/platform-browser";import{ButtonModule}from"primeng/button";import{MessagesModule}from"primeng/messages";import{ProgressBarModule}from"primeng/progressbar";import{DomHandler}from"primeng/dom";import{TranslationKeys}from"primeng/api";import{PrimeTemplate,SharedModule,PrimeNGConfig}from"primeng/api";import{RippleModule}from"primeng/ripple";import{HttpClient,HttpEventType}from"@angular/common/http";export class FileUpload{constructor(e,t,i,s,l,n){this.el=e,this.sanitizer=t,this.zone=i,this.http=s,this.cd=l,this.config=n,this.method="post",this.invalidFileSizeMessageSummary="{0}: Invalid file size, ",this.invalidFileSizeMessageDetail="maximum upload size is {0}.",this.invalidFileTypeMessageSummary="{0}: Invalid file type, ",this.invalidFileTypeMessageDetail="allowed file types: {0}.",this.invalidFileLimitMessageDetail="limit is {0} at most.",this.invalidFileLimitMessageSummary="Maximum number of files exceeded, ",this.previewWidth=50,this.chooseIcon="pi pi-plus",this.uploadIcon="pi pi-upload",this.cancelIcon="pi pi-times",this.showUploadButton=!0,this.showCancelButton=!0,this.mode="advanced",this.onBeforeUpload=new EventEmitter,this.onSend=new EventEmitter,this.onUpload=new EventEmitter,this.onError=new EventEmitter,this.onClear=new EventEmitter,this.onRemove=new EventEmitter,this.onSelect=new EventEmitter,this.onProgress=new EventEmitter,this.uploadHandler=new EventEmitter,this._files=[],this.progress=0,this.uploadedFileCount=0}set files(e){this._files=[];for(let t=0;t<e.length;t++){let i=e[t];this.validate(i)&&(this.isImage(i)&&(i.objectURL=this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(e[t]))),this._files.push(e[t]))}}get files(){return this._files}ngAfterContentInit(){this.templates.forEach(e=>{switch(e.getType()){case"file":this.fileTemplate=e.template;break;case"content":this.contentTemplate=e.template;break;case"toolbar":this.toolbarTemplate=e.template;break;default:this.fileTemplate=e.template}})}ngAfterViewInit(){"advanced"===this.mode&&this.zone.runOutsideAngular(()=>{this.content&&this.content.nativeElement.addEventListener("dragover",this.onDragOver.bind(this))})}choose(){this.advancedFileInput.nativeElement.click()}onFileSelect(e){if("drop"!==e.type&&this.isIE11()&&this.duplicateIEEvent)return void(this.duplicateIEEvent=!1);this.msgs=[],this.multiple||(this.files=[]);let t=e.dataTransfer?e.dataTransfer.files:e.target.files;for(let e=0;e<t.length;e++){let i=t[e];this.isFileSelected(i)||this.validate(i)&&(this.isImage(i)&&(i.objectURL=this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(t[e]))),this.files.push(t[e]))}this.onSelect.emit({originalEvent:e,files:t,currentFiles:this.files}),this.fileLimit&&"advanced"==this.mode&&this.checkFileLimit(),!this.hasFiles()||!this.auto||"advanced"===this.mode&&this.isFileLimitExceeded()||this.upload(),"drop"!==e.type&&this.isIE11()?this.clearIEInput():this.clearInputElement()}isFileSelected(e){for(let t of this.files)if(t.name+t.type+t.size===e.name+e.type+e.size)return!0;return!1}isIE11(){return!!window.MSInputMethodContext&&!!document.documentMode}validate(e){return this.accept&&!this.isFileTypeValid(e)?(this.msgs.push({severity:"error",summary:this.invalidFileTypeMessageSummary.replace("{0}",e.name),detail:this.invalidFileTypeMessageDetail.replace("{0}",this.accept)}),!1):!(this.maxFileSize&&e.size>this.maxFileSize)||(this.msgs.push({severity:"error",summary:this.invalidFileSizeMessageSummary.replace("{0}",e.name),detail:this.invalidFileSizeMessageDetail.replace("{0}",this.formatSize(this.maxFileSize))}),!1)}isFileTypeValid(e){let t=this.accept.split(",").map(e=>e.trim());for(let i of t){if(this.isWildcard(i)?this.getTypeClass(e.type)===this.getTypeClass(i):e.type==i||this.getFileExtension(e).toLowerCase()===i.toLowerCase())return!0}return!1}getTypeClass(e){return e.substring(0,e.indexOf("/"))}isWildcard(e){return-1!==e.indexOf("*")}getFileExtension(e){return"."+e.name.split(".").pop()}isImage(e){return/^image\//.test(e.type)}onImageLoad(e){window.URL.revokeObjectURL(e.src)}upload(){if(this.customUpload)this.fileLimit&&(this.uploadedFileCount+=this.files.length),this.uploadHandler.emit({files:this.files}),this.cd.markForCheck();else{this.uploading=!0,this.msgs=[];let e=new FormData;this.onBeforeUpload.emit({formData:e});for(let t=0;t<this.files.length;t++)e.append(this.name,this.files[t],this.files[t].name);this.http[this.method](this.url,e,{headers:this.headers,reportProgress:!0,observe:"events",withCredentials:this.withCredentials}).subscribe(t=>{switch(t.type){case HttpEventType.Sent:this.onSend.emit({originalEvent:t,formData:e});break;case HttpEventType.Response:this.uploading=!1,this.progress=0,t.status>=200&&t.status<300?(this.fileLimit&&(this.uploadedFileCount+=this.files.length),this.onUpload.emit({originalEvent:t,files:this.files})):this.onError.emit({files:this.files}),this.clear();break;case HttpEventType.UploadProgress:t.loaded&&(this.progress=Math.round(100*t.loaded/t.total)),this.onProgress.emit({originalEvent:t,progress:this.progress})}this.cd.markForCheck()},e=>{this.uploading=!1,this.onError.emit({files:this.files,error:e})})}}clear(){this.files=[],this.onClear.emit(),this.clearInputElement(),this.cd.markForCheck()}remove(e,t){this.clearInputElement(),this.onRemove.emit({originalEvent:e,file:this.files[t]}),this.files.splice(t,1)}isFileLimitExceeded(){return this.fileLimit&&this.fileLimit<=this.files.length+this.uploadedFileCount&&this.focus&&(this.focus=!1),this.fileLimit&&this.fileLimit<this.files.length+this.uploadedFileCount}isChooseDisabled(){return this.fileLimit&&this.fileLimit<=this.files.length+this.uploadedFileCount}checkFileLimit(){this.isFileLimitExceeded()&&this.msgs.push({severity:"error",summary:this.invalidFileLimitMessageSummary.replace("{0}",this.fileLimit.toString()),detail:this.invalidFileLimitMessageDetail.replace("{0}",this.fileLimit.toString())})}clearInputElement(){this.advancedFileInput&&this.advancedFileInput.nativeElement&&(this.advancedFileInput.nativeElement.value=""),this.basicFileInput&&this.basicFileInput.nativeElement&&(this.basicFileInput.nativeElement.value="")}clearIEInput(){this.advancedFileInput&&this.advancedFileInput.nativeElement&&(this.duplicateIEEvent=!0,this.advancedFileInput.nativeElement.value="")}hasFiles(){return this.files&&this.files.length>0}onDragEnter(e){this.disabled||(e.stopPropagation(),e.preventDefault())}onDragOver(e){this.disabled||(DomHandler.addClass(this.content.nativeElement,"p-fileupload-highlight"),this.dragHighlight=!0,e.stopPropagation(),e.preventDefault())}onDragLeave(e){this.disabled||DomHandler.removeClass(this.content.nativeElement,"p-fileupload-highlight")}onDrop(e){if(!this.disabled){DomHandler.removeClass(this.content.nativeElement,"p-fileupload-highlight"),e.stopPropagation(),e.preventDefault();let t=e.dataTransfer?e.dataTransfer.files:e.target.files;(this.multiple||t&&1===t.length)&&this.onFileSelect(e)}}onFocus(){this.focus=!0}onBlur(){this.focus=!1}formatSize(e){if(0==e)return"0 B";let t=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,t)).toFixed(3))+" "+["B","KB","MB","GB","TB","PB","EB","ZB","YB"][t]}onBasicUploaderClick(){this.hasFiles()?this.upload():this.basicFileInput.nativeElement.click()}getBlockableElement(){return this.el.nativeElement.children[0]}get chooseButtonLabel(){return this.chooseLabel||this.config.getTranslation(TranslationKeys.CHOOSE)}get uploadButtonLabel(){return this.uploadLabel||this.config.getTranslation(TranslationKeys.UPLOAD)}get cancelButtonLabel(){return this.cancelLabel||this.config.getTranslation(TranslationKeys.CANCEL)}ngOnDestroy(){this.content&&this.content.nativeElement&&this.content.nativeElement.removeEventListener("dragover",this.onDragOver)}};FileUpload.decorators=[{type:Component,args:[{selector:"p-fileUpload",template:'\n        <div [ngClass]="\'p-fileupload p-fileupload-advanced p-component\'" [ngStyle]="style" [class]="styleClass" *ngIf="mode === \'advanced\'">\n            <div class="p-fileupload-buttonbar">\n                <span class="p-button p-component p-fileupload-choose" [ngClass]="{\'p-focus\': focus, \'p-disabled\':disabled || isChooseDisabled()}" (focus)="onFocus()" (blur)="onBlur()" pRipple\n                    (click)="choose()" (keydown.enter)="choose()" tabindex="0"> \n                    <input #advancedfileinput type="file" (change)="onFileSelect($event)" [multiple]="multiple" [accept]="accept" [disabled]="disabled || isChooseDisabled()" [attr.title]="\'\'">\n                    <span [ngClass]="\'p-button-icon p-button-icon-left\'" [class]="chooseIcon"></span>\n                    <span class="p-button-label">{{chooseButtonLabel}}</span>\n                </span>\n\n                <p-button *ngIf="!auto&&showUploadButton" type="button" [label]="uploadButtonLabel" [icon]="uploadIcon" (onClick)="upload()" [disabled]="!hasFiles() || isFileLimitExceeded()"></p-button>\n                <p-button *ngIf="!auto&&showCancelButton" type="button" [label]="cancelButtonLabel" [icon]="cancelIcon" (onClick)="clear()" [disabled]="!hasFiles() ||Â uploading"></p-button>\n\n                <ng-container *ngTemplateOutlet="toolbarTemplate"></ng-container>\n            </div>\n            <div #content class="p-fileupload-content" (dragenter)="onDragEnter($event)" (dragleave)="onDragLeave($event)" (drop)="onDrop($event)">\n                <p-progressBar [value]="progress" [showValue]="false" *ngIf="hasFiles()"></p-progressBar>\n\n                <p-messages [value]="msgs" [enableService]="false"></p-messages>\n\n                <div class="p-fileupload-files" *ngIf="hasFiles()">\n                    <div *ngIf="!fileTemplate">\n                        <div class="p-fileupload-row" *ngFor="let file of files; let i = index;">\n                            <div><img [src]="file.objectURL" *ngIf="isImage(file)" [width]="previewWidth" /></div>\n                            <div>{{file.name}}</div>\n                            <div>{{formatSize(file.size)}}</div>\n                            <div>\n                                <button type="button" icon="pi pi-times" pButton (click)="remove($event,i)" [disabled]="uploading"></button>\n                            </div>\n                        </div>\n                    </div>\n                    <div *ngIf="fileTemplate">\n                        <ng-template ngFor [ngForOf]="files" [ngForTemplate]="fileTemplate"></ng-template>\n                    </div>\n                </div>\n                <ng-container *ngTemplateOutlet="contentTemplate; context: {$implicit: files}"></ng-container>\n            </div>\n        </div>\n        <div class="p-fileupload p-fileupload-basic p-component" *ngIf="mode === \'basic\'">\n            <p-messages [value]="msgs" [enableService]="false"></p-messages>\n            <span [ngClass]="{\'p-button p-component p-fileupload-choose\': true, \'p-button-icon-only\': !chooseLabel, \'p-fileupload-choose-selected\': hasFiles(),\'p-focus\': focus, \'p-disabled\':disabled}"\n                [ngStyle]="style" [class]="styleClass" (mouseup)="onBasicUploaderClick()" (keydown)="onBasicUploaderClick()" tabindex="0" pRipple>\n                <span class="p-button-icon p-button-icon-left pi" [ngClass]="hasFiles()&&!auto ? uploadIcon : chooseIcon"></span>\n                <span class="p-button-label">{{auto ? chooseLabel : hasFiles() ? files[0].name : chooseLabel}}</span>\n                <input #basicfileinput type="file" [accept]="accept" [multiple]="multiple" [disabled]="disabled"\n                    (change)="onFileSelect($event)" *ngIf="!hasFiles()" (focus)="onFocus()" (blur)="onBlur()">\n            </span>\n        </div>\n    ',changeDetection:ChangeDetectionStrategy.OnPush,encapsulation:ViewEncapsulation.None,styles:[".p-fileupload-content{position:relative}.p-fileupload-row{align-items:center;display:flex}.p-fileupload-row>div{flex:1 1 auto;width:25%}.p-fileupload-row>div:last-child{text-align:right}.p-fileupload-content .p-progressbar{left:0;position:absolute;top:0;width:100%}.p-button.p-fileupload-choose{overflow:hidden;position:relative}.p-button.p-fileupload-choose input[type=file],.p-fileupload-choose.p-fileupload-choose-selected input[type=file]{display:none}.p-fluid .p-fileupload .p-button{width:auto}"]}]}],FileUpload.ctorParameters=(()=>[{type:ElementRef},{type:DomSanitizer},{type:NgZone},{type:HttpClient},{type:ChangeDetectorRef},{type:PrimeNGConfig}]),FileUpload.propDecorators={name:[{type:Input}],url:[{type:Input}],method:[{type:Input}],multiple:[{type:Input}],accept:[{type:Input}],disabled:[{type:Input}],auto:[{type:Input}],withCredentials:[{type:Input}],maxFileSize:[{type:Input}],invalidFileSizeMessageSummary:[{type:Input}],invalidFileSizeMessageDetail:[{type:Input}],invalidFileTypeMessageSummary:[{type:Input}],invalidFileTypeMessageDetail:[{type:Input}],invalidFileLimitMessageDetail:[{type:Input}],invalidFileLimitMessageSummary:[{type:Input}],style:[{type:Input}],styleClass:[{type:Input}],previewWidth:[{type:Input}],chooseLabel:[{type:Input}],uploadLabel:[{type:Input}],cancelLabel:[{type:Input}],chooseIcon:[{type:Input}],uploadIcon:[{type:Input}],cancelIcon:[{type:Input}],showUploadButton:[{type:Input}],showCancelButton:[{type:Input}],mode:[{type:Input}],headers:[{type:Input}],customUpload:[{type:Input}],fileLimit:[{type:Input}],onBeforeUpload:[{type:Output}],onSend:[{type:Output}],onUpload:[{type:Output}],onError:[{type:Output}],onClear:[{type:Output}],onRemove:[{type:Output}],onSelect:[{type:Output}],onProgress:[{type:Output}],uploadHandler:[{type:Output}],templates:[{type:ContentChildren,args:[PrimeTemplate]}],advancedFileInput:[{type:ViewChild,args:["advancedfileinput"]}],basicFileInput:[{type:ViewChild,args:["basicfileinput"]}],content:[{type:ViewChild,args:["content"]}],files:[{type:Input}]};export class FileUploadModule{};FileUploadModule.decorators=[{type:NgModule,args:[{imports:[CommonModule,SharedModule,ButtonModule,ProgressBarModule,MessagesModule,RippleModule],exports:[FileUpload,SharedModule,ButtonModule,ProgressBarModule,MessagesModule],declarations:[FileUpload]}]}];